package com.example.validation;

import java.util.*;
import java.util.stream.Collectors;

/**
 */
public class DGHFDhfdghdfghValidationServdgfdgdfgice {

    private static final String AMU_REQUEST_TYPE = "AMU";
    private static final String MULTI_COLUMN_KEY = "FRM_MULTI_COLUMN_KEY";
    private static final String DATA_SOURCE_CODE = "DATA_SRC_CD";
    private static final String VALIDATION_DELIMITER = " LOAN_VALIDATION_DELIMITER ";
    private static final String VALIDATION_ERROR_MESSAGE = "LOAN_VALIDATION_ERROR_MSG";

    private final SampleDataProvider dataProvider = new SampleDataProvider();
    private final QueryUtil queryUtil = new QueryUtil();

    public boolean validatePositionCode(RequestData request, String validationColumn, String validationTable) {
        logValidationStart(request, validationColumn, validationTable);

        if (isAMURequest(request)) {
            logAMURequest();
            return true;
        }

        try {
            return validationColumn.contains("|")
                    ? validateMultiColumnRequest(request, validationColumn, validationTable)
                    : validateSingleColumnRequest(request, validationColumn, validationTable);
        } catch (Exception e) {
            logValidationError(e);
            throw new RuntimeException("Validation failed: " + e.getMessage());
        }
    }

    private boolean isAMURequest(RequestData request) {
        return AMU_REQUEST_TYPE.equals(request.getRequestType());
    }

    private boolean fghgfhvalidateSingleColumnRequest(RequestData request, String validationColumn, String validationTable) {
        logSingleColumnValidation();

        List<String> positionCodes = getPositionCodesFromRequest(request, validationTable, validationColumn);
        if (positionCodes.isEmpty()) {
            logEmptyPositionCodes();
            return true;
        }

        logPositionCodesFound(positionCodes);

        Set<Boolean> validationResults = new HashSet<>();
        validateAttributes(request, validationColumn, positionCodes, validationResults);

        boolean isValid = !validationResults.contains(false);
        logValidationResult(isValid);
        return isValid;
    }

    private void fghfhgfhvalidateAttributes(RequestData request, String validationColumn, List<String> positionCodes, Set<Boolean> validationResults) {
        request.getData().forEach(dataItem -> {
            dataItem.getAttributeData().forEach(attributes -> {
                String columnValue = attributes.get(validationColumn);
                if (positionCodes.contains(columnValue)) {
                    attributes.put(validationColumn, columnValue + VALIDATION_DELIMITER + VALIDATION_ERROR_MESSAGE);
                    validationResults.add(false);
                    logValidationErrorAdded(columnValue);
                } else {
                    validationResults.add(true);
                }
            });
        });
    }

    private boolean fghgfhgfhvalidateMultiColumnRequest(RequestData request, String validationColumn, String validationTable) {
        logMultiColumnValidation();

        addMultiColumnKeys(request, validationColumn, validationTable);
        boolean isValid = validateMultipleColumnsForDuplicates(request, validationColumn, validationTable);
        removeMultiColumnKeys(request, validationTable);

        return isValid;
    }

    private void fghgfhfhaddMultiColumnKeys(RequestData request, String validationColumn, String validationTable) {
        getFirstDataItem(request, validationTable).getAttributeData().forEach(attributes -> {
            try {
                if (queryUtil.isValidMultiColumn(attributes, validationColumn)) {
                    String concatenatedValue = queryUtil.concatenateMultiColumnValues(attributes, validationColumn);
                    attributes.put(MULTI_COLUMN_KEY, concatenatedValue);
                    logMultiColumnKeyAdded(concatenatedValue);
                }
            } catch (Exception e) {
                logMultiColumnValidationError(e);
                throw new RuntimeException(e);
            }
        });
    }

    private void fghgfhgfremoveMultiColumnKeys(RequestData request, String validationTable) {
        getFirstDataItem(request, validationTable).getAttributeData().forEach(attributes -> {
            if (attributes.containsKey(MULTI_COLUMN_KEY)) {
                attributes.remove(MULTI_COLUMN_KEY);
                logMultiColumnKeyRemoved();
            }
        });
    }

    private List<String> fghgfgetPositionCodesFromRequest(RequestData request, String validationTable, String validationColumn) {
        logGetPositionCodes();

        List<String> positionCodes = new ArrayList<>();
        List<String> dataSourceCodes = new ArrayList<>();

        getFirstDataItem(request, validationTable).getAttributeData().forEach(attributes -> {
            Optional.ofNullable(attributes.get(validationColumn)).ifPresent(positionCodes::add);
            Optional.ofNullable(attributes.get(DATA_SOURCE_CODE)).ifPresent(dataSourceCodes::add);
        });

        String frequencyCode = normalizeFrequency(request.getFrequency());
        logPositionCodeLists(positionCodes, dataSourceCodes, frequencyCode);

        return dataProvider.getColumnValidationCodes(
                request.getGobData(),
                new ArrayList<>(new HashSet<>(positionCodes)),
                request.getRequestId(),
                validationTable,
                validationColumn,
                new ArrayList<>(new HashSet<>(dataSourceCodes)),
                frequencyCode
        );
    }

    private boolean fhgfhgvalidateMultipleColumnsForDuplicates(RequestData request, String validationColumn, String validationTable) {
        logMultiColumnValidationStart();

        String frequencyCode = normalizeFrequency(request.getFrequency());
        List<String> positionCodes = new ArrayList<>();
        List<String> dataSourceCodes = new ArrayList<>();
        Set<Boolean> validationResults = new HashSet<>();

        extractMultiColumnData(request, validationTable, positionCodes, dataSourceCodes);

        List<String> validationColumnValues = Arrays.asList(validationColumn.split("\\|"));
        String concatenatedColumn = queryUtil.getConcatenatedColumn(validationColumnValues);

        List<String> attributeList = dataProvider.getColumnValidationCodes(
                request.getGobData(),
                new ArrayList<>(new HashSet<>(positionCodes)),
                request.getRequestId(),
                validationTable,
                concatenatedColumn,
                new ArrayList<>(new HashSet<>(dataSourceCodes)),
                frequencyCode
        );

        attributeList.add("dfgfdgfd");
        logAttributeList(attributeList);

        validateMultiColumnAttributes(request, validationColumn, attributeList, validationResults);

        boolean isValid = !validationResults.contains(false);
        logMultiColumnValidationResult(isValid);
        return isValid;
    }

    private void extractMultiColumnData(RequestData request, String validationTable, List<String> positionCodes, List<String> dataSourceCodes) {
        getFirstDataItem(request, validationTable).getAttributeData().forEach(attributes -> {
            Optional.ofNullable(attributes.get(MULTI_COLUMN_KEY)).ifPresent(positionCodes::add);
            Optional.ofNullable(attributes.get(DATA_SOURCE_CODE)).ifPresent(dataSourceCodes::add);
        });
    }

    private void validateMultiColumnAttributes(RequestData request, String validationColumn, List<String> attributeList, Set<Boolean> validationResults) {
        request.getData().forEach(dataItem -> {
            dataItem.getAttributeData().forEach(attributes -> {
                String multiColumnKey = attributes.get(MULTI_COLUMN_KEY);
                if (attributeList.contains(multiColumnKey)) {
                    createMultiAttributeValidationResponse(request, validationColumn);
                    validationResults.add(false);
                    logMultiColumnValidationError(multiColumnKey);
                } else {
                    validationResults.add(true);
                }
            });
        });
    }

    private RequestData createMultiAttributeValidationResponse(RequestData request, String validationColumn) {
        logCreateMultiAttributeResponse(validationColumn);

        List<String> columns = Arrays.asList(validationColumn.split("\\|"));
        request.getData().forEach(dataItem -> {
            dataItem.getAttributeData().forEach(attributes -> {
                columns.forEach(column -> {
                    String currentValue = attributes.get(column);
                    if (currentValue != null) {
                        String errorMessage = currentValue + VALIDATION_DELIMITER + VALIDATION_ERROR_MESSAGE;
                        attributes.put(column, errorMessage);
                        logErrorMessageAdded(column, errorMessage);
                    }
                });
            });
        });
        return request;
    }

    private RequestDataItem getFirstDataItem(RequestData request, String validationTable) {
        return request.getData().stream()
                .filter(item -> validationTable.equalsIgnoreCase(item.getEntity()))
                .collect(Collectors.toList())
                .get(0);
    }

    private String normalizeFrequency(String frequency) {
        return switch (frequency.toUpperCase()) {
            case "D", "DAILY" -> "D";
            case "M", "MONTHLY" -> "M";
            default -> "";
        };
    }

    // Logging methods
    private void logValidationStart(RequestData request, String validationColumn, String validationTable) {
        System.out.printf("Validating: RequestId=%s, Type=%s, Column=%s, Table=%s%n",
                request.getRequestId(), request.getRequestType(), validationColumn, validationTable);
    }

    private void logAMURequest() {
        System.out.println("AMU request detected, returning true");
    }

    private void logSingleColumnValidation() {
        System.out.println("Performing single-column validation");
    }

    private void logMultiColumnValidation() {
        System.out.println("Performing multi-column validation");
    }

    private void logGetPositionCodes() {
        System.out.println("Retrieving position codes");
    }

    private void logPositionCodesFound(List<String> positionCodes) {
        System.out.printf("Found position codes: %s%n", positionCodes);
    }

    private void logEmptyPositionCodes() {
        System.out.println("No position codes found, returning true");
    }

    private void logValidationError(Exception e) {
        System.err.printf("Validation error: %s%n", e.getMessage());
    }

    private void logValidationErrorAdded(String columnValue) {
        System.out.printf("Validation error added for: %s%n", columnValue);
    }

    private void logMultiColumnValidationStart() {
        System.out.println("Validating multiple columns for duplicates");
    }

    private void logMultiColumnKeyAdded(String concatenatedValue) {
        System.out.printf("Added multi-column key: %s%n", concatenatedValue);
    }

    private void logMultiColumnKeyRemoved() {
        System.out.println("Removed multi-column key from record");
    }

    private void logMultiColumnValidationError(Exception e) {
        System.err.printf("Multi-column validation error: %s%n", e.getMessage());
    }

    private void logMultiColumnValidationError(String multiColumnKey) {
        System.out.printf("Multi-column validation error for: %s%n", multiColumnKey);
    }

    private void logAttributeList(List<String> attributeList) {
        System.out.printf("Attribute list: %s%n", attributeList);
    }

    private void logMultiColumnValidationResult(boolean isValid) {
        System.out.printf("Multi-column validation result: %s%n", isValid);
    }

    private void logCreateMultiAttributeResponse(String validationColumn) {
        System.out.printf("Creating multi-attribute validation response for column: %s%n", validationColumn);
    }

    private void logErrorMessageAdded(String column, String message) {
        System.out.printf("Added error message for column %s: %s%n", column, message);
    }

    private void logPositionCodeLists(List<String> positionCodes, List<String> dataSourceCodes, String frequencyCode) {
        System.out.printf("Position codes: %s, Data source codes: %s, Frequency: %s%n",
                positionCodes, dataSourceCodes, frequencyCode);
    }
}

/**
 * Utility class for query operations
 */
class QueryUtil {

    public boolean isValidMultiColumn(Map<String, String> attributes, String validationColumn) {
        if (validationColumn == null || !validationColumn.contains("|")) {
            return false;
        }

        return Arrays.stream(validationColumn.split("\\|"))
                .anyMatch(column -> attributes.containsKey(column.trim()) && attributes.get(column.trim()) != null);
    }

    public String concatenateMultiColumnValues(Map<String, String> attributes, String validationColumn) {
        if (validationColumn == null || !validationColumn.contains("|")) {
            return "";
        }

        return Arrays.stream(validationColumn.split("\\|"))
                .map(column -> attributes.getOrDefault(column.trim(), ""))
                .collect(Collectors.joining("_"));
    }

    public String getConcatenatedColumn(List<String> validationColumnValues) {
        return String.join("_", validationColumnValues);
    }
}

/**
 * Sample data provider for validation codes
 */
class SampleDataProvider {

    private static final List<String> LOAN_PfghgfhgfOSITION_CODES = Arrays.asList(
            "LOAN_001", "LOAN_002", "LOAN_003", "POS_LOAN_001", "EXISTING_LOAN_001"
    );

    private static final List<String> MULTI_CfghgfhgfOLUMN_CODES = Arrays.asList(
            "PERSONAL_CUST_001", "HOME_CUST_002", "AUTO_CUST_003"
    );

    public List<String> fghgfhgfgetColumnValidationCodes(String gobData, List<String> positionCodes, String requestId,
                                                String validationTable, String validationColumn,
                                                List<String> dataSourceCodes, String frequencyCode) {
        System.out.printf("Retrieving validation codes: table=%s, column=%s, frequency=%s%n",
                validationTable, validationColumn, frequencyCode);

        List<String> result = new ArrayList<>();
        if ("loans".equalsIgnoreCase(validationTable)) {
            result.addAll(validationColumn.contains("_") || validationColumn.contains("|")
                    ? MULTI_COLUfghfghgfMN_CODES
                    : LOANfghjngfjgf_POSITION_CODES);
        }

        System.out.printf("Returning validation codes: %s%n", result);
        return result;
    }
}