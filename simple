<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Universal Log File Viewer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 15px;
            margin: 0;
        }

        .container {
            max-width: 98vw;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .header p {
            font-size: 13px;
            opacity: 0.9;
        }

        .controls {
            padding: 18px 25px;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }

        .control-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 12px;
            align-items: center;
        }

        .control-row:last-child {
            margin-bottom: 0;
        }

        .file-upload-section {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
        }

        .file-input-wrapper input[type="file"] {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

        .file-input-label {
            display: inline-block;
            padding: 12px 24px;
            background: #667eea;
            color: white;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
        }

        .file-input-label:hover {
            background: #5568d3;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .file-name {
            font-size: 13px;
            color: #6c757d;
            margin-left: 10px;
            font-style: italic;
        }

        .search-box {
            flex: 1;
            min-width: 250px;
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .search-box:focus {
            outline: none;
            border-color: #667eea;
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 20px;
            border: 2px solid #dee2e6;
            background: white;
            color: #495057;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .filter-btn:hover {
            border-color: #667eea;
            color: #667eea;
        }

        .filter-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .filter-btn.issue {
            border-color: #ffc107;
            color: #e67e22;
        }

        .filter-btn.issue:hover,
        .filter-btn.issue.active {
            background: #ffc107;
            color: white;
            border-color: #ffc107;
        }

        .filter-btn.success {
            border-color: #28a745;
            color: #28a745;
        }

        .filter-btn.success:hover,
        .filter-btn.success.active {
            background: #28a745;
            color: white;
            border-color: #28a745;
        }

        .filter-btn.failure {
            border-color: #dc3545;
            color: #dc3545;
        }

        .filter-btn.failure:hover,
        .filter-btn.failure.active {
            background: #dc3545;
            color: white;
            border-color: #dc3545;
        }

        .stats {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            font-size: 13px;
            color: #6c757d;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .stat-badge {
            background: #667eea;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-weight: 600;
        }

        .add-filter-btn {
            padding: 10px 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 600;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .add-filter-btn:hover {
            background: #5568d3;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .filter-mode-select {
            padding: 10px 16px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 600;
            background: white;
            cursor: pointer;
            transition: border-color 0.3s ease;
            min-width: 160px;
        }

        .filter-mode-select:focus {
            outline: none;
            border-color: #667eea;
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            min-height: 36px;
            align-items: center;
        }

        .filter-tag {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 500;
            animation: slideIn 0.3s ease;
        }

        .filter-tag .remove-tag {
            cursor: pointer;
            font-weight: bold;
            font-size: 16px;
            padding: 0 4px;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .filter-tag .remove-tag:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.2);
        }

        .filter-tags-empty {
            color: #6c757d;
            font-size: 12px;
            font-style: italic;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
            flex-wrap: wrap;
        }

        .tab {
            padding: 15px 30px;
            background: transparent;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #6c757d;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }

        .tab:hover {
            color: #667eea;
            background: rgba(102, 126, 234, 0.05);
        }

        .tab.active {
            color: #667eea;
            border-bottom-color: #667eea;
            background: white;
        }

        .tab-content {
            display: none;
            padding: 20px;
        }

        .tab-content.active {
            display: block;
        }

        .logs-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .logs-container.side-by-side {
            flex-direction: row;
        }

        .logs-container.side-by-side .log-section {
            flex: 1;
            min-width: 48%;
            max-width: 50%;
        }

        .view-toggle {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .view-btn {
            padding: 8px 16px;
            background: white;
            border: 2px solid #dee2e6;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s ease;
        }

        .view-btn:hover {
            border-color: #667eea;
            color: #667eea;
        }

        .view-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .flow-container {
            display: flex;
            gap: 20px;
        }

        .flow-panel {
            flex: 1;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            background: white;
        }

        .flow-header {
            background: #667eea;
            color: white;
            padding: 12px 16px;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .flow-content {
            height: calc(100vh - 450px);
            min-height: 650px;
            overflow-y: auto;
            padding: 16px;
        }

        .flow-step {
            padding: 12px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
            background: #f8f9fa;
            border-radius: 4px;
            position: relative;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .flow-step:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .flow-step.success {
            border-left-color: #28a745;
            background: #d4edda;
        }

        .flow-step.failure {
            border-left-color: #dc3545;
            background: #f8d7da;
        }

        .flow-step.warning {
            border-left-color: #ffc107;
            background: #fff3cd;
        }

        .flow-step-number {
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            margin-right: 8px;
        }

        .flow-step.success .flow-step-number {
            background: #28a745;
        }

        .flow-step.failure .flow-step-number {
            background: #dc3545;
        }

        .flow-step.warning .flow-step-number {
            background: #ffc107;
            color: #000;
        }

        .flow-step.hidden {
            display: none;
        }

        .flow-step mark {
            background-color: #ffd700;
            color: #000;
            padding: 2px 4px;
            border-radius: 2px;
        }

        .flow-step-content {
            font-size: 13px;
            color: #495057;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-family: 'Consolas', 'Courier New', monospace;
        }

        .flow-step-time {
            font-size: 11px;
            color: #6c757d;
            margin-top: 4px;
        }

        .loading-indicator {
            text-align: center;
            padding: 20px;
            color: #6c757d;
            font-size: 14px;
        }

        .line-count-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
        }

        .log-section {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            background: white;
        }

        .log-header {
            background: #f8f9fa;
            padding: 12px 16px;
            border-bottom: 2px solid #e9ecef;
            font-weight: 600;
            color: #495057;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .log-content {
            height: calc(100vh - 400px);
            min-height: 700px;
            overflow-y: auto;
            padding: 16px;
            background: #1e1e1e;
            color: #d4d4d4;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.7;
        }

        .log-line {
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 2px 0;
            transition: background-color 0.2s ease;
        }

        .log-line.hidden {
            display: none;
        }

        .log-line.success {
            color: #4ade80;
        }

        .log-line.failure {
            color: #f87171;
        }

        .log-line.warning {
            color: #fb923c;
        }

        .log-line mark {
            background-color: #ffd700;
            color: #000;
            padding: 2px 4px;
            border-radius: 2px;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }

        .empty-state svg {
            width: 80px;
            height: 80px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #495057;
        }

        .empty-state p {
            font-size: 14px;
        }

        .clear-btn {
            padding: 8px 16px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .clear-btn:hover {
            background: #c82333;
        }

        .trace-container {
            padding: 20px;
            height: calc(100vh - 250px);
            min-height: 750px;
            overflow-y: auto;
        }

        .trace-search {
            margin-bottom: 20px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .trace-search input {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }

        .trace-search input:focus {
            outline: none;
            border-color: #667eea;
        }

        .trace-legend {
            display: flex;
            gap: 15px;
            margin-top: 10px;
            font-size: 12px;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .legend-box {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            border: 2px solid #000;
        }

        .legend-box.request {
            background: #e3f2fd;
            border-color: #2196f3;
        }

        .legend-box.class {
            background: #f3e5f5;
            border-color: #9c27b0;
        }

        .legend-box.method {
            background: #fff3e0;
            border-color: #ff9800;
        }

        .trace-diagram {
            display: flex;
            gap: 30px;
            min-height: 600px;
            position: relative;
        }

        .service-column {
            flex: 1;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            background: white;
            padding: 15px;
        }

        .service-header {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 15px;
            padding: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 6px;
            text-align: center;
        }

        .trace-item {
            margin-bottom: 12px;
            padding: 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
            font-size: 13px;
            font-family: 'Consolas', 'Courier New', monospace;
        }

        .trace-item:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .trace-item.request-id {
            background: #e3f2fd;
            border-left-color: #2196f3;
        }

        .trace-item.class-name {
            background: #f3e5f5;
            border-left-color: #9c27b0;
        }

        .trace-item.method-name {
            background: #fff3e0;
            border-left-color: #ff9800;
        }

        .trace-item.hidden {
            display: none;
        }

        .trace-item mark {
            background-color: #ffd700;
            color: #000;
            padding: 2px 4px;
            border-radius: 2px;
            font-weight: 600;
        }

        .trace-type {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            margin-right: 8px;
            text-transform: uppercase;
        }

        .trace-type.request {
            background: #2196f3;
            color: white;
        }

        .trace-type.class {
            background: #9c27b0;
            color: white;
        }

        .trace-type.method {
            background: #ff9800;
            color: white;
        }

        .trace-line-ref {
            display: block;
            font-size: 11px;
            color: #6c757d;
            margin-top: 4px;
        }

        .flow-search-box {
            width: 100%;
            padding: 12px;
            margin-bottom: 15px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }

        .flow-search-box:focus {
            outline: none;
            border-color: #667eea;
        }

        .sql-viewer {
            padding: 20px;
            height: calc(100vh - 250px);
            min-height: 750px;
            overflow-y: auto;
        }

        .sql-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            color: white;
        }

        .sql-header h2 {
            font-size: 24px;
            margin: 0;
        }

        .sql-view-toggle {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .sql-search {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .sql-search input {
            flex: 1;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }

        .sql-search input:focus {
            outline: none;
            border-color: #667eea;
        }

        .sql-stats {
            white-space: nowrap;
        }

        .sql-content {
            display: block;
        }

        .sql-content > .sql-query-card {
            margin-bottom: 15px;
        }

        .sql-query-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .sql-query-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        }

        .sql-query-card.hidden {
            display: none;
        }

        .sql-query-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            background: #667eea;
            color: white;
        }

        .sql-query-type {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
            background: rgba(255, 255, 255, 0.2);
        }

        .sql-query-source {
            font-size: 12px;
            opacity: 0.9;
        }

        .sql-query-body {
            padding: 16px;
            background: #1e1e1e;
            color: #d4d4d4;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 13px;
            line-height: 1.6;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 300px;
            overflow-y: auto;
        }

        .sql-query-body mark {
            background-color: #ffd700;
            color: #000;
            padding: 2px 4px;
            border-radius: 2px;
        }

        .sql-query-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 16px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            font-size: 12px;
            color: #6c757d;
        }

        .sql-copy-btn {
            padding: 6px 12px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .sql-copy-btn:hover {
            background: #5568d3;
        }

        .sql-logger-info {
            padding: 10px 16px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .sql-logger-label {
            font-weight: 600;
            color: #6c757d;
        }

        .sql-logger-name {
            font-family: 'Consolas', 'Courier New', monospace;
            color: #667eea;
            font-weight: 600;
        }

        .sql-parameters {
            padding: 12px 16px;
            background: #fff3cd;
            border-top: 1px solid #ffc107;
            font-size: 13px;
        }

        .sql-parameters strong {
            color: #856404;
            display: block;
            margin-bottom: 8px;
        }

        .sql-param-item {
            padding: 4px 0;
            padding-left: 16px;
            font-family: 'Consolas', 'Courier New', monospace;
            border-left: 2px solid #ffc107;
            margin-bottom: 4px;
        }

        .sql-param-name {
            color: #667eea;
            font-weight: 600;
        }

        .sql-param-value {
            color: #28a745;
            font-weight: 600;
        }

        .sql-param-type {
            color: #6c757d;
            font-size: 11px;
        }

        .sql-file-section {
            margin-bottom: 30px;
        }

        .sql-file-header {
            font-size: 20px;
            font-weight: 600;
            padding: 15px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .sql-side-by-side {
            display: flex;
            gap: 20px;
        }

        .sql-panel {
            flex: 1;
            min-width: 48%;
        }

        .sql-panel-header {
            font-size: 18px;
            font-weight: 600;
            padding: 12px 16px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            margin-bottom: 15px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .json-viewer {
            padding: 20px;
            height: calc(100vh - 250px);
            min-height: 750px;
            overflow-y: auto;
        }

        .json-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            color: white;
        }

        .json-header h2 {
            font-size: 24px;
            margin: 0;
        }

        .json-view-toggle {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .json-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            flex-wrap: wrap;
        }

        .json-search-input {
            flex: 1;
            min-width: 300px;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
        }

        .json-search-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .json-sort-select {
            padding: 12px 16px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 600;
            background: white;
            cursor: pointer;
        }

        .json-sort-select:focus {
            outline: none;
            border-color: #667eea;
        }

        .json-stats {
            white-space: nowrap;
        }

        .json-content {
            background: white;
            border-radius: 8px;
            overflow: auto;
        }

        .json-table-container {
            overflow-x: auto;
            width: 100%;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .json-table {
            width: 100%;
            min-width: 1000px;
            border-collapse: collapse;
            font-size: 13px;
            background: white;
        }

        .json-table thead {
            position: sticky;
            top: 0;
            z-index: 10;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .json-table th {
            padding: 14px 12px;
            text-align: left;
            font-weight: 600;
            color: white;
            border-bottom: 2px solid #5568d3;
            white-space: nowrap;
        }

        .json-table th:nth-child(1) { width: 60px; }    /* # column */
        .json-table th:nth-child(2) { width: 150px; }   /* File column */
        .json-table th:nth-child(3) { width: 200px; }   /* Timestamp column */
        .json-table th:nth-child(4) { width: 250px; }   /* Logger column */
        .json-table th:nth-child(5) { width: auto; }    /* Message column - takes remaining space */

        .json-table td {
            padding: 12px;
            border-bottom: 1px solid #e9ecef;
            vertical-align: top;
        }

        .json-table tbody tr:hover {
            background: #f8f9fa;
        }

        .json-table tbody tr.hidden {
            display: none;
        }

        .json-timestamp {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 12px;
            color: #667eea;
            white-space: nowrap;
            font-weight: 600;
        }

        .json-logger {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 12px;
            color: #28a745;
            font-weight: 600;
            max-width: 150px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .json-message {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 13px;
            line-height: 1.6;
            word-wrap: break-word;
            word-break: break-word;
            white-space: pre-wrap;
            min-width: 400px;
        }

        .json-message mark {
            background-color: #ffd700;
            color: #000;
            padding: 2px 4px;
            border-radius: 2px;
        }

        .json-file-badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
            background: #e3f2fd;
            color: #1976d2;
            max-width: 160px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: middle;
        }

        .json-file-badge.file2 {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .json-side-by-side {
            display: flex;
            gap: 20px;
        }

        .json-panel {
            flex: 1;
            min-width: 48%;
        }

        .json-panel-header {
            font-size: 18px;
            font-weight: 600;
            padding: 12px 16px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .json-line-number {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 11px;
            color: #6c757d;
            text-align: center;
            background: #f8f9fa;
        }

        .json-insights-panel {
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .insight-cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .insight-card-mini {
            background: white;
            padding: 20px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .insight-card-mini:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
        }

        .insight-card-mini.error-card {
            border-left: 4px solid #dc3545;
        }

        .insight-card-mini.warn-card {
            border-left: 4px solid #ffc107;
        }

        .insight-card-mini.info-card {
            border-left: 4px solid #17a2b8;
        }

        .insight-card-mini.time-card {
            border-left: 4px solid #667eea;
        }

        .insight-card-mini.logger-card {
            border-left: 4px solid #28a745;
        }

        .insight-icon {
            font-size: 32px;
            line-height: 1;
        }

        .insight-data {
            flex: 1;
        }

        .insight-value {
            font-size: 28px;
            font-weight: 700;
            color: #495057;
            line-height: 1;
            margin-bottom: 5px;
        }

        .insight-label {
            font-size: 12px;
            color: #6c757d;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .quick-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .quick-action-btn {
            padding: 10px 20px;
            border: 2px solid #e9ecef;
            background: white;
            color: #495057;
            border-radius: 8px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .quick-action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .quick-action-btn.error-btn:hover {
            background: #dc3545;
            color: white;
            border-color: #dc3545;
        }

        .quick-action-btn.warn-btn:hover {
            background: #ffc107;
            color: #000;
            border-color: #ffc107;
        }

        .quick-action-btn.info-btn:hover {
            background: #17a2b8;
            color: white;
            border-color: #17a2b8;
        }

        .json-level-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 700;
            text-transform: uppercase;
            margin-right: 8px;
        }

        .json-level-badge.error {
            background: #dc3545;
            color: white;
        }

        .json-level-badge.warn {
            background: #ffc107;
            color: #000;
        }

        .json-level-badge.info {
            background: #17a2b8;
            color: white;
        }

        .json-level-badge.debug {
            background: #6c757d;
            color: white;
        }

        .debug-assistant {
            padding: 20px;
            height: calc(100vh - 250px);
            min-height: 750px;
            overflow-y: auto;
        }

        .debug-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            color: white;
        }

        .debug-header h2 {
            font-size: 24px;
            margin: 0;
        }

        .analyze-btn {
            padding: 12px 24px;
            background: white;
            color: #667eea;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .analyze-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .analyze-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .debug-section {
            margin-bottom: 25px;
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .debug-section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #495057;
        }

        .debug-section-title .icon {
            font-size: 24px;
        }

        .insight-card {
            background: #f8f9fa;
            border-left: 4px solid #667eea;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 6px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .insight-card:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .insight-card.critical {
            border-left-color: #dc3545;
            background: #fff5f5;
        }

        .insight-card.warning {
            border-left-color: #ffc107;
            background: #fffef5;
        }

        .insight-card.success {
            border-left-color: #28a745;
            background: #f0fff4;
        }

        .insight-title {
            font-weight: 600;
            font-size: 15px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .insight-severity {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .insight-severity.critical {
            background: #dc3545;
            color: white;
        }

        .insight-severity.high {
            background: #ff6b6b;
            color: white;
        }

        .insight-severity.medium {
            background: #ffc107;
            color: #000;
        }

        .insight-severity.low {
            background: #28a745;
            color: white;
        }

        .insight-description {
            color: #6c757d;
            font-size: 14px;
            line-height: 1.6;
            margin-bottom: 10px;
        }

        .insight-details {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .insight-metric {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 13px;
            color: #495057;
        }

        .insight-metric strong {
            color: #667eea;
        }

        .recommendation-list {
            list-style: none;
            padding: 0;
        }

        .recommendation-item {
            padding: 12px;
            margin-bottom: 10px;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            display: flex;
            align-items: flex-start;
            gap: 12px;
            transition: all 0.3s ease;
        }

        .recommendation-item:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .recommendation-icon {
            font-size: 24px;
            flex-shrink: 0;
        }

        .recommendation-content {
            flex: 1;
        }

        .recommendation-title {
            font-weight: 600;
            font-size: 14px;
            margin-bottom: 5px;
            color: #495057;
        }

        .recommendation-text {
            font-size: 13px;
            color: #6c757d;
            line-height: 1.5;
        }

        .timeline {
            position: relative;
            padding: 20px 0;
        }

        .timeline-item {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
            position: relative;
        }

        .timeline-marker {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 18px;
            flex-shrink: 0;
            z-index: 2;
        }

        .timeline-marker.error {
            background: #dc3545;
            color: white;
        }

        .timeline-marker.warning {
            background: #ffc107;
            color: #000;
        }

        .timeline-marker.info {
            background: #17a2b8;
            color: white;
        }

        .timeline-content {
            flex: 1;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .timeline-content:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .timeline-time {
            font-size: 12px;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .timeline-message {
            font-size: 14px;
            color: #495057;
            font-family: 'Consolas', 'Courier New', monospace;
        }

        .correlation-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }

        .correlation-card {
            background: linear-gradient(135deg, #667eea22 0%, #764ba222 100%);
            padding: 15px;
            border-radius: 8px;
            border: 2px solid #667eea;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .correlation-card:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .correlation-header {
            font-weight: 600;
            margin-bottom: 10px;
            color: #667eea;
        }

        .correlation-items {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .correlation-item {
            background: white;
            padding: 8px;
            border-radius: 4px;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .correlation-badge {
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: 600;
        }

        .correlation-badge.file1 {
            background: #e3f2fd;
            color: #1976d2;
        }

        .correlation-badge.file2 {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-value.error {
            color: #dc3545;
        }

        .stat-value.warning {
            color: #ffc107;
        }

        .stat-value.success {
            color: #28a745;
        }

        .stat-label {
            font-size: 13px;
            color: #6c757d;
            text-transform: uppercase;
            font-weight: 600;
        }

        .loading-spinner {
            text-align: center;
            padding: 40px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stack-trace-container {
            background: #2d2d2d;
            border-left: 4px solid #dc3545;
            margin: 10px 0;
            border-radius: 6px;
            overflow: hidden;
        }

        .stack-trace-header {
            background: #dc3545;
            color: white;
            padding: 10px 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: 600;
            font-size: 13px;
            transition: all 0.3s ease;
        }

        .stack-trace-header:hover {
            background: #c82333;
        }

        .stack-trace-toggle {
            font-size: 18px;
            transition: transform 0.3s ease;
        }

        .stack-trace-toggle.collapsed {
            transform: rotate(-90deg);
        }

        .stack-trace-content {
            max-height: 300px;
            overflow-y: auto;
            padding: 12px;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.5;
        }

        .stack-trace-content.collapsed {
            display: none;
        }

        .stack-trace-line {
            padding: 3px 0;
            color: #f87171;
        }

        .stack-trace-line.at {
            color: #9ca3af;
            padding-left: 20px;
        }

        .stack-trace-line.at:hover {
            color: #d4d4d4;
            background: #3d3d3d;
        }

        .stack-trace-summary {
            font-size: 11px;
            opacity: 0.8;
        }

        .log-line.noise {
            opacity: 0.3;
            font-size: 11px;
        }

        .log-line.cleaned {
            display: none;
        }

        .log-line.logger-hidden {
            display: none;
        }

        .clean-mode-info {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 12px 16px;
            margin: 10px 0;
            border-radius: 6px;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .clean-mode-info.hidden {
            display: none;
        }

        .logger-filter-info {
            background: #e3f2fd;
            border-left: 4px solid #667eea;
            padding: 12px 16px;
            margin: 10px 0;
            border-radius: 6px;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .flashbox {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            width: 95vw;
            max-width: 1400px;
            height: 90vh;
            max-height: 900px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
            z-index: 10000;
            opacity: 0;
            pointer-events: none;
            transition: all 0.25s ease-out;
        }

        .flashbox.show {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
            pointer-events: all;
        }

        .flashbox-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .flashbox-overlay.show {
            opacity: 1;
            pointer-events: all;
        }

        .flashbox-header {
            background: #667eea;
            color: white;
            padding: 20px 30px;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 3px solid #5568d3;
        }

        .flashbox-title {
            font-size: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .flashbox-close {
            background: rgba(255, 255, 255, 0.15);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            width: 36px;
            height: 36px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 22px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .flashbox-close:hover {
            background: rgba(255, 255, 255, 0.25);
            border-color: rgba(255, 255, 255, 0.5);
        }

        .flashbox-content {
            padding: 30px;
            height: calc(100% - 160px);
            overflow-y: auto;
        }

        .flashbox-text {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 24px;
            border-radius: 6px;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 16px;
            line-height: 1.8;
            white-space: pre-wrap;
            word-wrap: break-word;
            border: 1px solid #dee2e6;
            min-height: 200px;
        }

        .flashbox-actions {
            padding: 20px 30px;
            border-top: 1px solid #e9ecef;
            background: #f8f9fa;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .flashbox-btn {
            padding: 14px 28px;
            border: none;
            border-radius: 5px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .flashbox-btn.copy {
            background: #667eea;
            color: white;
        }

        .flashbox-btn.copy:hover {
            background: #5568d3;
        }

        .flashbox-btn.close {
            background: #e9ecef;
            color: #495057;
        }

        .flashbox-btn.close:hover {
            background: #dee2e6;
        }

        .flashbox-info {
            font-size: 14px;
            color: #6c757d;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 4px;
            border-left: 3px solid #667eea;
        }

        .selection-hint {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 13px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            transform: translateY(20px);
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .selection-hint.show {
            opacity: 1;
            transform: translateY(0);
        }

        .structured-container {
            padding: 20px;
            height: calc(100vh - 250px);
            min-height: 750px;
            overflow: auto;
        }

        .structured-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            align-items: center;
        }

        .structured-table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: auto;
        }

        .structured-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 13px;
        }

        .structured-table thead {
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .structured-table th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 14px 12px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid #5568d3;
            white-space: nowrap;
            position: sticky;
            top: 0;
        }

        .structured-table th.file1-header {
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
            border-bottom: 2px solid #1565c0;
        }

        .structured-table th.file2-header {
            background: linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%);
            border-bottom: 2px solid #6a1b9a;
        }

        .structured-table th.divider {
            background: #e9ecef;
            width: 2px;
            padding: 0;
        }

        .structured-table td {
            padding: 12px;
            border-bottom: 1px solid #e9ecef;
            vertical-align: top;
        }

        .structured-table td.divider {
            background: #e9ecef;
            width: 2px;
            padding: 0;
            border-left: 1px solid #dee2e6;
            border-right: 1px solid #dee2e6;
        }

        .structured-table td.file1-cell {
            background: #f0f9ff;
        }

        .structured-table td.file2-cell {
            background: #faf5ff;
        }

        .structured-table tbody tr:hover {
            background: #f8f9fa;
        }

        .structured-table tbody tr.error {
            background: #fff5f5;
        }

        .structured-table tbody tr.warn {
            background: #fffef5;
        }

        .structured-table tbody tr.info {
            background: #f0f9ff;
        }

        .structured-table tbody tr.debug {
            background: #fafafa;
        }

        .log-level-badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-weight: 600;
            font-size: 11px;
            text-transform: uppercase;
        }

        .log-level-badge.error {
            background: #dc3545;
            color: white;
        }

        .log-level-badge.warn {
            background: #ffc107;
            color: #000;
        }

        .log-level-badge.info {
            background: #17a2b8;
            color: white;
        }

        .log-level-badge.debug {
            background: #6c757d;
            color: white;
        }

        .log-level-badge.trace {
            background: #e9ecef;
            color: #495057;
        }

        .logger-name {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 12px;
            color: #667eea;
            font-weight: 600;
        }

        .log-message {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.5;
            max-width: 600px;
            word-wrap: break-word;
        }

        .object-attributes {
            margin-top: 8px;
            padding: 8px;
            background: #1e1e1e;
            border-radius: 4px;
            color: #d4d4d4;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 11px;
        }

        .object-attribute {
            padding: 3px 0;
            border-left: 2px solid #667eea;
            padding-left: 8px;
            margin-bottom: 4px;
        }

        .attribute-key {
            color: #9cdcfe;
            font-weight: 600;
        }

        .attribute-value {
            color: #ce9178;
        }

        .timestamp-cell {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 11px;
            color: #6c757d;
            white-space: nowrap;
        }

        .line-number-cell {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 11px;
            color: #6c757d;
            text-align: center;
            background: #f8f9fa;
        }

        .file-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: 600;
            margin-right: 8px;
        }

        .file-badge.file1 {
            background: #e3f2fd;
            color: #1976d2;
        }

        .file-badge.file2 {
            background: #f3e5f5;
            color: #7b1fa2;
        }

        .expand-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .expand-btn:hover {
            background: #5568d3;
        }

        .structured-cell-content {
            max-width: 500px;
        }

        .structured-empty-cell {
            color: #adb5bd;
            font-style: italic;
            text-align: center;
        }

        .logger-panel {
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            max-height: 300px;
            overflow-y: auto;
        }

        .logger-panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e9ecef;
        }

        .logger-panel-header h4 {
            margin: 0;
            font-size: 16px;
            color: #495057;
        }

        .logger-action-btn {
            padding: 6px 12px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 8px;
            transition: all 0.2s ease;
        }

        .logger-action-btn:hover {
            background: #5568d3;
        }

        .logger-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 10px;
        }

        .logger-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 4px;
            font-size: 12px;
            border: 1px solid #e9ecef;
        }

        .logger-item.hidden {
            opacity: 0.5;
            background: #fff5f5;
        }

        .logger-item-name {
            font-family: 'Consolas', 'Courier New', monospace;
            flex: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #667eea;
        }

        .logger-item.hidden .logger-item-name {
            color: #adb5bd;
            text-decoration: line-through;
        }

        .logger-toggle {
            padding: 4px 8px;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 10px;
            margin-left: 8px;
            transition: all 0.2s ease;
        }

        .logger-item.hidden .logger-toggle {
            background: #dc3545;
        }

        .logger-toggle:hover {
            opacity: 0.8;
        }

        .logger-count {
            background: #667eea;
            color: white;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 10px;
            margin-left: 8px;
        }

        .simplified-logger {
            font-weight: 700;
            color: #495057;
        }

        .logger-full-name {
            font-size: 10px;
            color: #adb5bd;
            display: block;
            margin-top: 2px;
        }

        .logger-presets {
            display: flex;
            gap: 8px;
            padding: 12px;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            flex-wrap: wrap;
            align-items: center;
        }

        .preset-label {
            font-weight: 600;
            font-size: 13px;
            color: #495057;
            margin-right: 8px;
        }

        .preset-btn {
            padding: 6px 12px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .preset-btn:hover {
            background: #5568d3;
            transform: translateY(-2px);
        }

        .manual-logger-input {
            padding: 12px;
            background: #fff3cd;
            border-bottom: 1px solid #ffc107;
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }

        .manual-input-label {
            font-weight: 600;
            font-size: 13px;
            color: #495057;
            white-space: nowrap;
        }

        .manual-logger-field {
            flex: 1;
            min-width: 300px;
            padding: 8px 12px;
            border: 2px solid #ffc107;
            border-radius: 4px;
            font-size: 13px;
            font-family: 'Consolas', 'Courier New', monospace;
        }

        .manual-logger-field:focus {
            outline: none;
            border-color: #ff9800;
            box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.2);
        }

        .manual-add-btn {
            padding: 8px 16px;
            background: #ff9800;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 600;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .manual-add-btn:hover {
            background: #f57c00;
            transform: translateY(-2px);
        }

        .manual-help {
            width: 100%;
            font-size: 11px;
            color: #856404;
            margin-top: 4px;
        }

        /* Optimizations for large monitors */
        @media (min-width: 2000px) {
            .container {
                max-width: 95vw;
            }

            .log-content {
                font-size: 15px;
                line-height: 1.8;
            }

            .header h1 {
                font-size: 32px;
            }
        }

        @media (max-width: 768px) {
            .control-row {
                flex-direction: column;
                align-items: stretch;
            }

            .search-box {
                width: 100%;
            }

            .filter-buttons {
                width: 100%;
            }

            .filter-btn {
                flex: 1;
            }

            .log-content {
                height: calc(100vh - 500px);
                min-height: 400px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧩 Universal Log File Viewer</h1>
            <p>Upload, search, and analyze any log files directly in your browser</p>
        </div>

        <div class="controls">
            <div class="control-row">
                <div class="file-upload-section">
                    <div class="file-input-wrapper">
                        <input type="file" id="file1" accept="*" onchange="handleFileUpload(1)">
                        <label for="file1" class="file-input-label">📁 Upload Log File 1</label>
                        <span id="file1-name" class="file-name">No file selected</span>
                    </div>
                    <div class="file-input-wrapper">
                        <input type="file" id="file2" accept="*" onchange="handleFileUpload(2)">
                        <label for="file2" class="file-input-label">📁 Upload Log File 2</label>
                        <span id="file2-name" class="file-name">No file selected</span>
                    </div>
                </div>
            </div>

            <div class="control-row">
                <div style="flex: 1; display: flex; flex-direction: column; gap: 10px;">
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <input type="text" class="search-box" id="searchBox" placeholder="🔍 Type and press Enter to add filter term..." style="flex: 1;" onkeypress="handleSearchKeyPress(event)">
                        <button class="add-filter-btn" onclick="addFilterTerm()">➕ Add Filter</button>
                        <select class="filter-mode-select" id="filterMode" onchange="applyMultiTermFilter()">
                            <option value="OR">Match ANY (OR)</option>
                            <option value="AND">Match ALL (AND)</option>
                        </select>
                    </div>
                    <div class="filter-tags" id="filterTags"></div>
                </div>
                <div class="stats">
                    <div class="stat-item">
                        <span>Matches:</span>
                        <span class="stat-badge" id="matchCount">0</span>
                    </div>
                </div>
            </div>

            <div class="control-row">
                <div class="filter-buttons">
                    <button class="filter-btn issue" onclick="toggleFilter('issue')">⚠️ Quick Issue</button>
                    <button class="filter-btn success" onclick="toggleFilter('success')">✅ All Success Steps</button>
                    <button class="filter-btn failure" onclick="toggleFilter('failure')">❌ All Failure Steps</button>
                    <button class="filter-btn" id="cleanLogsBtn" onclick="toggleCleanMode()">🧽 Clean View</button>
                    <button class="filter-btn" id="stackTraceBtn" onclick="toggleStackTraceFormat()">📜 Format Stack Traces</button>
                    <button class="filter-btn" id="manageLoggersBtn" onclick="toggleLoggerPanel()">🎯 Manage Loggers</button>
                    <button class="filter-btn" onclick="exportFilteredResults()" style="background: #28a745; color: white;">📥 Export Visible Lines</button>
                </div>
            </div>
            <div class="logger-panel" id="loggerPanel" style="display: none;">
                <div class="logger-panel-header">
                    <h4>🎯 Logger Management - Hide Noisy Loggers</h4>
                    <div>
                        <button class="logger-action-btn" onclick="showAllLoggers()">Show All</button>
                        <button class="logger-action-btn" onclick="hideAllLoggers()">Hide All</button>
                        <button class="logger-action-btn" onclick="savePreferences()" style="background: #28a745;">💾 Save Prefs</button>
                        <button class="logger-action-btn" onclick="toggleLoggerPanel()" style="background: #dc3545;">Close</button>
                    </div>
                </div>
                <div class="manual-logger-input">
                    <div class="manual-input-label">✏️ Add Logger Pattern Manually:</div>
                    <input type="text" id="manualLoggerInput" placeholder="e.g., org.springframework or com.example.NoisyService" class="manual-logger-field">
                    <button class="manual-add-btn" onclick="addManualLogger()">➕ Add & Hide</button>
                    <div class="manual-help">💡 Tip: Add patterns before uploading logs to pre-filter them</div>
                </div>
                <div class="logger-presets">
                    <div class="preset-label">Quick Presets:</div>
                    <button class="preset-btn" onclick="applyPreset('springBoot')">🍃 Hide Spring Boot</button>
                    <button class="preset-btn" onclick="applyPreset('hibernate')">📦 Hide Hibernate</button>
                    <button class="preset-btn" onclick="applyPreset('tomcat')">🐈 Hide Tomcat</button>
                    <button class="preset-btn" onclick="applyPreset('netty')">⚡ Hide Netty</button>
                    <button class="preset-btn" onclick="applyPreset('frameworks')">🚫 Hide All Frameworks</button>
                    <button class="preset-btn" onclick="loadPreferences()" style="background: #17a2b8;">📂 Load My Prefs</button>
                </div>
                <div class="logger-list" id="loggerList"></div>
            </div>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="switchTab('standard')">📄 Standard View</button>
            <button class="tab" onclick="switchTab('flow')">🔄 Flow Analysis</button>
            <button class="tab" onclick="switchTab('trace')">🔗 Trace Diagram</button>
            <button class="tab" onclick="switchTab('sql')">📊 SQL Queries</button>
            <button class="tab" onclick="switchTab('json')">📊 JSON Logs</button>
            <button class="tab" onclick="switchTab('debug')">🤖 Debug Assistant</button>
        </div>

        <div id="standardTab" class="tab-content active">
            <div class="view-toggle">
                <button class="view-btn active" onclick="switchView('stacked')">📚 Stacked View</button>
                <button class="view-btn" onclick="switchView('side-by-side')">⬌ Side-by-Side</button>
            </div>
            <div class="logs-container" id="logsContainer">
            <div class="empty-state">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3>No Log Files Loaded</h3>
                <p>Upload one or two log files to get started</p>
            </div>
        </div>
        </div>

        <div id="flowTab" class="tab-content">
            <input type="text" class="flow-search-box" id="flowSearchBox" placeholder="🔍 Search in flow analysis..." oninput="performFlowSearch()">
            <div class="flow-container" id="flowContainer">
                <div class="empty-state">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    <h3>No Flow Data Available</h3>
                    <p>Upload log files to see the flow analysis</p>
                </div>
            </div>
        </div>

        <div id="traceTab" class="tab-content">
            <div class="trace-container">
                <div class="trace-search">
                    <input type="text" id="traceSearchBox" placeholder="🔍 Search request IDs, classes, or methods..." oninput="performTraceSearch()">
                    <div class="trace-legend">
                        <div class="legend-item">
                            <div class="legend-box request"></div>
                            <span>Request ID</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-box class"></div>
                            <span>Class</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-box method"></div>
                            <span>Method</span>
                        </div>
                    </div>
                </div>
                <div class="trace-diagram" id="traceDiagram">
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                        </svg>
                        <h3>No Trace Data Available</h3>
                        <p>Upload log files to see the trace diagram</p>
                    </div>
                </div>
            </div>
        </div>

        <div id="jsonTab" class="tab-content">
            <div class="json-viewer">
                <div class="json-header">
                    <h2>📊 JSON Log Viewer</h2>
                    <div style="display: flex; gap: 10px;">
                        <button class="analyze-btn" onclick="extractJSONLogs()">🔍 Parse JSON</button>
                        <button class="analyze-btn" onclick="exportJSONLogs()" style="background: #28a745;">📥 Export</button>
                    </div>
                </div>
                <div class="json-insights-panel" id="jsonInsightsPanel" style="display: none;">
                    <div class="insight-cards-grid">
                        <div class="insight-card-mini error-card">
                            <div class="insight-icon">❌</div>
                            <div class="insight-data">
                                <div class="insight-value" id="errorCount">0</div>
                                <div class="insight-label">Errors</div>
                            </div>
                        </div>
                        <div class="insight-card-mini warn-card">
                            <div class="insight-icon">⚠️</div>
                            <div class="insight-data">
                                <div class="insight-value" id="warnCount">0</div>
                                <div class="insight-label">Warnings</div>
                            </div>
                        </div>
                        <div class="insight-card-mini info-card">
                            <div class="insight-icon">ℹ️</div>
                            <div class="insight-data">
                                <div class="insight-value" id="infoCount">0</div>
                                <div class="insight-label">Info</div>
                            </div>
                        </div>
                        <div class="insight-card-mini time-card">
                            <div class="insight-icon">⏱️</div>
                            <div class="insight-data">
                                <div class="insight-value" id="timeSpan">-</div>
                                <div class="insight-label">Time Span</div>
                            </div>
                        </div>
                        <div class="insight-card-mini logger-card">
                            <div class="insight-icon">🎯</div>
                            <div class="insight-data">
                                <div class="insight-value" id="topLogger">-</div>
                                <div class="insight-label">Most Active</div>
                            </div>
                        </div>
                    </div>
                    <div class="quick-actions">
                        <button class="quick-action-btn error-btn" onclick="filterJSONByLevel('error')">❌ Errors Only</button>
                        <button class="quick-action-btn warn-btn" onclick="filterJSONByLevel('warn')">⚠️ Warnings Only</button>
                        <button class="quick-action-btn info-btn" onclick="filterJSONByLevel('info')">ℹ️ Info Only</button>
                        <button class="quick-action-btn" onclick="filterJSONByLevel('all')">🔄 Show All</button>
                    </div>
                </div>
                <div class="json-controls">
                    <input type="text" id="jsonSearchBox" placeholder="🔍 Filter logs by message or logger..." oninput="filterJSONLogs()" class="json-search-input">
                    <select id="jsonSortOrder" onchange="sortJSONLogs()" class="json-sort-select">
                        <option value="asc">↑ Oldest First</option>
                        <option value="desc" selected>↓ Newest First</option>
                    </select>
                    <div class="json-stats" id="jsonStats">
                        <span class="stat-badge">0 logs found</span>
                    </div>
                </div>
                <div id="jsonContent" class="json-content">
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <h3>No JSON Logs Found</h3>
                        <p>Upload log files and click "Parse JSON" to view structured logs</p>
                    </div>
                </div>
            </div>
        </div>

        <div id="sqlTab" class="tab-content">
            <div class="sql-viewer">
                <div class="sql-header">
                    <h2>📊 SQL Query Viewer</h2>
                    <div style="display: flex; gap: 10px;">
                        <button class="analyze-btn" onclick="extractSQLQueries()">🔍 Extract SQL</button>
                        <button class="analyze-btn" onclick="exportSQLQueries()" style="background: #28a745;">📥 Export SQL</button>
                    </div>
                </div>
                <div class="sql-view-toggle">
                    <button class="view-btn active" onclick="setSQLViewMode('combined')">📊 Combined View</button>
                    <button class="view-btn" onclick="setSQLViewMode('separate')">📄 Separate Files</button>
                    <button class="view-btn" onclick="setSQLViewMode('side-by-side')">⬌ Side-by-Side</button>
                </div>
                <div class="sql-search">
                    <input type="text" id="sqlSearchBox" placeholder="🔍 Search in SQL queries..." oninput="filterSQLQueries()">
                    <div class="sql-stats" id="sqlStats">
                        <span class="stat-badge">0 queries found</span>
                    </div>
                </div>
                <div id="sqlContent" class="sql-content">
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                        </svg>
                        <h3>No SQL Queries Found</h3>
                        <p>Upload log files and click "Extract SQL" to view all SQL queries</p>
                    </div>
                </div>
            </div>
        </div>

        <div id="debugTab" class="tab-content">
            <div class="debug-assistant">
                <div class="debug-header">
                    <h2>🤖 AI-Powered Debug Assistant</h2>
                    <button class="analyze-btn" onclick="runDebugAnalysis()" id="analyzeBtn">⚡ Analyze Logs</button>
                </div>
                <div id="debugContent">
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                        </svg>
                        <h3>Ready to Analyze</h3>
                        <p>Upload log files and click "Analyze Logs" to get AI-powered debugging insights</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Flashbox Overlay -->
    <div class="flashbox-overlay" id="flashboxOverlay" onclick="closeFlashbox()"></div>

    <!-- Flashbox -->
    <div class="flashbox" id="flashbox">
        <div class="flashbox-header">
            <div class="flashbox-title">
                <span>📝</span>
                <span>Selected Log Text</span>
            </div>
            <button class="flashbox-close" onclick="closeFlashbox()">×</button>
        </div>
        <div class="flashbox-content">
            <div class="flashbox-info">
                <span>📄</span>
                <span id="flashboxLineInfo">0 lines selected</span>
            </div>
            <div class="flashbox-text" id="flashboxText"></div>
        </div>
        <div class="flashbox-actions">
            <button class="flashbox-btn copy" onclick="copyFlashboxContent()">📋 Copy to Clipboard</button>
            <button class="flashbox-btn close" onclick="closeFlashbox()">Close</button>
        </div>
    </div>

    <!-- Selection Hint -->
    <div class="selection-hint" id="selectionHint">
        ✨ Text selected! Click anywhere to view in flashbox
    </div>

    <script>
        let logData = {
            file1: { name: '', content: '', lines: [], flowSteps: [], traceData: [] },
            file2: { name: '', content: '', lines: [], flowSteps: [], traceData: [] }
        };

        let currentFilter = null;
        let currentView = 'stacked';
        let currentTab = 'standard';
        let cleanModeEnabled = false;
        let stackTraceFormatEnabled = false;
        let filterTerms = [];
        let filterMode = 'OR';
        let selectedText = '';
        let selectionTimeout = null;
        let hiddenLoggers = new Set();
        let loggerCounts = new Map();

        // Predefined logger patterns to hide (common noisy frameworks)
        const loggerPresets = {
            springBoot: [
                'org.springframework.boot',
                'org.springframework.context',
                'org.springframework.web',
                'org.springframework.beans',
                'org.springframework.jmx',
                'org.springframework.core'
            ],
            hibernate: [
                'org.hibernate',
                'org.hibernate.SQL',
                'org.hibernate.type',
                'org.hibernate.engine',
                'org.hibernate.loader'
            ],
            tomcat: [
                'org.apache.catalina',
                'org.apache.coyote',
                'org.apache.tomcat'
            ],
            netty: [
                'io.netty',
                'io.netty.channel',
                'io.netty.buffer'
            ],
            frameworks: [
                'org.springframework',
                'org.hibernate',
                'org.apache',
                'io.netty',
                'com.zaxxer.hikari',
                'reactor.netty',
                'org.jboss',
                'ch.qos.logback',
                'org.slf4j'
            ]
        };

        const issueKeywords = [
            'error', 'fail', 'warn', 'warning', 'exception', 'timeout', 'critical', 'fatal', 'alert',
            'unable', 'cannot', 'could not', 'invalid', 'missing', 'not found', 'failure',
            'stack trace', 'stacktrace', 'null pointer', 'nullpointer', 'out of memory'
        ];
        const successKeywords = [
            'success', 'completed', 'done', 'passed', 'ok', 'successful', 'finished',
            'complete', 'resolved', 'accepted', 'approved', 'validated', 'verified',
            'healthy', 'ready', 'started successfully', 'deployed'
        ];
        const failureKeywords = [
            'failed', 'exception', 'crash', 'not completed', 'aborted', 'rejected', 'denied',
            'killed', 'terminated', 'stopped unexpectedly', 'unsuccessful', 'unreachable',
            'connection refused', 'access denied', 'permission denied', 'forbidden'
        ];

        // Noise patterns to filter out in clean mode
        const noisePatterns = [
            /^\s*at\s+/i,  // Stack trace lines
            /^\s*debug/i,
            /^\s*trace/i,
            /^\s*verbose/i,
            /health.*check/i,
            /heartbeat/i,
            /ping/i,
            /^\s*INFO.*Starting/i,
            /^\s*INFO.*Started/i,
            /metrics/i,
            /^\s*$/ // Empty lines
        ];

        function handleFileUpload(fileNumber) {
            const fileInput = document.getElementById(`file${fileNumber}`);
            const fileName = document.getElementById(`file${fileNumber}-name`);
            const file = fileInput.files[0];

            if (!file) return;

            fileName.textContent = file.name;

            const reader = new FileReader();
            reader.onload = function(e) {
                const content = e.target.result;
                const lines = content.split('\n');

                logData[`file${fileNumber}`] = {
                    name: file.name,
                    content: content,
                    lines: lines,
                    flowSteps: extractFlowSteps(lines),
                    traceData: extractTraceData(lines)
                };

                // Extract logger information
                extractLoggerInfo();

                renderLogs();

                // Re-extract data for active tab
                if (currentTab === 'flow') {
                    renderFlowAnalysis();
                } else if (currentTab === 'trace') {
                    renderTraceDiagram();
                } else if (currentTab === 'sql') {
                    // Re-extract SQL queries if SQL tab was already visited
                    if (sqlQueries.length > 0) {
                        extractSQLQueries();
                    }
                } else if (currentTab === 'json') {
                    // Re-extract JSON logs if JSON tab was already visited
                    if (jsonLogs.length > 0) {
                        extractJSONLogs();
                    }
                }

                // Also re-extract if user has visited these tabs before (even if not currently active)
                if (currentTab !== 'sql' && sqlQueries.length > 0) {
                    extractSQLQueries();
                }
                if (currentTab !== 'json' && jsonLogs.length > 0) {
                    extractJSONLogs();
                }
            };

            reader.onerror = function() {
                alert(`Error reading file: ${file.name}`);
            };

            reader.readAsText(file);
        }

        function renderLogs() {
            const container = document.getElementById('logsContainer');
            container.innerHTML = '';

            if (!logData.file1.content && !logData.file2.content) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <h3>No Log Files Loaded</h3>
                        <p>Upload one or two log files to get started</p>
                    </div>
                `;
                return;
            }

            ['file1', 'file2'].forEach(fileKey => {
                if (logData[fileKey].content) {
                    const section = document.createElement('div');
                    section.className = 'log-section';
                    section.id = `log-section-${fileKey}`;

                    const header = document.createElement('div');
                    header.className = 'log-header';
                    header.innerHTML = `
                        <span>📄 ${logData[fileKey].name} <span class="line-count-badge">${logData[fileKey].lines.length} lines</span></span>
                        <button class="clear-btn" onclick="clearLog('${fileKey}')">Clear</button>
                    `;

                    const content = document.createElement('div');
                    content.className = 'log-content';
                    content.id = `log-content-${fileKey}`;

                    if (stackTraceFormatEnabled) {
                        renderLogsWithStackTraceFormatting(content, fileKey);
                    } else {
                        renderLogsStandard(content, fileKey);
                    }

                    section.appendChild(header);
                    section.appendChild(content);
                    container.appendChild(section);
                }
            });

            applyCurrentFilter();
            applyMultiTermFilter();
            if (cleanModeEnabled) {
                applyCleanMode();
            }
            // Apply logger filtering
            applyLoggerFiltering();
        }

        function renderLogsStandard(content, fileKey) {
            logData[fileKey].lines.forEach((line, index) => {
                const lineDiv = document.createElement('div');
                lineDiv.className = 'log-line';
                lineDiv.setAttribute('data-line-index', index);
                lineDiv.setAttribute('data-file', fileKey);
                lineDiv.setAttribute('data-original-line', line);
                lineDiv.textContent = line;

                // Apply color coding
                const lowerLine = line.toLowerCase();
                if (successKeywords.some(keyword => lowerLine.includes(keyword))) {
                    lineDiv.classList.add('success');
                } else if (failureKeywords.some(keyword => lowerLine.includes(keyword))) {
                    lineDiv.classList.add('failure');
                } else if (issueKeywords.some(keyword => lowerLine.includes(keyword))) {
                    lineDiv.classList.add('warning');
                }

                // Mark noise lines
                if (noisePatterns.some(pattern => pattern.test(line))) {
                    lineDiv.classList.add('noise');
                }

                content.appendChild(lineDiv);
            });
        }

        function renderLogsWithStackTraceFormatting(content, fileKey) {
            const lines = logData[fileKey].lines;
            let i = 0;
            let stackTraceId = 0;

            while (i < lines.length) {
                const line = lines[i];
                const lowerLine = line.toLowerCase();

                // Check if this is the start of a stack trace (exception line)
                if (line.match(/Exception|Error/i) && (line.includes(':') || line.includes('at '))) {
                    // Found a stack trace
                    const stackTraceLines = [line];
                    let j = i + 1;

                    // Collect all "at" lines
                    while (j < lines.length && (lines[j].trim().startsWith('at ') || lines[j].trim().match(/^\s+at\s/))) {
                        stackTraceLines.push(lines[j]);
                        j++;
                    }

                    // Create collapsible stack trace
                    const stackTraceContainer = document.createElement('div');
                    stackTraceContainer.className = 'stack-trace-container';
                    stackTraceContainer.setAttribute('data-stack-id', stackTraceId);

                    const exceptionName = line.match(/([A-Za-z]+Exception|[A-Za-z]+Error)/)?.[0] || 'Exception';
                    const exceptionMessage = line.split(':')[1]?.substring(0, 60) || '';

                    const header = document.createElement('div');
                    header.className = 'stack-trace-header';
                    header.innerHTML = `
                        <div>
                            <strong>❌ ${exceptionName}</strong>
                            <span class="stack-trace-summary">${exceptionMessage}</span>
                        </div>
                        <div>
                            <span style="margin-right: 10px;">${stackTraceLines.length - 1} frames</span>
                            <span class="stack-trace-toggle">▼</span>
                        </div>
                    `;
                    header.onclick = () => toggleStackTrace(stackTraceId);

                    const stackContent = document.createElement('div');
                    stackContent.className = 'stack-trace-content';
                    stackContent.id = `stack-trace-${stackTraceId}`;

                    stackTraceLines.forEach((stackLine, idx) => {
                        const stackLineDiv = document.createElement('div');
                        stackLineDiv.className = 'stack-trace-line';
                        if (stackLine.trim().startsWith('at ')) {
                            stackLineDiv.classList.add('at');
                        }
                        stackLineDiv.textContent = stackLine;
                        stackContent.appendChild(stackLineDiv);
                    });

                    stackTraceContainer.appendChild(header);
                    stackTraceContainer.appendChild(stackContent);
                    content.appendChild(stackTraceContainer);

                    i = j;
                    stackTraceId++;
                } else {
                    // Regular line
                    const lineDiv = document.createElement('div');
                    lineDiv.className = 'log-line';
                    lineDiv.setAttribute('data-line-index', i);
                    lineDiv.setAttribute('data-file', fileKey);
                    lineDiv.setAttribute('data-original-line', line);
                    lineDiv.textContent = line;

                    // Apply color coding
                    if (successKeywords.some(keyword => lowerLine.includes(keyword))) {
                        lineDiv.classList.add('success');
                    } else if (failureKeywords.some(keyword => lowerLine.includes(keyword))) {
                        lineDiv.classList.add('failure');
                    } else if (issueKeywords.some(keyword => lowerLine.includes(keyword))) {
                        lineDiv.classList.add('warning');
                    }

                    // Mark noise lines
                    if (noisePatterns.some(pattern => pattern.test(line))) {
                        lineDiv.classList.add('noise');
                    }

                    content.appendChild(lineDiv);
                    i++;
                }
            }
        }

        function toggleStackTrace(stackId) {
            const content = document.getElementById(`stack-trace-${stackId}`);
            const toggle = document.querySelector(`[data-stack-id="${stackId}"] .stack-trace-toggle`);

            if (content && toggle) {
                content.classList.toggle('collapsed');
                toggle.classList.toggle('collapsed');
            }
        }

        function clearLog(fileKey) {
            const fileNumber = fileKey === 'file1' ? 1 : 2;
            logData[fileKey] = { name: '', content: '', lines: [], flowSteps: [], traceData: [] };
            document.getElementById(`file${fileNumber}`).value = '';
            document.getElementById(`file${fileNumber}-name`).textContent = 'No file selected';

            // Re-extract logger info from remaining file
            extractLoggerInfo();

            renderLogs();
            if (currentTab === 'flow') {
                renderFlowAnalysis();
            } else if (currentTab === 'trace') {
                renderTraceDiagram();
            }
        }

        function handleSearchKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                addFilterTerm();
            }
        }

        function addFilterTerm() {
            const searchBox = document.getElementById('searchBox');
            const term = searchBox.value.trim();

            if (term && !filterTerms.includes(term.toLowerCase())) {
                filterTerms.push(term.toLowerCase());
                searchBox.value = '';
                renderFilterTags();
                applyMultiTermFilter();
            }
        }

        function removeFilterTerm(term) {
            filterTerms = filterTerms.filter(t => t !== term);
            renderFilterTags();
            applyMultiTermFilter();
        }

        function clearAllFilters() {
            filterTerms = [];
            renderFilterTags();
            applyMultiTermFilter();
        }

        function renderFilterTags() {
            const container = document.getElementById('filterTags');

            if (filterTerms.length === 0) {
                container.innerHTML = '<span class="filter-tags-empty">No filters applied - add terms above to filter logs</span>';
                return;
            }

            let html = '';
            filterTerms.forEach(term => {
                html += `
                    <div class="filter-tag">
                        <span>🔍 ${term}</span>
                        <span class="remove-tag" onclick="removeFilterTerm('${term}')">×</span>
                    </div>
                `;
            });

            html += `
                <button class="filter-tag" style="background: #dc3545; cursor: pointer;" onclick="clearAllFilters()">
                    <span>🗑️ Clear All</span>
                </button>
            `;

            container.innerHTML = html;
        }

        function applyMultiTermFilter() {
            filterMode = document.getElementById('filterMode').value;
            let matchCount = 0;

            document.querySelectorAll('.log-line').forEach(lineDiv => {
                const fileKey = lineDiv.getAttribute('data-file');
                const lineIndex = lineDiv.getAttribute('data-line-index');

                if (!fileKey || lineIndex === null) return;

                const originalText = logData[fileKey].lines[lineIndex];
                const lowerText = originalText.toLowerCase();

                if (filterTerms.length === 0) {
                    // No filters - show all, no highlighting
                    lineDiv.textContent = originalText;
                    lineDiv.classList.remove('hidden');
                    return;
                }

                let shouldShow = false;
                let matchingTerms = [];

                // Check each filter term
                filterTerms.forEach(term => {
                    if (lowerText.includes(term)) {
                        matchingTerms.push(term);
                    }
                });

                // Apply AND/OR logic
                if (filterMode === 'AND') {
                    shouldShow = matchingTerms.length === filterTerms.length;
                } else {
                    shouldShow = matchingTerms.length > 0;
                }

                if (shouldShow) {
                    lineDiv.classList.remove('hidden');
                    matchCount++;

                    // Highlight all matching terms
                    let highlightedText = originalText;
                    matchingTerms.forEach(term => {
                        const regex = new RegExp(`(${escapeRegex(term)})`, 'gi');
                        highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');
                    });
                    lineDiv.innerHTML = highlightedText;
                } else {
                    lineDiv.classList.add('hidden');
                    lineDiv.textContent = originalText;
                }
            });

            document.getElementById('matchCount').textContent = matchCount;
        }

        function performSearch() {
            // Legacy function - now handled by multi-term filter
            applyMultiTermFilter();
        }

        function escapeRegex(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }

        function toggleFilter(filterType) {
            const buttons = document.querySelectorAll('.filter-btn.issue, .filter-btn.success, .filter-btn.failure');
            const clickedButton = event.target;

            if (currentFilter === filterType) {
                // Deactivate filter
                currentFilter = null;
                clickedButton.classList.remove('active');
                showAllLines();
            } else {
                // Activate new filter
                currentFilter = filterType;
                buttons.forEach(btn => btn.classList.remove('active'));
                clickedButton.classList.add('active');
                applyCurrentFilter();
            }

            // Re-apply multi-term filter after quick filter
            applyMultiTermFilter();
        }


        function showAllLines() {
            document.querySelectorAll('.log-line').forEach(lineDiv => {
                lineDiv.classList.remove('hidden');
            });
        }

        function applyCurrentFilter() {
            if (!currentFilter) {
                // No filter active - don't hide anything
                return;
            }

            const keywordMap = {
                'issue': issueKeywords,
                'success': successKeywords,
                'failure': failureKeywords
            };

            const keywords = keywordMap[currentFilter];
            if (!keywords) return;

            let matchCount = 0;

            document.querySelectorAll('.log-line').forEach(lineDiv => {
                const fileKey = lineDiv.getAttribute('data-file');
                const lineIndex = lineDiv.getAttribute('data-line-index');

                if (!fileKey || lineIndex === null) return;

                const originalText = logData[fileKey].lines[lineIndex];
                const lowerText = originalText.toLowerCase();

                // Check if line contains any of the filter keywords
                const matches = keywords.some(keyword => lowerText.includes(keyword));

                if (matches) {
                    lineDiv.classList.remove('hidden');
                    matchCount++;
                } else {
                    lineDiv.classList.add('hidden');
                }
            });

            // Update match count badge
            document.getElementById('matchCount').textContent = matchCount;
        }

        function toggleCleanMode() {
            cleanModeEnabled = !cleanModeEnabled;
            const btn = document.getElementById('cleanLogsBtn');

            if (cleanModeEnabled) {
                btn.classList.add('active');
                applyCleanMode();
            } else {
                btn.classList.remove('active');
                removeCleanMode();
            }
        }

        function applyCleanMode() {
            let totalCleaned = 0;

            document.querySelectorAll('.log-line').forEach(lineDiv => {
                const line = lineDiv.getAttribute('data-original-line') || lineDiv.textContent;

                if (noisePatterns.some(pattern => pattern.test(line))) {
                    lineDiv.classList.add('cleaned');
                    totalCleaned++;
                } else {
                    lineDiv.classList.remove('cleaned');
                }
            });

            // Show info banner
            showCleanModeInfo(totalCleaned);
        }

        function extractLoggerInfo() {
            loggerCounts.clear();

            ['file1', 'file2'].forEach(fileKey => {
                if (!logData[fileKey].content) return;

                logData[fileKey].lines.forEach(line => {
                    // Extract logger names using common patterns
                    const loggerPatterns = [
                        /\[([a-zA-Z0-9\._]+)\]/,  // [com.example.Service]
                        /\s([a-z]+\.[a-z]+\.[A-Z][a-zA-Z0-9]*)/,  // package.Class
                        /-\s([A-Z][a-zA-Z0-9]*(?:Controller|Service|Repository|Handler|Manager|Processor))/,  // ServiceName
                    ];

                    for (const pattern of loggerPatterns) {
                        const match = line.match(pattern);
                        if (match && match[1] && match[1].length > 3) {
                            const logger = match[1];
                            loggerCounts.set(logger, (loggerCounts.get(logger) || 0) + 1);
                            break;
                        }
                    }
                });
            });
        }

        function toggleLoggerPanel() {
            const panel = document.getElementById('loggerPanel');

            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                renderLoggerList();
            } else {
                panel.style.display = 'none';
            }
        }

        function renderLoggerList() {
            const list = document.getElementById('loggerList');

            if (loggerCounts.size === 0 && hiddenLoggers.size === 0) {
                list.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 20px;">No loggers found in the logs</p>';
                return;
            }

            // Combine loggerCounts and hiddenLoggers (for manually added ones)
            const allLoggers = new Map(loggerCounts);
            hiddenLoggers.forEach(logger => {
                if (!allLoggers.has(logger)) {
                    allLoggers.set(logger, 0); // 0 count for manually added
                }
            });

            // Sort loggers by count (descending), then alphabetically
            const sortedLoggers = Array.from(allLoggers.entries())
                .sort((a, b) => {
                    if (b[1] !== a[1]) return b[1] - a[1];
                    return a[0].localeCompare(b[0]);
                });

            let html = '';
            sortedLoggers.forEach(([logger, count]) => {
                const isHidden = hiddenLoggers.has(logger);
                const itemClass = isHidden ? 'logger-item hidden' : 'logger-item';
                const btnText = isHidden ? 'Show' : 'Hide';

                const countDisplay = count === 0 ? '<span style="color: #ff9800; font-size: 10px;">manual</span>' : `<span class="logger-count">${count}</span>`;

                html += `
                    <div class="${itemClass}" id="logger-item-${encodeURIComponent(logger)}">
                        <span class="logger-item-name" title="${logger}">${logger}</span>
                        ${countDisplay}
                        <button class="logger-toggle" onclick="toggleLogger('${logger.replace(/'/g, "\\'").replace(/"/g, '&quot;')}')">
                            ${btnText}
                        </button>
                    </div>
                `;
            });

            list.innerHTML = html;
        }

        function toggleLogger(logger) {
            if (hiddenLoggers.has(logger)) {
                hiddenLoggers.delete(logger);
            } else {
                hiddenLoggers.add(logger);
            }

            renderLoggerList();
            applyLoggerFiltering();
        }

        function showAllLoggers() {
            const previousCount = hiddenLoggers.size;
            hiddenLoggers.clear();
            renderLoggerList();
            applyLoggerFiltering();

            if (previousCount > 0) {
                showNotification(`✅ Showing all loggers (${previousCount} were hidden)`);
            } else {
                showNotification('ℹ️ All loggers are already visible');
            }
        }

        function hideAllLoggers() {
            let addedCount = 0;
            loggerCounts.forEach((count, logger) => {
                if (!hiddenLoggers.has(logger)) {
                    addedCount++;
                }
                hiddenLoggers.add(logger);
            });
            renderLoggerList();
            applyLoggerFiltering();

            if (addedCount > 0) {
                showNotification(`🚫 Hidden all ${hiddenLoggers.size} logger(s)`);
            } else {
                showNotification('ℹ️ All loggers are already hidden');
            }
        }

        function applyPreset(presetName) {
            const patterns = loggerPresets[presetName];
            if (!patterns) return;

            let hiddenCount = 0;

            // Hide all loggers matching the preset patterns
            loggerCounts.forEach((count, logger) => {
                for (const pattern of patterns) {
                    if (logger.includes(pattern)) {
                        hiddenLoggers.add(logger);
                        hiddenCount++;
                        break;
                    }
                }
            });

            renderLoggerList();
            applyLoggerFiltering();

            // Show notification
            if (hiddenCount > 0) {
                showNotification(`🎯 Hidden ${hiddenCount} ${presetName} logger(s)`);
            } else {
                showNotification(`No ${presetName} loggers found`);
            }
        }

        function savePreferences() {
            try {
                const prefs = {
                    hiddenLoggers: Array.from(hiddenLoggers),
                    savedAt: new Date().toISOString()
                };

                localStorage.setItem('logViewerPreferences', JSON.stringify(prefs));
                showNotification('💾 Preferences saved! (' + hiddenLoggers.size + ' hidden loggers)');
            } catch (e) {
                alert('Failed to save preferences: ' + e.message);
            }
        }

        function loadPreferences() {
            try {
                const saved = localStorage.getItem('logViewerPreferences');
                if (!saved) {
                    showNotification('No saved preferences found');
                    return;
                }

                const prefs = JSON.parse(saved);
                hiddenLoggers = new Set(prefs.hiddenLoggers);

                renderLoggerList();
                applyLoggerFiltering();

                const savedDate = new Date(prefs.savedAt).toLocaleString();
                showNotification(`📂 Loaded preferences from ${savedDate} (${hiddenLoggers.size} hidden loggers)`);
            } catch (e) {
                alert('Failed to load preferences: ' + e.message);
            }
        }

        function addManualLogger() {
            const input = document.getElementById('manualLoggerInput');
            const pattern = input.value.trim();

            if (!pattern) {
                showNotification('⚠️ Please enter a logger pattern');
                return;
            }

            // Add to hidden loggers
            hiddenLoggers.add(pattern);

            // Also add to logger counts so it shows in the list
            if (!loggerCounts.has(pattern)) {
                loggerCounts.set(pattern, 0);
            }

            // Clear input
            input.value = '';

            // Update UI
            renderLoggerList();
            applyLoggerFiltering();

            showNotification(`✅ Added "${pattern}" to hidden loggers`);
        }

        function showNotification(message) {
            // Create or reuse notification element
            let notification = document.getElementById('loggerNotification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'loggerNotification';
                notification.style.cssText = `
                    position: fixed;
                    top: 80px;
                    right: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 12px 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
                    z-index: 10001;
                    font-size: 14px;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                `;
                document.body.appendChild(notification);
            }

            notification.textContent = message;
            notification.style.opacity = '1';

            setTimeout(() => {
                notification.style.opacity = '0';
            }, 3000);
        }

        function applyLoggerFiltering() {
            if (hiddenLoggers.size === 0) {
                // Show all lines
                document.querySelectorAll('.log-line').forEach(lineDiv => {
                    lineDiv.classList.remove('logger-hidden');
                });
                hideLoggerFilterInfo();
                return;
            }

            let hiddenCount = 0;

            // Hide lines matching hidden loggers
            document.querySelectorAll('.log-line').forEach(lineDiv => {
                // Get the original line text
                const fileKey = lineDiv.getAttribute('data-file');
                const lineIndex = lineDiv.getAttribute('data-line-index');
                let line = lineDiv.getAttribute('data-original-line');

                // Fallback to stored data if attributes are missing
                if (!line && fileKey && lineIndex !== null) {
                    line = logData[fileKey].lines[lineIndex];
                }

                // Final fallback to textContent
                if (!line) {
                    line = lineDiv.textContent;
                }

                let shouldHide = false;

                // Check if line contains any hidden logger pattern
                hiddenLoggers.forEach(logger => {
                    if (line.toLowerCase().includes(logger.toLowerCase())) {
                        shouldHide = true;
                    }
                });

                if (shouldHide) {
                    lineDiv.classList.add('logger-hidden');
                    hiddenCount++;
                } else {
                    lineDiv.classList.remove('logger-hidden');
                }
            });

            // Show info if loggers are hidden
            if (hiddenCount > 0) {
                showLoggerFilterInfo(hiddenCount);
            } else {
                hideLoggerFilterInfo();
            }
        }

        function showLoggerFilterInfo(count) {
            // Remove existing info if any
            const existing = document.querySelector('.logger-filter-info');
            if (existing) existing.remove();

            document.querySelectorAll('.log-content').forEach(content => {
                const info = document.createElement('div');
                info.className = 'logger-filter-info';
                info.innerHTML = `
                    <span style="font-size: 20px;">🎯</span>
                    <span><strong>Logger Filter Active:</strong> Hiding ${count} lines from ${hiddenLoggers.size} logger(s)</span>
                    <button onclick="toggleLoggerPanel()" style="margin-left: auto; padding: 4px 12px; background: white; border: 2px solid #667eea; border-radius: 4px; cursor: pointer; color: #667eea; font-weight: 600;">⚙️ Manage</button>
                `;
                content.insertBefore(info, content.firstChild);
            });
        }

        function hideLoggerFilterInfo() {
            document.querySelectorAll('.logger-filter-info').forEach(info => info.remove());
        }

        function removeCleanMode() {
            document.querySelectorAll('.log-line').forEach(lineDiv => {
                lineDiv.classList.remove('cleaned');
            });
            hideCleanModeInfo();
        }

        function showCleanModeInfo(count) {
            // Remove existing info if any
            const existing = document.querySelector('.clean-mode-info');
            if (existing) existing.remove();

            document.querySelectorAll('.log-content').forEach(content => {
                const info = document.createElement('div');
                info.className = 'clean-mode-info';
                info.innerHTML = `
                    <span style="font-size: 20px;">🧽</span>
                    <span><strong>Clean Mode Active:</strong> Hiding ${count} noise lines (debug, trace, health checks, empty lines, stack trace details)</span>
                `;
                content.insertBefore(info, content.firstChild);
            });
        }

        function hideCleanModeInfo() {
            document.querySelectorAll('.clean-mode-info').forEach(info => info.remove());
        }

        function toggleStackTraceFormat() {
            stackTraceFormatEnabled = !stackTraceFormatEnabled;
            const btn = document.getElementById('stackTraceBtn');

            if (stackTraceFormatEnabled) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }

            // Re-render logs with or without stack trace formatting
            renderLogs();
        }

        function switchView(viewType) {
            currentView = viewType;
            const container = document.getElementById('logsContainer');
            const buttons = document.querySelectorAll('.view-btn');

            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');

            if (viewType === 'side-by-side') {
                container.classList.add('side-by-side');
            } else {
                container.classList.remove('side-by-side');
            }
        }

        function switchTab(tabName) {
            currentTab = tabName;
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');

            tabs.forEach(tab => tab.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            event.target.classList.add('active');
            document.getElementById(`${tabName}Tab`).classList.add('active');

            if (tabName === 'flow') {
                renderFlowAnalysis();
            } else if (tabName === 'trace') {
                renderTraceDiagram();
            } else if (tabName === 'sql') {
                // SQL tab - extraction triggered manually
                if (sqlQueries.length === 0 && (logData.file1.content || logData.file2.content)) {
                    // Auto-extract on first visit if logs are loaded
                    extractSQLQueries();
                }
            } else if (tabName === 'json') {
                // JSON tab - auto-extract on first visit
                if (jsonLogs.length === 0 && (logData.file1.content || logData.file2.content)) {
                    extractJSONLogs();
                }
            } else if (tabName === 'debug') {
                // Debug tab - analysis triggered manually
            }
        }

        function extractFlowSteps(lines) {
            const steps = [];
            const timestampRegex = /\d{4}-\d{2}-\d{2}|\d{2}:\d{2}:\d{2}|\d{13}|\[\d+\]/;

            lines.forEach((line, index) => {
                const trimmedLine = line.trim();
                if (!trimmedLine) return;

                const lowerLine = trimmedLine.toLowerCase();
                let type = 'info';

                if (successKeywords.some(keyword => lowerLine.includes(keyword))) {
                    type = 'success';
                } else if (failureKeywords.some(keyword => lowerLine.includes(keyword))) {
                    type = 'failure';
                } else if (issueKeywords.some(keyword => lowerLine.includes(keyword))) {
                    type = 'warning';
                }

                // Extract timestamp if present
                const timestampMatch = line.match(timestampRegex);
                const timestamp = timestampMatch ? timestampMatch[0] : null;

                steps.push({
                    lineNumber: index + 1,
                    content: trimmedLine.substring(0, 100), // Limit to 100 chars
                    type: type,
                    timestamp: timestamp
                });
            });

            return steps;
        }

        function performFlowSearch() {
            const searchTerm = document.getElementById('flowSearchBox').value.toLowerCase();
            let matchCount = 0;

            document.querySelectorAll('.flow-step').forEach(stepDiv => {
                const contentSpan = stepDiv.querySelector('.flow-step-content');
                if (!contentSpan) return;

                const fileKey = stepDiv.getAttribute('data-file');
                const stepIndex = stepDiv.getAttribute('data-step-index');
                if (!fileKey || !stepIndex) return;

                const originalContent = logData[fileKey].flowSteps[stepIndex].content;

                if (searchTerm && originalContent.toLowerCase().includes(searchTerm)) {
                    stepDiv.classList.remove('hidden');
                    const regex = new RegExp(`(${escapeRegex(searchTerm)})`, 'gi');
                    contentSpan.innerHTML = originalContent.replace(regex, '<mark>$1</mark>');
                    matchCount++;
                } else if (searchTerm) {
                    stepDiv.classList.add('hidden');
                } else {
                    stepDiv.classList.remove('hidden');
                    contentSpan.textContent = originalContent;
                }
            });
        }

        function renderFlowAnalysis() {
            const container = document.getElementById('flowContainer');
            container.innerHTML = '';

            if (!logData.file1.content && !logData.file2.content) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <h3>No Flow Data Available</h3>
                        <p>Upload log files to see the flow analysis</p>
                    </div>
                `;
                return;
            }

            ['file1', 'file2'].forEach(fileKey => {
                if (logData[fileKey].content) {
                    const panel = document.createElement('div');
                    panel.className = 'flow-panel';

                    const header = document.createElement('div');
                    header.className = 'flow-header';
                    header.innerHTML = `
                        <span>📄 ${logData[fileKey].name}</span>
                        <span class="line-count-badge">${logData[fileKey].flowSteps.length} steps</span>
                    `;

                    const content = document.createElement('div');
                    content.className = 'flow-content';

                    // Render flow steps
                    logData[fileKey].flowSteps.forEach((step, index) => {
                        const stepDiv = document.createElement('div');
                        stepDiv.className = `flow-step ${step.type}`;
                        stepDiv.setAttribute('data-file', fileKey);
                        stepDiv.setAttribute('data-step-index', index);
                        stepDiv.onclick = () => scrollToLogLine(fileKey, step.lineNumber);

                        let statusIcon = '📋';
                        if (step.type === 'success') statusIcon = '✅';
                        else if (step.type === 'failure') statusIcon = '❌';
                        else if (step.type === 'warning') statusIcon = '⚠️';

                        stepDiv.innerHTML = `
                            <div>
                                ${statusIcon} <span class="flow-step-number">${step.lineNumber}</span>
                                <span class="flow-step-content">${step.content}</span>
                            </div>
                            ${step.timestamp ? `<div class="flow-step-time">⏱️ ${step.timestamp}</div>` : ''}
                        `;

                        content.appendChild(stepDiv);
                    });

                    panel.appendChild(header);
                    panel.appendChild(content);
                    container.appendChild(panel);
                }
            });

            // Apply current search if exists
            performFlowSearch();
        }

        function scrollToLogLine(fileKey, lineNumber) {
            // Switch to standard tab
            currentTab = 'standard';
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');

            tabs.forEach(tab => tab.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            tabs[0].classList.add('active');
            document.getElementById('standardTab').classList.add('active');

            // Scroll to the line
            setTimeout(() => {
                const lineDiv = document.querySelector(`[data-file="${fileKey}"][data-line-index="${lineNumber - 1}"]`);
                if (lineDiv) {
                    lineDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    lineDiv.style.backgroundColor = '#ffd700';
                    setTimeout(() => {
                        lineDiv.style.backgroundColor = '';
                    }, 2000);
                }
            }, 100);
        }

        function extractTraceData(lines) {
            const traces = [];

            // Enhanced patterns for better matching
            const requestIdPatterns = [
                /request[\s_-]?id[:\s=]+([a-zA-Z0-9\-_]+)/i,
                /correlation[\s_-]?id[:\s=]+([a-zA-Z0-9\-_]+)/i,
                /trace[\s_-]?id[:\s=]+([a-zA-Z0-9\-_]+)/i,
                /transaction[\s_-]?id[:\s=]+([a-zA-Z0-9\-_]+)/i,
                /\[([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})\]/i, // UUID in brackets
                /"id"\s*:\s*"([a-zA-Z0-9\-_]+)"/i, // JSON id field
            ];

            const classPatterns = [
                /\b([A-Z][a-zA-Z0-9]*(?:Controller|Service|Repository|Handler|Manager|Processor|Client|Provider))\b/g,
                /class[\s:]+([A-Z][a-zA-Z0-9]*)/gi,
                /\b([a-z]+\.[a-z]+\.[A-Z][a-zA-Z0-9]*)\b/g, // package.Class
            ];

            const methodPatterns = [
                /\b([a-z][a-zA-Z0-9]*(?:Method)?)\s*\(/g,
                /\.([a-z][a-zA-Z0-9]*)\(/g,
                /method[\s:]+([a-z][a-zA-Z0-9]*)/gi,
                /calling[\s:]+([a-z][a-zA-Z0-9]*)/gi,
                /executing[\s:]+([a-z][a-zA-Z0-9]*)/gi,
            ];

            lines.forEach((line, index) => {
                const trimmedLine = line.trim();
                if (!trimmedLine) return;

                // Extract Request IDs
                for (const pattern of requestIdPatterns) {
                    const match = trimmedLine.match(pattern);
                    if (match && match[1]) {
                        traces.push({
                            type: 'request-id',
                            value: match[1],
                            lineNumber: index + 1,
                            context: trimmedLine.substring(0, 150)
                        });
                        break;
                    }
                }

                // Extract Class Names
                for (const pattern of classPatterns) {
                    let match;
                    const seen = new Set();
                    while ((match = pattern.exec(trimmedLine)) !== null) {
                        if (match[1] && match[1].length > 3 && !seen.has(match[1])) {
                            seen.add(match[1]);
                            traces.push({
                                type: 'class-name',
                                value: match[1],
                                lineNumber: index + 1,
                                context: trimmedLine.substring(0, 150)
                            });
                        }
                    }
                }

                // Extract Method Names
                for (const pattern of methodPatterns) {
                    let match;
                    const seen = new Set();
                    while ((match = pattern.exec(trimmedLine)) !== null) {
                        if (match[1] && match[1].length > 2 && !seen.has(match[1])) {
                            seen.add(match[1]);
                            traces.push({
                                type: 'method-name',
                                value: match[1],
                                lineNumber: index + 1,
                                context: trimmedLine.substring(0, 150)
                            });
                        }
                    }
                }
            });

            return traces;
        }

        function renderTraceDiagram() {
            const container = document.getElementById('traceDiagram');
            container.innerHTML = '';

            if (!logData.file1.content && !logData.file2.content) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                        </svg>
                        <h3>No Trace Data Available</h3>
                        <p>Upload log files to see the trace diagram</p>
                    </div>
                `;
                return;
            }

            ['file1', 'file2'].forEach(fileKey => {
                if (logData[fileKey].content) {
                    const column = document.createElement('div');
                    column.className = 'service-column';

                    const header = document.createElement('div');
                    header.className = 'service-header';
                    header.textContent = `🚀 ${logData[fileKey].name}`;

                    column.appendChild(header);

                    // Group traces by type
                    const groupedTraces = {
                        'request-id': [],
                        'class-name': [],
                        'method-name': []
                    };

                    logData[fileKey].traceData.forEach(trace => {
                        groupedTraces[trace.type].push(trace);
                    });

                    // Render each group
                    Object.entries(groupedTraces).forEach(([type, traces]) => {
                        if (traces.length > 0) {
                            traces.forEach(trace => {
                                const item = document.createElement('div');
                                item.className = `trace-item ${type}`;
                                item.setAttribute('data-file', fileKey);
                                item.setAttribute('data-trace-value', trace.value);
                                item.setAttribute('data-trace-context', trace.context);
                                item.onclick = () => scrollToLogLine(fileKey, trace.lineNumber);

                                let typeLabel = 'REQ';
                                if (type === 'class-name') typeLabel = 'CLS';
                                if (type === 'method-name') typeLabel = 'MTD';

                                item.innerHTML = `
                                    <div>
                                        <span class="trace-type ${type.split('-')[0]}">${typeLabel}</span>
                                        <span class="trace-value">${trace.value}</span>
                                        <span class="trace-line-ref">Line ${trace.lineNumber}</span>
                                    </div>
                                `;

                                column.appendChild(item);
                            });
                        }
                    });

                    container.appendChild(column);
                }
            });

            // Apply current search if exists
            performTraceSearch();
        }

        function performTraceSearch() {
            const searchTerm = document.getElementById('traceSearchBox').value.toLowerCase();

            document.querySelectorAll('.trace-item').forEach(item => {
                const value = item.getAttribute('data-trace-value') || '';
                const context = item.getAttribute('data-trace-context') || '';
                const valueSpan = item.querySelector('.trace-value');

                if (!searchTerm) {
                    item.classList.remove('hidden');
                    if (valueSpan) valueSpan.innerHTML = value;
                } else if (value.toLowerCase().includes(searchTerm) || context.toLowerCase().includes(searchTerm)) {
                    item.classList.remove('hidden');
                    if (valueSpan) {
                        const regex = new RegExp(`(${escapeRegex(searchTerm)})`, 'gi');
                        valueSpan.innerHTML = value.replace(regex, '<mark>$1</mark>');
                    }
                } else {
                    item.classList.add('hidden');
                }
            });
        }

        function runDebugAnalysis() {
            const content = document.getElementById('debugContent');
            const analyzeBtn = document.getElementById('analyzeBtn');

            if (!logData.file1.content && !logData.file2.content) {
                alert('Please upload at least one log file before analyzing.');
                return;
            }

            // Show loading
            analyzeBtn.disabled = true;
            analyzeBtn.textContent = '⚡ Analyzing...';
            content.innerHTML = `
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <p>Analyzing logs with AI-powered algorithms...</p>
                </div>
            `;

            // Simulate AI analysis delay
            setTimeout(() => {
                const analysis = performIntelligentAnalysis();
                renderDebugAnalysis(analysis);
                analyzeBtn.disabled = false;
                analyzeBtn.textContent = '⚡ Re-Analyze Logs';
            }, 1500);
        }

        function performIntelligentAnalysis() {
            const analysis = {
                stats: { errors: 0, warnings: 0, criticalIssues: 0, performanceIssues: 0 },
                rootCauses: [],
                timeline: [],
                recommendations: [],
                correlations: []
            };

            const allErrors = [];
            const allWarnings = [];
            const performancePatterns = [];
            const exceptionMap = new Map();

            // Analyze both files
            ['file1', 'file2'].forEach(fileKey => {
                if (!logData[fileKey].content) return;

                logData[fileKey].lines.forEach((line, index) => {
                    const lowerLine = line.toLowerCase();
                    const lineNumber = index + 1;

                    // Detect errors
                    if (failureKeywords.some(kw => lowerLine.includes(kw)) || lowerLine.includes('error')) {
                        analysis.stats.errors++;
                        allErrors.push({ fileKey, line, lineNumber });

                        // Extract exception type
                        const exceptionMatch = line.match(/([A-Z][a-zA-Z]*Exception|Error)/g);
                        if (exceptionMatch) {
                            const exType = exceptionMatch[0];
                            exceptionMap.set(exType, (exceptionMap.get(exType) || 0) + 1);
                        }
                    }

                    // Detect warnings
                    if (issueKeywords.some(kw => lowerLine.includes(kw))) {
                        analysis.stats.warnings++;
                        allWarnings.push({ fileKey, line, lineNumber });
                    }

                    // Detect performance issues
                    const timeMatch = line.match(/(\d+)\s*(ms|milliseconds|seconds|s)/);
                    if (timeMatch) {
                        const time = parseInt(timeMatch[1]);
                        const unit = timeMatch[2];
                        const timeMs = unit.startsWith('s') ? time * 1000 : time;

                        if (timeMs > 1000) {
                            analysis.stats.performanceIssues++;
                            performancePatterns.push({ fileKey, line, lineNumber, timeMs });
                        }
                    }

                    // Add to timeline
                    if (lowerLine.includes('error') || lowerLine.includes('critical') || lowerLine.includes('fatal')) {
                        const timestampMatch = line.match(/\d{2}:\d{2}:\d{2}/);
                        analysis.timeline.push({
                            type: 'error',
                            time: timestampMatch ? timestampMatch[0] : `Line ${lineNumber}`,
                            message: line.substring(0, 100),
                            fileKey,
                            lineNumber
                        });
                    } else if (lowerLine.includes('warn')) {
                        const timestampMatch = line.match(/\d{2}:\d{2}:\d{2}/);
                        analysis.timeline.push({
                            type: 'warning',
                            time: timestampMatch ? timestampMatch[0] : `Line ${lineNumber}`,
                            message: line.substring(0, 100),
                            fileKey,
                            lineNumber
                        });
                    }
                });
            });

            // Sort timeline
            analysis.timeline.sort((a, b) => a.lineNumber - b.lineNumber);
            analysis.timeline = analysis.timeline.slice(0, 10); // Top 10

            // Identify root causes
            if (exceptionMap.size > 0) {
                const topException = Array.from(exceptionMap.entries()).sort((a, b) => b[1] - a[1])[0];
                analysis.rootCauses.push({
                    severity: 'critical',
                    title: `Frequent ${topException[0]} Detected`,
                    description: `Found ${topException[1]} occurrences of ${topException[0]}. This is the most common exception in your logs and likely indicates a systemic issue.`,
                    count: topException[1],
                    type: topException[0]
                });
                analysis.stats.criticalIssues++;
            }

            // Performance analysis
            if (performancePatterns.length > 0) {
                const slowest = performancePatterns.sort((a, b) => b.timeMs - a.timeMs)[0];
                analysis.rootCauses.push({
                    severity: 'high',
                    title: 'Performance Bottleneck Detected',
                    description: `Identified operations taking up to ${slowest.timeMs}ms. This could be causing user experience degradation.`,
                    count: performancePatterns.length,
                    maxTime: slowest.timeMs
                });
            }

            // Connection issues
            const connectionErrors = allErrors.filter(e =>
                e.line.toLowerCase().includes('connection') ||
                e.line.toLowerCase().includes('timeout') ||
                e.line.toLowerCase().includes('refused')
            );
            if (connectionErrors.length > 2) {
                analysis.rootCauses.push({
                    severity: 'critical',
                    title: 'Network/Connection Issues',
                    description: `Detected ${connectionErrors.length} connection-related errors. This suggests network instability or service unavailability.`,
                    count: connectionErrors.length
                });
                analysis.stats.criticalIssues++;
            }

            // Generate smart recommendations
            if (exceptionMap.has('NullPointerException') || exceptionMap.has('TypeError')) {
                analysis.recommendations.push({
                    icon: '🛡️',
                    title: 'Add Null Safety Checks',
                    text: 'Implement defensive programming with null checks and optional chaining to prevent null/undefined errors.'
                });
            }

            if (performancePatterns.length > 3) {
                analysis.recommendations.push({
                    icon: '⚡',
                    title: 'Optimize Slow Operations',
                    text: 'Add caching, use async operations, or optimize database queries to reduce response times.'
                });
            }

            if (connectionErrors.length > 0) {
                analysis.recommendations.push({
                    icon: '🔄',
                    title: 'Implement Retry Logic',
                    text: 'Add exponential backoff retry mechanism for network operations to handle transient failures.'
                });
            }

            if (analysis.stats.errors > 10) {
                analysis.recommendations.push({
                    icon: '📊',
                    title: 'Enhance Error Monitoring',
                    text: 'Integrate application monitoring tools (Sentry, DataDog) for better visibility and alerting.'
                });
            }

            analysis.recommendations.push({
                icon: '🔍',
                title: 'Add Structured Logging',
                text: 'Use structured JSON logging with correlation IDs for better traceability across services.'
            });

            // Cross-service correlations
            if (logData.file1.content && logData.file2.content) {
                // Find common request IDs
                const file1ReqIds = new Set(logData.file1.traceData.filter(t => t.type === 'request-id').map(t => t.value));
                const file2ReqIds = new Set(logData.file2.traceData.filter(t => t.type === 'request-id').map(t => t.value));

                const commonReqIds = [...file1ReqIds].filter(id => file2ReqIds.has(id));

                if (commonReqIds.length > 0) {
                    analysis.correlations.push({
                        title: 'Shared Request IDs',
                        items: commonReqIds.slice(0, 5).map(id => ({ value: id, files: ['file1', 'file2'] }))
                    });
                }

                // Find common error patterns
                const file1Errors = allErrors.filter(e => e.fileKey === 'file1');
                const file2Errors = allErrors.filter(e => e.fileKey === 'file2');

                if (file1Errors.length > 0 && file2Errors.length > 0) {
                    analysis.correlations.push({
                        title: 'Related Errors Across Services',
                        items: [
                            { value: `${file1Errors.length} errors in ${logData.file1.name}`, files: ['file1'] },
                            { value: `${file2Errors.length} errors in ${logData.file2.name}`, files: ['file2'] }
                        ]
                    });
                }
            }

            return analysis;
        }

        function renderDebugAnalysis(analysis) {
            const content = document.getElementById('debugContent');

            let html = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value error">${analysis.stats.errors}</div>
                        <div class="stat-label">Total Errors</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value warning">${analysis.stats.warnings}</div>
                        <div class="stat-label">Warnings</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value error">${analysis.stats.criticalIssues}</div>
                        <div class="stat-label">Critical Issues</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value warning">${analysis.stats.performanceIssues}</div>
                        <div class="stat-label">Performance Issues</div>
                    </div>
                </div>
            `;

            // Root Cause Analysis
            if (analysis.rootCauses.length > 0) {
                html += `
                    <div class="debug-section">
                        <div class="debug-section-title">
                            <span class="icon">🎯</span>
                            <span>Root Cause Analysis</span>
                        </div>
                `;

                analysis.rootCauses.forEach(cause => {
                    html += `
                        <div class="insight-card ${cause.severity}">
                            <div class="insight-title">
                                <span class="insight-severity ${cause.severity}">${cause.severity}</span>
                                <span>${cause.title}</span>
                            </div>
                            <div class="insight-description">${cause.description}</div>
                            <div class="insight-details">
                                <div class="insight-metric">
                                    <span>Occurrences:</span>
                                    <strong>${cause.count}</strong>
                                </div>
                                ${cause.maxTime ? `<div class="insight-metric"><span>Max Duration:</span><strong>${cause.maxTime}ms</strong></div>` : ''}
                            </div>
                        </div>
                    `;
                });

                html += `</div>`;
            }

            // Error Timeline
            if (analysis.timeline.length > 0) {
                html += `
                    <div class="debug-section">
                        <div class="debug-section-title">
                            <span class="icon">⏱️</span>
                            <span>Error Timeline</span>
                        </div>
                        <div class="timeline">
                `;

                analysis.timeline.forEach(event => {
                    html += `
                        <div class="timeline-item">
                            <div class="timeline-marker ${event.type}">
                                ${event.type === 'error' ? '❌' : '⚠️'}
                            </div>
                            <div class="timeline-content" onclick="scrollToLogLine('${event.fileKey}', ${event.lineNumber})">
                                <div class="timeline-time">${event.time}</div>
                                <div class="timeline-message">${event.message}...</div>
                            </div>
                        </div>
                    `;
                });

                html += `</div></div>`;
            }

            // Smart Recommendations
            if (analysis.recommendations.length > 0) {
                html += `
                    <div class="debug-section">
                        <div class="debug-section-title">
                            <span class="icon">💡</span>
                            <span>Smart Recommendations</span>
                        </div>
                        <ul class="recommendation-list">
                `;

                analysis.recommendations.forEach(rec => {
                    html += `
                        <li class="recommendation-item">
                            <div class="recommendation-icon">${rec.icon}</div>
                            <div class="recommendation-content">
                                <div class="recommendation-title">${rec.title}</div>
                                <div class="recommendation-text">${rec.text}</div>
                            </div>
                        </li>
                    `;
                });

                html += `</ul></div>`;
            }

            // Cross-Service Correlations
            if (analysis.correlations.length > 0) {
                html += `
                    <div class="debug-section">
                        <div class="debug-section-title">
                            <span class="icon">🔗</span>
                            <span>Cross-Service Correlations</span>
                        </div>
                        <div class="correlation-grid">
                `;

                analysis.correlations.forEach(corr => {
                    html += `
                        <div class="correlation-card">
                            <div class="correlation-header">${corr.title}</div>
                            <div class="correlation-items">
                    `;

                    corr.items.forEach(item => {
                        html += `
                            <div class="correlation-item">
                                ${item.files.map(f => `<span class="correlation-badge ${f}">${f}</span>`).join('')}
                                <span>${item.value}</span>
                            </div>
                        `;
                    });

                    html += `</div></div>`;
                });

                html += `</div></div>`;
            }

            content.innerHTML = html;
        }

        function setupTextSelection() {
            const logContents = document.querySelectorAll('.log-content, .flow-content, .stack-trace-content');

            logContents.forEach(content => {
                content.addEventListener('mouseup', handleTextSelection);
            });

            // Also handle selection on stack trace containers
            document.addEventListener('mouseup', function(e) {
                if (e.target.closest('.log-content') ||
                    e.target.closest('.flow-content') ||
                    e.target.closest('.stack-trace-content') ||
                    e.target.closest('.timeline-content')) {
                    handleTextSelection(e);
                }
            });
        }

        function handleTextSelection(event) {
            // Clear any existing timeout
            if (selectionTimeout) {
                clearTimeout(selectionTimeout);
            }

            // Small delay to ensure selection is complete
            selectionTimeout = setTimeout(() => {
                const selection = window.getSelection();
                const text = selection.toString().trim();

                if (text.length > 0) {
                    selectedText = text;
                    showSelectionHint();

                    // Show flashbox after a short delay or on click
                    setTimeout(() => {
                        if (window.getSelection().toString().trim() === text) {
                            showFlashbox(text);
                        }
                    }, 300);
                }
            }, 100);
        }

        function showSelectionHint() {
            const hint = document.getElementById('selectionHint');
            hint.classList.add('show');

            setTimeout(() => {
                hint.classList.remove('show');
            }, 2000);
        }

        function showFlashbox(text) {
            const flashbox = document.getElementById('flashbox');
            const overlay = document.getElementById('flashboxOverlay');
            const flashboxText = document.getElementById('flashboxText');
            const flashboxLineInfo = document.getElementById('flashboxLineInfo');

            // Count lines
            const lines = text.split('\n');
            const lineCount = lines.length;
            const charCount = text.length;

            // Update content
            flashboxText.textContent = text;
            flashboxLineInfo.textContent = `${lineCount} line${lineCount !== 1 ? 's' : ''} selected • ${charCount} characters`;

            // Show overlay and flashbox
            overlay.classList.add('show');
            flashbox.classList.add('show');

            // Clear selection
            window.getSelection().removeAllRanges();
        }

        function closeFlashbox() {
            const flashbox = document.getElementById('flashbox');
            const overlay = document.getElementById('flashboxOverlay');

            flashbox.classList.remove('show');
            overlay.classList.remove('show');
        }

        function copyFlashboxContent() {
            const flashboxText = document.getElementById('flashboxText');
            const text = flashboxText.textContent;

            // Copy to clipboard
            navigator.clipboard.writeText(text).then(() => {
                // Show success feedback
                const copyBtn = document.querySelector('.flashbox-btn.copy');
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = '✅ Copied!';
                copyBtn.style.background = '#28a745';

                setTimeout(() => {
                    copyBtn.innerHTML = originalText;
                    copyBtn.style.background = '';
                }, 2000);
            }).catch(err => {
                alert('Failed to copy to clipboard');
            });
        }

        function extractStructuredData() {
            structuredData = [];
            loggerCounts.clear();

            ['file1', 'file2'].forEach(fileKey => {
                if (!logData[fileKey].content) return;

                logData[fileKey].lines.forEach((line, index) => {
                    const entry = parseLogLine(line, index + 1, fileKey);
                    if (entry) {
                        structuredData.push(entry);

                        // Count loggers
                        if (entry.logger) {
                            loggerCounts.set(entry.logger, (loggerCounts.get(entry.logger) || 0) + 1);
                        }
                    }
                });
            });
        }

        function parseLogLine(line, lineNumber, fileKey) {
            if (!line.trim()) return null;

            const entry = {
                lineNumber,
                fileKey,
                fileName: logData[fileKey].name,
                timestamp: null,
                level: null,
                logger: null,
                message: line,
                objectAttributes: []
            };

            // Extract timestamp (various formats)
            const timestampPatterns = [
                /\d{4}-\d{2}-\d{2}[T\s]\d{2}:\d{2}:\d{2}(?:\.\d{3})?/,
                /\d{2}\/\d{2}\/\d{4}\s+\d{2}:\d{2}:\d{2}/,
                /\d{2}-\d{2}-\d{4}\s+\d{2}:\d{2}:\d{2}/,
                /\[\d{2}:\d{2}:\d{2}\]/
            ];

            for (const pattern of timestampPatterns) {
                const match = line.match(pattern);
                if (match) {
                    entry.timestamp = match[0].replace(/[\[\]]/g, '');
                    break;
                }
            }

            // Extract log level
            const levelMatch = line.match(/\b(ERROR|WARN|INFO|DEBUG|TRACE|FATAL|SEVERE)\b/);
            if (levelMatch) {
                entry.level = levelMatch[1];
            }

            // Extract logger name (common patterns)
            const loggerPatterns = [
                /\[([a-zA-Z0-9\._]+)\]/,  // [com.example.Service]
                /\s([a-z]+\.[a-z]+\.[A-Z][a-zA-Z0-9]*)/,  // package.Class
                /-\s([A-Z][a-zA-Z0-9]*(?:Controller|Service|Repository|Handler))/,  // ServiceName
            ];

            for (const pattern of loggerPatterns) {
                const match = line.match(pattern);
                if (match && match[1] && match[1].length > 3) {
                    entry.logger = match[1];
                    break;
                }
            }

            // Extract message (everything after level or timestamp)
            let messageStart = 0;
            if (entry.timestamp) {
                messageStart = line.indexOf(entry.timestamp) + entry.timestamp.length;
            }
            if (entry.level) {
                const levelPos = line.indexOf(entry.level);
                if (levelPos > messageStart) {
                    messageStart = levelPos + entry.level.length;
                }
            }
            entry.message = line.substring(messageStart).trim();
            if (entry.message.startsWith(':') || entry.message.startsWith('-')) {
                entry.message = entry.message.substring(1).trim();
            }

            // Detect Java object attributes
            entry.objectAttributes = extractObjectAttributes(entry.message);

            return entry;
        }

        function extractObjectAttributes(message) {
            const attributes = [];

            // Pattern: key=value or key: value
            const kvPattern = /([a-zA-Z_][a-zA-Z0-9_]*)\s*[=:]\s*([^,\s}\]]+)/g;
            let match;

            while ((match = kvPattern.exec(message)) !== null) {
                attributes.push({
                    key: match[1],
                    value: match[2]
                });
            }

            // Pattern: JSON-like {key: value, key2: value2}
            const jsonMatch = message.match(/\{([^}]+)\}/);
            if (jsonMatch) {
                const content = jsonMatch[1];
                const pairs = content.split(',');
                pairs.forEach(pair => {
                    const kv = pair.split(/[=:]/);
                    if (kv.length === 2) {
                        attributes.push({
                            key: kv[0].trim(),
                            value: kv[1].trim()
                        });
                    }
                });
            }

            return attributes;
        }

        function renderStructuredView() {
            const container = document.getElementById('structuredTableContainer');

            if (structuredData.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        <h3>No Structured Data</h3>
                        <p>Upload log files to see parsed log entries in table format</p>
                    </div>
                `;
                return;
            }

            const levelFilter = document.getElementById('structuredLevelFilter').value;
            const alignByTimestamp = document.getElementById('alignByTimestamp').checked;
            const simplifyLoggers = document.getElementById('simplifyLoggers').checked;

            // Separate data by file
            const file1Data = structuredData.filter(e => e.fileKey === 'file1');
            const file2Data = structuredData.filter(e => e.fileKey === 'file2');

            // Apply level filter and logger hiding
            const filterByLevel = (data) => {
                let filtered = data;
                if (levelFilter !== 'all') {
                    filtered = filtered.filter(entry => entry.level === levelFilter);
                }
                // Filter out hidden loggers
                filtered = filtered.filter(entry => !hiddenLoggers.has(entry.logger));
                return filtered;
            };

            const filteredFile1 = filterByLevel(file1Data);
            const filteredFile2 = filterByLevel(file2Data);

            // Build table
            let html = `
                <table class="structured-table">
                    <thead>
                        <tr>
                            <th rowspan="2" style="width: 50px;">#</th>
                            <th rowspan="2" style="width: 150px;">Timestamp</th>
                            <th rowspan="2" style="width: 80px;">Level</th>
                            <th colspan="2" class="file1-header">📄 ${logData.file1.name || 'File 1'}</th>
                            <th class="divider"></th>
                            <th colspan="2" class="file2-header">📄 ${logData.file2.name || 'File 2'}</th>
                        </tr>
                        <tr>
                            <th class="file1-header" style="width: 200px;">Logger</th>
                            <th class="file1-header">Message</th>
                            <th class="divider"></th>
                            <th class="file2-header" style="width: 200px;">Logger</th>
                            <th class="file2-header">Message</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            if (alignByTimestamp) {
                // Align by timestamp logic
                html += renderAlignedRows(filteredFile1, filteredFile2);
            } else {
                // Simple row-by-row comparison
                const maxRows = Math.max(filteredFile1.length, filteredFile2.length);

                for (let i = 0; i < maxRows; i++) {
                    const entry1 = filteredFile1[i];
                    const entry2 = filteredFile2[i];

                    // Determine row class from whichever entry exists
                    const level = entry1?.level || entry2?.level;
                    const rowClass = level ? level.toLowerCase() : '';
                    const timestamp = entry1?.timestamp || entry2?.timestamp || '-';

                    html += `<tr class="${rowClass}">`;
                    html += `<td class="line-number-cell">${i + 1}</td>`;
                    html += `<td class="timestamp-cell">${timestamp}</td>`;
                    html += `<td>${level ? `<span class="log-level-badge ${level.toLowerCase()}">${level}</span>` : '-'}</td>`;

                    // File 1 columns
                    if (entry1) {
                        html += `<td class="logger-name file1-cell">${formatLoggerName(entry1.logger, simplifyLoggers)}</td>`;
                        html += `<td class="file1-cell">`;
                        html += `<div class="structured-cell-content">`;
                        html += `<div class="log-message">${entry1.message}</div>`;
                        if (entry1.objectAttributes.length > 0) {
                            html += renderObjectAttributes(entry1.objectAttributes, i);
                        }
                        html += `<button class="expand-btn" onclick="jumpToLine('file1', ${entry1.lineNumber})" style="margin-top: 8px;">🔍 View Line ${entry1.lineNumber}</button>`;
                        html += `</div></td>`;
                    } else {
                        html += `<td class="file1-cell structured-empty-cell">-</td>`;
                        html += `<td class="file1-cell structured-empty-cell">No entry</td>`;
                    }

                    // Divider
                    html += `<td class="divider"></td>`;

                    // File 2 columns
                    if (entry2) {
                        html += `<td class="logger-name file2-cell">${formatLoggerName(entry2.logger, simplifyLoggers)}</td>`;
                        html += `<td class="file2-cell">`;
                        html += `<div class="structured-cell-content">`;
                        html += `<div class="log-message">${entry2.message}</div>`;
                        if (entry2.objectAttributes.length > 0) {
                            html += renderObjectAttributes(entry2.objectAttributes, i);
                        }
                        html += `<button class="expand-btn" onclick="jumpToLine('file2', ${entry2.lineNumber})" style="margin-top: 8px;">🔍 View Line ${entry2.lineNumber}</button>`;
                        html += `</div></td>`;
                    } else {
                        html += `<td class="file2-cell structured-empty-cell">-</td>`;
                        html += `<td class="file2-cell structured-empty-cell">No entry</td>`;
                    }

                    html += `</tr>`;
                }
            }

            html += `</tbody></table>`;
            container.innerHTML = html;
        }

        function renderAlignedRows(file1Data, file2Data) {
            let html = '';
            let i1 = 0, i2 = 0;
            let rowNum = 1;

            while (i1 < file1Data.length || i2 < file2Data.length) {
                const entry1 = file1Data[i1];
                const entry2 = file2Data[i2];

                let useEntry1 = false, useEntry2 = false;

                if (!entry1) {
                    useEntry2 = true;
                    i2++;
                } else if (!entry2) {
                    useEntry1 = true;
                    i1++;
                } else {
                    // Both exist - compare timestamps
                    const t1 = entry1.timestamp;
                    const t2 = entry2.timestamp;

                    if (!t1 && !t2) {
                        useEntry1 = useEntry2 = true;
                        i1++; i2++;
                    } else if (!t1) {
                        useEntry1 = true;
                        i1++;
                    } else if (!t2) {
                        useEntry2 = true;
                        i2++;
                    } else if (t1 === t2) {
                        useEntry1 = useEntry2 = true;
                        i1++; i2++;
                    } else if (t1 < t2) {
                        useEntry1 = true;
                        i1++;
                    } else {
                        useEntry2 = true;
                        i2++;
                    }
                }

                const e1 = useEntry1 ? entry1 : null;
                const e2 = useEntry2 ? entry2 : null;
                const level = e1?.level || e2?.level;
                const rowClass = level ? level.toLowerCase() : '';
                const timestamp = e1?.timestamp || e2?.timestamp || '-';

                html += `<tr class="${rowClass}">`;
                html += `<td class="line-number-cell">${rowNum++}</td>`;
                html += `<td class="timestamp-cell">${timestamp}</td>`;
                html += `<td>${level ? `<span class="log-level-badge ${level.toLowerCase()}">${level}</span>` : '-'}</td>`;

                // File 1
                if (e1) {
                    html += `<td class="logger-name file1-cell">${formatLoggerName(e1.logger, simplifyLoggers)}</td>`;
                    html += `<td class="file1-cell">`;
                    html += `<div class="structured-cell-content">`;
                    html += `<div class="log-message">${e1.message}</div>`;
                    if (e1.objectAttributes.length > 0) {
                        html += renderObjectAttributes(e1.objectAttributes, rowNum);
                    }
                    html += `<button class="expand-btn" onclick="jumpToLine('file1', ${e1.lineNumber})" style="margin-top: 8px;">🔍 View Line ${e1.lineNumber}</button>`;
                    html += `</div></td>`;
                } else {
                    html += `<td class="file1-cell structured-empty-cell">-</td>`;
                    html += `<td class="file1-cell structured-empty-cell">No entry</td>`;
                }

                html += `<td class="divider"></td>`;

                // File 2
                if (e2) {
                    html += `<td class="logger-name file2-cell">${formatLoggerName(e2.logger, simplifyLoggers)}</td>`;
                    html += `<td class="file2-cell">`;
                    html += `<div class="structured-cell-content">`;
                    html += `<div class="log-message">${e2.message}</div>`;
                    if (e2.objectAttributes.length > 0) {
                        html += renderObjectAttributes(e2.objectAttributes, rowNum);
                    }
                    html += `<button class="expand-btn" onclick="jumpToLine('file2', ${e2.lineNumber})" style="margin-top: 8px;">🔍 View Line ${e2.lineNumber}</button>`;
                    html += `</div></td>`;
                } else {
                    html += `<td class="file2-cell structured-empty-cell">-</td>`;
                    html += `<td class="file2-cell structured-empty-cell">No entry</td>`;
                }

                html += `</tr>`;
            }

            return html;
        }

        function formatLoggerName(logger, simplify) {
            if (!logger) return '-';

            if (!simplify) return logger;

            // Simplify package names
            // com.example.service.UserService -> UserService
            // org.springframework.web.Controller -> Controller
            const parts = logger.split('.');
            const simplified = parts[parts.length - 1];

            return `<span class="simplified-logger" title="${logger}">${simplified}</span>`;
        }

        function toggleLoggerPanel() {
            const panel = document.getElementById('loggerPanel');
            const list = document.getElementById('loggerList');

            if (panel.style.display === 'none') {
                panel.style.display = 'block';
                renderLoggerList();
            } else {
                panel.style.display = 'none';
            }
        }

        function renderLoggerList() {
            const list = document.getElementById('loggerList');

            if (loggerCounts.size === 0) {
                list.innerHTML = '<p style="text-align: center; color: #6c757d;">No loggers found</p>';
                return;
            }

            // Sort loggers by count (descending)
            const sortedLoggers = Array.from(loggerCounts.entries())
                .sort((a, b) => b[1] - a[1]);

            let html = '';
            sortedLoggers.forEach(([logger, count]) => {
                const isHidden = hiddenLoggers.has(logger);
                const itemClass = isHidden ? 'logger-item hidden' : 'logger-item';
                const btnText = isHidden ? 'Show' : 'Hide';

                html += `
                    <div class="${itemClass}" id="logger-${encodeURIComponent(logger)}">
                        <span class="logger-item-name" title="${logger}">${logger}</span>
                        <span class="logger-count">${count}</span>
                        <button class="logger-toggle" onclick="toggleLogger('${logger.replace(/'/g, "\\'")}')">\n                            ${btnText}
                        </button>
                    </div>
                `;
            });

            list.innerHTML = html;
        }

        function toggleLogger(logger) {
            if (hiddenLoggers.has(logger)) {
                hiddenLoggers.delete(logger);
            } else {
                hiddenLoggers.add(logger);
            }

            renderLoggerList();
            renderStructuredView();
        }

        function showAllLoggers() {
            hiddenLoggers.clear();
            renderLoggerList();
            renderStructuredView();
        }

        function hideAllLoggers() {
            loggerCounts.forEach((count, logger) => {
                hiddenLoggers.add(logger);
            });
            renderLoggerList();
            renderStructuredView();
        }

        function renderObjectAttributes(attributes, index) {
            if (attributes.length === 0) return '';

            let html = '<div class="object-attributes">';
            html += '<strong style="color: #4ade80;">📦 Object Attributes:</strong><br>';

            attributes.forEach(attr => {
                html += `
                    <div class="object-attribute">
                        <span class="attribute-key">${attr.key}</span>:
                        <span class="attribute-value">${attr.value}</span>
                    </div>
                `;
            });

            html += '</div>';
            return html;
        }

        function jumpToLine(fileKey, lineNumber) {
            currentTab = 'standard';
            switchTab('standard');
            setTimeout(() => scrollToLogLine(fileKey, lineNumber), 100);
        }

        function exportStructuredData() {
            if (structuredData.length === 0) {
                alert('No data to export');
                return;
            }

            // Create CSV content
            let csv = 'Line,File,Timestamp,Level,Logger,Message';

            // Add attribute columns dynamically
            const allAttributes = new Set();
            structuredData.forEach(entry => {
                entry.objectAttributes.forEach(attr => allAttributes.add(attr.key));
            });
            allAttributes.forEach(attr => {
                csv += `,${attr}`;
            });
            csv += '\n';

            // Add data rows
            structuredData.forEach(entry => {
                const row = [
                    entry.lineNumber,
                    entry.fileName,
                    entry.timestamp || '',
                    entry.level || '',
                    entry.logger || '',
                    `"${entry.message.replace(/"/g, '""')}"` // Escape quotes
                ];

                // Add attribute values
                allAttributes.forEach(attrKey => {
                    const attr = entry.objectAttributes.find(a => a.key === attrKey);
                    row.push(attr ? attr.value : '');
                });

                csv += row.join(',') + '\n';
            });

            // Download CSV
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `log_export_${Date.now()}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);
        }

        let sqlQueries = [];
        let sqlViewMode = 'combined'; // 'combined', 'separate', 'side-by-side'

        let jsonLogs = [];
        let jsonViewMode = 'combined'; // 'combined', 'side-by-side'
        let jsonSortOrder = 'desc'; // 'asc' or 'desc'

        function extractSQLQueries() {
            sqlQueries = [];

            ['file1', 'file2'].forEach(fileKey => {
                if (!logData[fileKey].content) return;

                const fileName = logData[fileKey].name;

                logData[fileKey].lines.forEach((line, lineNumber) => {
                    // Extract logger name
                    let logger = '';
                    const loggerPatterns = [
                        /\[([a-zA-Z0-9\._]+)\]/,  // [com.example.Service]
                        /\s([a-z]+\.[a-z]+\.[A-Z][a-zA-Z0-9]*)/,  // package.Class
                        /-\s([A-Z][a-zA-Z0-9]*(?:Controller|Service|Repository|DAO|Mapper))/,  // ServiceName
                    ];

                    for (const pattern of loggerPatterns) {
                        const match = line.match(pattern);
                        if (match && match[1]) {
                            logger = match[1];
                            break;
                        }
                    }

                    // SQL query patterns to detect
                    const sqlPatterns = [
                        // Hibernate/JPA style
                        /(?:Hibernate|JPA|SQL).*?(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP)\s+[\s\S]*?(?:FROM|INTO|TABLE|VALUES)[\s\S]*?(?:;|$)/gi,
                        // Plain SQL statements
                        /(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP)\s+[\s\S]*?(?:FROM|INTO|TABLE|VALUES)[\s\S]*?(?:;|WHERE|GROUP|ORDER|LIMIT|$)/gi,
                        // Prepared statements
                        /(?:PreparedStatement|Statement).*?(SELECT|INSERT|UPDATE|DELETE)[\s\S]*?(?:;|$)/gi,
                        // SQL in quotes or strings
                        /["']\s*(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP)\s+[\s\S]*?["']/gi
                    ];

                    sqlPatterns.forEach(pattern => {
                        const matches = line.matchAll(pattern);
                        for (const match of matches) {
                            let query = match[0];

                            // Clean up the query
                            query = query
                                .replace(/^[\s\S]*?(?:Hibernate|JPA|SQL).*?:/i, '') // Remove prefixes
                                .replace(/^["']|["']$/g, '') // Remove quotes
                                .replace(/\\n/g, ' ') // Replace escaped newlines
                                .replace(/\s+/g, ' ') // Normalize whitespace
                                .trim();

                            // Extract parameters
                            const parameters = extractParameters(line, query);

                            // Only keep queries that look valid
                            if (query.length > 15 && /^(SELECT|INSERT|UPDATE|DELETE|CREATE|ALTER|DROP)/i.test(query)) {
                                const queryType = query.match(/^(\w+)/i)[1].toUpperCase();

                                sqlQueries.push({
                                    query: query,
                                    type: queryType,
                                    file: fileName,
                                    fileKey: fileKey,
                                    lineNumber: lineNumber + 1,
                                    originalLine: line,
                                    logger: logger || 'Unknown',
                                    parameters: parameters
                                });
                            }
                        }
                    });
                });
            });

            // Don't remove duplicates - keep all instances to show parameter variations

            renderSQLQueries();

            if (sqlQueries.length > 0) {
                showNotification(`✅ Found ${sqlQueries.length} SQL queries`);
            } else {
                showNotification('⚠️ No SQL queries found in logs');
            }
        }

        function extractParameters(line, query) {
            const parameters = [];

            // Look for parameter patterns after the query
            const paramPatterns = [
                // binding parameter [1] as [VARCHAR] - [value]
                /binding parameter \[(\d+)\] as \[([^\]]+)\] - \[([^\]]+)\]/gi,
                // Parameters: [value1, value2, value3]
                /Parameters?:\s*\[([^\]]+)\]/gi,
                // param1=value1, param2=value2
                /(\w+)\s*=\s*(['"]?)([^,\s'"]+)\2/g,
                // ? = value (for prepared statements)
                /\?\s*=\s*(['"]?)([^,\s'"]+)\1/g
            ];

            paramPatterns.forEach(pattern => {
                const matches = line.matchAll(pattern);
                for (const match of matches) {
                    if (match[1] && match[3]) {
                        // Pattern: binding parameter [1] as [VARCHAR] - [value]
                        parameters.push({
                            name: `param${match[1]}`,
                            type: match[2],
                            value: match[3]
                        });
                    } else if (match[1]) {
                        // Pattern: Parameters: [value1, value2, value3]
                        const values = match[1].split(',').map(v => v.trim());
                        values.forEach((val, idx) => {
                            parameters.push({
                                name: `param${idx + 1}`,
                                type: 'unknown',
                                value: val
                            });
                        });
                    }
                }
            });

            return parameters;
        }

        function setSQLViewMode(mode) {
            sqlViewMode = mode;

            // Update active button
            document.querySelectorAll('.sql-view-toggle .view-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            renderSQLQueries();
        }

        function renderSQLQueries() {
            const container = document.getElementById('sqlContent');

            if (sqlQueries.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4" />
                        </svg>
                        <h3>No SQL Queries Found</h3>
                        <p>Upload log files and click "Extract SQL" to view all SQL queries</p>
                    </div>
                `;
                document.getElementById('sqlStats').innerHTML = '<span class="stat-badge">0 queries found</span>';
                return;
            }

            container.innerHTML = '';

            if (sqlViewMode === 'side-by-side') {
                renderSideBySideView(container);
            } else if (sqlViewMode === 'separate') {
                renderSeparateView(container);
            } else {
                renderCombinedView(container);
            }

            document.getElementById('sqlStats').innerHTML = `<span class="stat-badge">${sqlQueries.length} queries found</span>`;
        }

        function renderCombinedView(container) {
            sqlQueries.forEach((sqlData, index) => {
                const card = createSQLCard(sqlData, index);
                container.appendChild(card);
            });
        }

        function renderSeparateView(container) {
            const file1Queries = sqlQueries.filter(q => q.fileKey === 'file1');
            const file2Queries = sqlQueries.filter(q => q.fileKey === 'file2');

            if (file1Queries.length > 0) {
                const section = document.createElement('div');
                section.className = 'sql-file-section';
                section.innerHTML = `<h3 class="sql-file-header">📄 ${file1Queries[0].file} (${file1Queries.length} queries)</h3>`;
                file1Queries.forEach((sqlData, index) => {
                    section.appendChild(createSQLCard(sqlData, index));
                });
                container.appendChild(section);
            }

            if (file2Queries.length > 0) {
                const section = document.createElement('div');
                section.className = 'sql-file-section';
                section.innerHTML = `<h3 class="sql-file-header">📄 ${file2Queries[0].file} (${file2Queries.length} queries)</h3>`;
                file2Queries.forEach((sqlData, index) => {
                    section.appendChild(createSQLCard(sqlData, file1Queries.length + index));
                });
                container.appendChild(section);
            }
        }

        function renderSideBySideView(container) {
            const file1Queries = sqlQueries.filter(q => q.fileKey === 'file1');
            const file2Queries = sqlQueries.filter(q => q.fileKey === 'file2');

            const wrapper = document.createElement('div');
            wrapper.className = 'sql-side-by-side';

            const leftPanel = document.createElement('div');
            leftPanel.className = 'sql-panel';
            leftPanel.innerHTML = `<h3 class="sql-panel-header">📄 ${file1Queries[0]?.file || 'File 1'} (${file1Queries.length} queries)</h3>`;
            file1Queries.forEach((sqlData, index) => {
                leftPanel.appendChild(createSQLCard(sqlData, index));
            });

            const rightPanel = document.createElement('div');
            rightPanel.className = 'sql-panel';
            rightPanel.innerHTML = `<h3 class="sql-panel-header">📄 ${file2Queries[0]?.file || 'File 2'} (${file2Queries.length} queries)</h3>`;
            file2Queries.forEach((sqlData, index) => {
                rightPanel.appendChild(createSQLCard(sqlData, file1Queries.length + index));
            });

            wrapper.appendChild(leftPanel);
            wrapper.appendChild(rightPanel);
            container.appendChild(wrapper);
        }

        function createSQLCard(sqlData, index) {
            const card = document.createElement('div');
            card.className = 'sql-query-card';
            card.setAttribute('data-query-index', index);
            card.setAttribute('data-query', sqlData.query.toLowerCase());
            card.setAttribute('data-file-key', sqlData.fileKey);

            let parametersHtml = '';
            if (sqlData.parameters && sqlData.parameters.length > 0) {
                parametersHtml = '<div class="sql-parameters"><strong>🔹 Parameters:</strong><br>';
                sqlData.parameters.forEach(param => {
                    parametersHtml += `<div class="sql-param-item"><span class="sql-param-name">${param.name}</span>: <span class="sql-param-value">${escapeHtml(param.value)}</span> <span class="sql-param-type">(${param.type})</span></div>`;
                });
                parametersHtml += '</div>';
            }

            card.innerHTML = `
                <div class="sql-query-header">
                    <div>
                        <span class="sql-query-type">${sqlData.type}</span>
                    </div>
                    <div class="sql-query-source">
                        📄 ${sqlData.file} : Line ${sqlData.lineNumber}
                    </div>
                </div>
                <div class="sql-logger-info">
                    <span class="sql-logger-label">🎯 Logger:</span>
                    <span class="sql-logger-name">${sqlData.logger}</span>
                </div>
                <div class="sql-query-body">${escapeHtml(sqlData.query)}</div>
                ${parametersHtml}
                <div class="sql-query-footer">
                    <span>Query #${index + 1}</span>
                    <button class="sql-copy-btn" onclick="copySQLQuery(${index})">📋 Copy Query</button>
                </div>
            `;

            return card;
        }

        function filterSQLQueries() {
            const searchTerm = document.getElementById('sqlSearchBox').value.toLowerCase();
            let visibleCount = 0;

            document.querySelectorAll('.sql-query-card').forEach(card => {
                const query = card.getAttribute('data-query');

                if (!searchTerm || query.includes(searchTerm)) {
                    card.classList.remove('hidden');
                    visibleCount++;
                } else {
                    card.classList.add('hidden');
                }
            });

            if (searchTerm) {
                document.getElementById('sqlStats').innerHTML = `<span class="stat-badge">${visibleCount} of ${sqlQueries.length} queries</span>`;
            } else {
                document.getElementById('sqlStats').innerHTML = `<span class="stat-badge">${sqlQueries.length} queries found</span>`;
            }
        }

        function copySQLQuery(index) {
            const query = sqlQueries[index].query;

            navigator.clipboard.writeText(query).then(() => {
                showNotification('✅ SQL query copied to clipboard');
            }).catch(err => {
                console.error('Failed to copy:', err);
                showNotification('❌ Failed to copy query');
            });
        }

        function exportSQLQueries() {
            if (sqlQueries.length === 0) {
                showNotification('⚠️ No SQL queries to export');
                return;
            }

            let content = '-- SQL Queries Extracted from Log Files\n';
            content += `-- Total Queries: ${sqlQueries.length}\n`;
            content += `-- Generated: ${new Date().toISOString()}\n\n`;

            sqlQueries.forEach((sqlData, index) => {
                content += `-- Query #${index + 1}\n`;
                content += `-- Type: ${sqlData.type}\n`;
                content += `-- Source: ${sqlData.file} : Line ${sqlData.lineNumber}\n`;
                content += `${sqlData.query};\n\n`;
            });

            const blob = new Blob([content], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `sql_queries_${Date.now()}.sql`;
            a.click();
            window.URL.revokeObjectURL(url);

            showNotification(`✅ Exported ${sqlQueries.length} SQL queries`);
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function extractJSONLogs() {
            jsonLogs = [];

            ['file1', 'file2'].forEach(fileKey => {
                if (!logData[fileKey].content) return;

                const fileName = logData[fileKey].name;

                logData[fileKey].lines.forEach((line, lineNumber) => {
                    const trimmedLine = line.trim();
                    if (!trimmedLine || !trimmedLine.startsWith('{')) return;

                    try {
                        const jsonObj = JSON.parse(trimmedLine);

                        // Extract timestamp (try common field names)
                        let timestamp = jsonObj.timestamp || jsonObj.time || jsonObj['@timestamp'] ||
                                      jsonObj.date || jsonObj.datetime || jsonObj.ts || '';

                        // Extract logger (try common field names)
                        let logger = jsonObj.logger || jsonObj.logger_name || jsonObj.loggerName ||
                                   jsonObj.class || jsonObj.category || jsonObj.name || 'Unknown';

                        // Extract message (try common field names)
                        let message = jsonObj.message || jsonObj.msg || jsonObj.text ||
                                    jsonObj.log || jsonObj.event || JSON.stringify(jsonObj);

                        // Extract log level (try common field names)
                        let level = jsonObj.level || jsonObj.loglevel || jsonObj.severity ||
                                  jsonObj.priority || '';

                        // Detect level from message or logger if not explicitly provided
                        if (!level) {
                            const combinedText = (message + ' ' + logger).toLowerCase();
                            if (/error|exception|fatal|critical/.test(combinedText)) {
                                level = 'ERROR';
                            } else if (/warn|warning/.test(combinedText)) {
                                level = 'WARN';
                            } else if (/debug/.test(combinedText)) {
                                level = 'DEBUG';
                            } else {
                                level = 'INFO';
                            }
                        } else {
                            level = String(level).toUpperCase();
                        }

                        // Convert timestamp to sortable format if it's a string
                        let sortableTimestamp = timestamp;
                        try {
                            if (timestamp) {
                                const date = new Date(timestamp);
                                if (!isNaN(date.getTime())) {
                                    sortableTimestamp = date.getTime();
                                }
                            }
                        } catch (e) {
                            // Keep original timestamp if conversion fails
                        }

                        jsonLogs.push({
                            timestamp: timestamp,
                            sortableTimestamp: sortableTimestamp,
                            logger: logger,
                            message: message,
                            level: level,
                            file: fileName,
                            fileKey: fileKey,
                            lineNumber: lineNumber + 1,
                            originalLine: line,
                            rawJson: jsonObj
                        });
                    } catch (e) {
                        // Not valid JSON, skip
                    }
                });
            });

            // Sort by timestamp
            sortJSONLogs();

            // Calculate insights
            calculateJSONInsights();

            renderJSONLogs();

            if (jsonLogs.length > 0) {
                showNotification(`✅ Parsed ${jsonLogs.length} JSON log entries`);
            } else {
                showNotification('⚠️ No JSON logs found');
            }
        }

        function calculateJSONInsights() {
            if (jsonLogs.length === 0) {
                document.getElementById('jsonInsightsPanel').style.display = 'none';
                return;
            }

            document.getElementById('jsonInsightsPanel').style.display = 'block';

            // Count by level
            let errorCount = 0, warnCount = 0, infoCount = 0;
            const loggerCounts = {};

            jsonLogs.forEach(log => {
                const level = log.level || 'INFO';
                if (level === 'ERROR') errorCount++;
                else if (level === 'WARN') warnCount++;
                else infoCount++;

                // Count logger occurrences
                const simpleLogger = getSimpleClassName(log.logger);
                loggerCounts[simpleLogger] = (loggerCounts[simpleLogger] || 0) + 1;
            });

            // Find most active logger
            let topLogger = '-';
            let maxCount = 0;
            for (const [logger, count] of Object.entries(loggerCounts)) {
                if (count > maxCount) {
                    maxCount = count;
                    topLogger = logger;
                }
            }

            // Calculate time span
            let timeSpan = '-';
            if (jsonLogs.length > 1) {
                const times = jsonLogs.map(log => log.sortableTimestamp).filter(t => t && t !== 0);
                if (times.length > 1) {
                    const minTime = Math.min(...times);
                    const maxTime = Math.max(...times);
                    const diffMs = maxTime - minTime;

                    if (diffMs < 60000) {
                        timeSpan = Math.round(diffMs / 1000) + 's';
                    } else if (diffMs < 3600000) {
                        timeSpan = Math.round(diffMs / 60000) + 'm';
                    } else {
                        timeSpan = Math.round(diffMs / 3600000) + 'h';
                    }
                }
            }

            // Update UI
            document.getElementById('errorCount').textContent = errorCount;
            document.getElementById('warnCount').textContent = warnCount;
            document.getElementById('infoCount').textContent = infoCount;
            document.getElementById('timeSpan').textContent = timeSpan;
            document.getElementById('topLogger').textContent = topLogger;
        }

        function filterJSONByLevel(level) {
            document.querySelectorAll('.json-table tbody tr').forEach(row => {
                const logIndex = row.getAttribute('data-log-index');
                const log = jsonLogs[logIndex];

                if (!log) return;

                if (level === 'all') {
                    row.classList.remove('hidden');
                } else {
                    const logLevel = (log.level || 'INFO').toLowerCase();
                    if (logLevel === level) {
                        row.classList.remove('hidden');
                    } else {
                        row.classList.add('hidden');
                    }
                }
            });

            // Update stats
            const visibleRows = document.querySelectorAll('.json-table tbody tr:not(.hidden)').length;
            if (level === 'all') {
                document.getElementById('jsonStats').innerHTML = `<span class="stat-badge">${jsonLogs.length} logs found</span>`;
            } else {
                document.getElementById('jsonStats').innerHTML = `<span class="stat-badge">${visibleRows} ${level.toUpperCase()} logs</span>`;
            }
        }

        function sortJSONLogs() {
            jsonSortOrder = document.getElementById('jsonSortOrder').value;

            jsonLogs.sort((a, b) => {
                const aTime = a.sortableTimestamp || 0;
                const bTime = b.sortableTimestamp || 0;

                if (jsonSortOrder === 'asc') {
                    return aTime - bTime;
                } else {
                    return bTime - aTime;
                }
            });

            renderJSONLogs();
        }

        function renderJSONLogs() {
            const container = document.getElementById('jsonContent');

            if (jsonLogs.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <h3>No JSON Logs Found</h3>
                        <p>Upload log files and click "Parse JSON" to view structured logs</p>
                    </div>
                `;
                document.getElementById('jsonStats').innerHTML = '<span class="stat-badge">0 logs found</span>';
                return;
            }

            container.innerHTML = '';
            renderJSONCombined(container);
            document.getElementById('jsonStats').innerHTML = `<span class="stat-badge">${jsonLogs.length} logs found</span>`;
        }

        function getSimpleClassName(fullLogger) {
            // Extract just the class name from package.Class format
            if (!fullLogger) return 'Unknown';

            // Handle package.ClassName format (e.g., com.example.UserService -> UserService)
            const parts = fullLogger.split('.');
            if (parts.length > 1) {
                return parts[parts.length - 1];
            }

            return fullLogger;
        }

        function renderJSONCombined(container) {
            const tableContainer = document.createElement('div');
            tableContainer.className = 'json-table-container';

            let tableHTML = `
                <table class="json-table">
                    <thead>
                        <tr>
                            <th style="width: 50px;">#</th>
                            <th style="width: 80px;">Level</th>
                            <th style="width: 130px;">File</th>
                            <th style="width: 170px;">Timestamp</th>
                            <th style="width: 140px;">Logger</th>
                            <th style="width: auto; min-width: 550px;">Message</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            jsonLogs.forEach((log, index) => {
                const fileBadgeClass = log.fileKey === 'file1' ? 'json-file-badge' : 'json-file-badge file2';
                const simpleLogger = getSimpleClassName(log.logger);
                const level = log.level || 'INFO';
                const levelClass = level.toLowerCase();

                tableHTML += `
                    <tr data-log-index="${index}" data-timestamp="${log.sortableTimestamp}"
                        data-logger="${escapeHtml(log.logger.toLowerCase())}"
                        data-message="${escapeHtml(log.message.toLowerCase())}">
                        <td class="json-line-number">${log.lineNumber}</td>
                        <td><span class="json-level-badge ${levelClass}">${level}</span></td>
                        <td><span class="${fileBadgeClass}" title="${escapeHtml(log.file)}">${escapeHtml(log.file)}</span></td>
                        <td class="json-timestamp">${escapeHtml(String(log.timestamp))}</td>
                        <td class="json-logger" title="Full: ${escapeHtml(log.logger)}">${escapeHtml(simpleLogger)}</td>
                        <td class="json-message">${escapeHtml(log.message)}</td>
                    </tr>
                `;
            });

            tableHTML += '</tbody></table>';
            tableContainer.innerHTML = tableHTML;
            container.appendChild(tableContainer);
        }

        function renderJSONSideBySide(container) {
            const file1Logs = jsonLogs.filter(log => log.fileKey === 'file1');
            const file2Logs = jsonLogs.filter(log => log.fileKey === 'file2');

            const wrapper = document.createElement('div');
            wrapper.className = 'json-side-by-side';

            // Left panel (File 1)
            const leftPanel = document.createElement('div');
            leftPanel.className = 'json-panel';
            leftPanel.innerHTML = `
                <h3 class="json-panel-header">📄 ${file1Logs[0]?.file || 'File 1'} (${file1Logs.length} logs)</h3>
                <div class="json-table-container">
                    <table class="json-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Timestamp</th>
                                <th>Logger</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            file1Logs.forEach((log, index) => {
                leftPanel.innerHTML += `
                    <tr data-log-index="${index}" data-timestamp="${log.sortableTimestamp}"
                        data-logger="${escapeHtml(log.logger.toLowerCase())}"
                        data-message="${escapeHtml(log.message.toLowerCase())}">
                        <td class="json-line-number">${log.lineNumber}</td>
                        <td class="json-timestamp">${escapeHtml(log.timestamp)}</td>
                        <td class="json-logger">${escapeHtml(log.logger)}</td>
                        <td class="json-message">${escapeHtml(log.message)}</td>
                    </tr>
                `;
            });

            leftPanel.innerHTML += '</tbody></table></div>';

            // Right panel (File 2)
            const rightPanel = document.createElement('div');
            rightPanel.className = 'json-panel';
            rightPanel.innerHTML = `
                <h3 class="json-panel-header">📄 ${file2Logs[0]?.file || 'File 2'} (${file2Logs.length} logs)</h3>
                <div class="json-table-container">
                    <table class="json-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Timestamp</th>
                                <th>Logger</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            file2Logs.forEach((log, index) => {
                rightPanel.innerHTML += `
                    <tr data-log-index="${file1Logs.length + index}" data-timestamp="${log.sortableTimestamp}"
                        data-logger="${escapeHtml(log.logger.toLowerCase())}"
                        data-message="${escapeHtml(log.message.toLowerCase())}">
                        <td class="json-line-number">${log.lineNumber}</td>
                        <td class="json-timestamp">${escapeHtml(log.timestamp)}</td>
                        <td class="json-logger">${escapeHtml(log.logger)}</td>
                        <td class="json-message">${escapeHtml(log.message)}</td>
                    </tr>
                `;
            });

            rightPanel.innerHTML += '</tbody></table></div>';

            wrapper.appendChild(leftPanel);
            wrapper.appendChild(rightPanel);
            container.appendChild(wrapper);
        }

        function filterJSONLogs() {
            const searchTerm = document.getElementById('jsonSearchBox').value.toLowerCase();
            let visibleCount = 0;

            document.querySelectorAll('.json-table tbody tr').forEach(row => {
                const logger = row.getAttribute('data-logger') || '';
                const message = row.getAttribute('data-message') || '';

                if (!searchTerm || logger.includes(searchTerm) || message.includes(searchTerm)) {
                    row.classList.remove('hidden');
                    visibleCount++;

                    // Highlight matching text
                    if (searchTerm) {
                        const messageCell = row.querySelector('.json-message');
                        const loggerCell = row.querySelector('.json-logger');
                        const logIndex = row.getAttribute('data-log-index');
                        const originalMessage = jsonLogs[logIndex]?.message || '';
                        const originalLogger = jsonLogs[logIndex]?.logger || '';
                        const simpleLogger = getSimpleClassName(originalLogger);

                        const regex = new RegExp(`(${escapeRegex(searchTerm)})`, 'gi');
                        if (messageCell) messageCell.innerHTML = escapeHtml(originalMessage).replace(regex, '<mark>$1</mark>');
                        if (loggerCell) {
                            loggerCell.innerHTML = escapeHtml(simpleLogger).replace(regex, '<mark>$1</mark>');
                            loggerCell.title = `Full: ${originalLogger}`;
                        }
                    }
                } else {
                    row.classList.add('hidden');
                }
            });

            if (searchTerm) {
                document.getElementById('jsonStats').innerHTML = `<span class="stat-badge">${visibleCount} of ${jsonLogs.length} logs</span>`;
            } else {
                document.getElementById('jsonStats').innerHTML = `<span class="stat-badge">${jsonLogs.length} logs found</span>`;
            }
        }

        function exportJSONLogs() {
            if (jsonLogs.length === 0) {
                showNotification('⚠️ No JSON logs to export');
                return;
            }

            // Create CSV
            let csv = 'Line Number,File,Timestamp,Logger,Message\n';

            jsonLogs.forEach(log => {
                const row = [
                    log.lineNumber,
                    `"${log.file.replace(/"/g, '""')}"`,
                    `"${log.timestamp.replace(/"/g, '""')}"`,
                    `"${log.logger.replace(/"/g, '""')}"`,
                    `"${log.message.replace(/"/g, '""')}"`
                ];
                csv += row.join(',') + '\n';
            });

            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `json_logs_${Date.now()}.csv`;
            a.click();
            window.URL.revokeObjectURL(url);

            showNotification(`✅ Exported ${jsonLogs.length} JSON logs`);
        }

        function exportFilteredResults() {
            // Get all visible log lines
            const visibleLines = [];

            document.querySelectorAll('.log-line').forEach(lineDiv => {
                // Check if line is visible (not hidden by any filter)
                if (!lineDiv.classList.contains('hidden') &&
                    !lineDiv.classList.contains('cleaned') &&
                    !lineDiv.classList.contains('logger-hidden')) {

                    const fileKey = lineDiv.getAttribute('data-file');
                    const lineIndex = lineDiv.getAttribute('data-line-index');
                    const fileName = logData[fileKey]?.name || fileKey;
                    const lineText = lineDiv.getAttribute('data-original-line') || lineDiv.textContent;

                    visibleLines.push(`[${fileName}] ${lineText}`);
                }
            });

            if (visibleLines.length === 0) {
                showNotification('⚠️ No visible lines to export');
                return;
            }

            // Create text file content
            const content = visibleLines.join('\n');

            // Download as text file
            const blob = new Blob([content], { type: 'text/plain' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `filtered_logs_${Date.now()}.txt`;
            a.click();
            window.URL.revokeObjectURL(url);

            showNotification(`✅ Exported ${visibleLines.length} visible lines`);
        }

        // Close flashbox with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeFlashbox();
            }
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Universal Log File Viewer loaded successfully');
            renderFilterTags();
            setupTextSelection();

            // Auto-load preferences if available
            const saved = localStorage.getItem('logViewerPreferences');
            if (saved) {
                try {
                    const prefs = JSON.parse(saved);
                    hiddenLoggers = new Set(prefs.hiddenLoggers);
                } catch (e) {
                    console.log('Failed to auto-load preferences');
                }
            }
        });
    </script>
</body>
</html>
