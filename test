<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Debugging Assistant</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px 40px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }

        .upload-section {
            padding: 40px;
            text-align: center;
        }

        .upload-box {
            border: 3px dashed #667eea;
            border-radius: 12px;
            padding: 60px 40px;
            background: #f8f9ff;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-box:hover {
            background: #f0f2ff;
            border-color: #764ba2;
            transform: translateY(-2px);
        }

        .upload-icon {
            font-size: 4em;
            margin-bottom: 20px;
        }

        input[type="file"] {
            display: none;
        }

        .main-content {
            display: none;
        }

        .main-content.active {
            display: flex;
            height: calc(100vh - 220px);
        }

        .sidebar {
            width: 350px;
            background: #f8f9fa;
            border-right: 2px solid #e0e0e0;
            overflow-y: auto;
            flex-shrink: 0;
        }

        .sidebar-section {
            padding: 20px;
            border-bottom: 2px solid #e0e0e0;
        }

        .sidebar-title {
            color: #333;
            font-size: 1.1em;
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .keyword-cloud {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .keyword-tag {
            padding: 6px 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .keyword-tag:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .keyword-tag.error {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .keyword-tag.warn {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .keyword-count {
            background: rgba(255,255,255,0.3);
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 0.9em;
        }

        .quick-action {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .quick-action:hover {
            border-color: #667eea;
            transform: translateX(5px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
        }

        .quick-action-title {
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .quick-action-desc {
            font-size: 0.85em;
            color: #6b7280;
        }

        .error-group {
            background: rgba(239, 68, 68, 0.05);
            border-left: 4px solid #ef4444;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .error-group:hover {
            background: rgba(239, 68, 68, 0.1);
            transform: translateX(5px);
        }

        .error-group-title {
            font-weight: 700;
            color: #ef4444;
            margin-bottom: 5px;
            font-size: 0.9em;
        }

        .error-group-count {
            font-size: 0.8em;
            color: #6b7280;
        }

        .content-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .tabs {
            display: flex;
            padding: 15px 30px;
            gap: 8px;
            background: #f8f9fa;
            border-bottom: 2px solid #e0e0e0;
        }

        .tab {
            padding: 10px 20px;
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9em;
            transition: all 0.3s;
        }

        .tab.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .controls {
            padding: 15px 30px;
            background: #f8f9fa;
            display: flex;
            gap: 10px;
            align-items: center;
            border-bottom: 2px solid #e0e0e0;
        }

        .search-box {
            flex: 1;
            position: relative;
        }

        .search-box input {
            width: 100%;
            padding: 10px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 0.95em;
        }

        .action-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9em;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .tab-content {
            flex: 1;
            overflow-y: auto;
            padding: 30px;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .flow-diagram {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 20px;
        }

        .flow-title {
            font-size: 1.3em;
            font-weight: 700;
            color: #333;
            margin-bottom: 20px;
        }

        .flow-step {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 15px;
            position: relative;
        }

        .flow-step::after {
            content: '↓';
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 2em;
            color: #667eea;
        }

        .flow-step:last-child::after {
            display: none;
        }

        .flow-step.error {
            border-left: 5px solid #ef4444;
            background: #fef2f2;
        }

        .flow-step.warn {
            border-left: 5px solid #f59e0b;
            background: #fffbeb;
        }

        .flow-step-time {
            font-size: 0.85em;
            color: #6b7280;
            margin-bottom: 8px;
        }

        .flow-step-message {
            color: #1f2937;
            font-weight: 600;
            line-height: 1.6;
        }

        .insight-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            color: white;
        }

        .insight-title {
            font-size: 1.2em;
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .insight-list {
            list-style: none;
        }

        .insight-list li {
            padding: 12px;
            background: rgba(255,255,255,0.1);
            border-radius: 8px;
            margin-bottom: 10px;
            line-height: 1.6;
        }

        .solution-card {
            background: white;
            border: 2px solid #10b981;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
        }

        .solution-title {
            color: #10b981;
            font-weight: 700;
            font-size: 1.1em;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .solution-desc {
            color: #4b5563;
            line-height: 1.6;
            margin-bottom: 12px;
        }

        .solution-code {
            background: #f3f4f6;
            border-radius: 6px;
            padding: 12px;
            font-family: 'Courier New', monospace;
            font-size: 0.85em;
            overflow-x: auto;
        }

        .log-entry {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .log-entry:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transform: translateX(3px);
        }

        .log-entry.error {
            border-left: 5px solid #ef4444;
            background: #fef2f2;
        }

        .log-entry.warn {
            border-left: 5px solid #f59e0b;
            background: #fffbeb;
        }

        .log-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .log-level {
            padding: 4px 10px;
            border-radius: 5px;
            font-weight: 700;
            font-size: 0.75em;
            text-transform: uppercase;
        }

        .level-error { background: #ef4444; color: white; }
        .level-warn { background: #f59e0b; color: white; }

        .log-message {
            color: #1f2937;
            line-height: 1.6;
            font-size: 0.9em;
        }

        .highlight {
            background: #fef08a;
            padding: 2px 4px;
            border-radius: 3px;
            font-weight: 600;
        }

        .loading {
            text-align: center;
            padding: 40px;
            display: none;
        }

        .loading.active {
            display: block;
        }

        .spinner {
            border: 4px solid #f3f4f6;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 1024px) {
            .main-content {
                flex-direction: column;
                height: auto;
            }

            .sidebar {
                width: 100%;
                max-height: 400px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔍 Smart Debugging Assistant</h1>
            <p>Auto Keyword Detection • Error Flow Analysis • Root Cause Finder • Suggested Fixes</p>
        </div>

        <div class="upload-section" id="uploadSection">
            <div class="upload-box" onclick="document.getElementById('fileInput').click()">
                <div class="upload-icon">🚀</div>
                <h3>Upload Log File for Intelligent Analysis</h3>
                <p>Automatic keyword extraction • Error grouping • Smart debugging</p>
                <input type="file" id="fileInput" accept=".log,.txt,.json">
            </div>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Analyzing logs with AI-powered debugging assistant...</p>
        </div>

        <div class="main-content" id="mainContent">
            <div class="sidebar">
                <div class="sidebar-section">
                    <div class="sidebar-title">🔑 Top Keywords (Auto-Detected)</div>
                    <div class="keyword-cloud" id="keywordCloud"></div>
                </div>

                <div class="sidebar-section">
                    <div class="sidebar-title">⚡ Quick Actions</div>
                    <div id="quickActions"></div>
                </div>

                <div class="sidebar-section">
                    <div class="sidebar-title">🔴 Error Groups</div>
                    <div id="errorGroups"></div>
                </div>
            </div>

            <div class="content-area">
                <div class="tabs">
                    <div class="tab active" onclick="switchTab('flow')">🔗 Error Flow</div>
                    <div class="tab" onclick="switchTab('rootcause')">🎯 Root Cause</div>
                    <div class="tab" onclick="switchTab('solutions')">💡 Suggested Fixes</div>
                    <div class="tab" onclick="switchTab('logs')">📋 All Logs</div>
                </div>

                <div class="controls">
                    <div class="search-box">
                        <input type="text" id="searchInput" placeholder="Search logs...">
                    </div>
                    <button class="action-btn btn-success" id="exportBtn">💾 Export</button>
                    <button class="action-btn btn-danger" id="clearBtn">🗑️ Clear</button>
                </div>

                <div class="tab-content active" id="flowTab">
                    <div class="flow-diagram">
                        <div class="flow-title">📊 Error Sequence Flow</div>
                        <div id="flowSteps"></div>
                    </div>

                    <div class="insight-card">
                        <div class="insight-title">🤖 AI Insights</div>
                        <ul class="insight-list" id="aiInsights"></ul>
                    </div>
                </div>

                <div class="tab-content" id="rootcauseTab">
                    <div class="insight-card">
                        <div class="insight-title">🎯 Identified Root Causes</div>
                        <ul class="insight-list" id="rootCauses"></ul>
                    </div>

                    <div style="margin-top: 20px;" id="relatedErrors"></div>
                </div>

                <div class="tab-content" id="solutionsTab">
                    <div id="suggestedSolutions"></div>
                </div>

                <div class="tab-content" id="logsTab">
                    <div id="allLogs"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allLogs = [];
        let keywords = [];
        let errorGroups = [];

        const fileInput = document.getElementById('fileInput');
        const uploadSection = document.getElementById('uploadSection');
        const mainContent = document.getElementById('mainContent');
        const loading = document.getElementById('loading');

        fileInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (file) {
                uploadSection.style.display = 'none';
                loading.classList.add('active');

                const text = await file.text();

                setTimeout(() => {
                    analyzeLog(text);
                    loading.classList.remove('active');
                    mainContent.classList.add('active');
                }, 1500);
            }
        });

        function analyzeLog(text) {
            const lines = text.split('\n').filter(l => l.trim());

            allLogs = lines.map((line, i) => {
                let log = {
                    index: i + 1,
                    timestamp: null,
                    level: 'info',
                    message: line,
                    raw: line
                };

                if (/error|exception|fatal|critical|fail/i.test(line)) {
                    log.level = 'error';
                } else if (/warn|warning/i.test(line)) {
                    log.level = 'warn';
                }

                const timeMatch = line.match(/(\d{2}:\d{2}:\d{2})/);
                if (timeMatch) {
                    log.timestamp = timeMatch[1];
                }

                return log;
            });

            extractKeywords();
            groupErrors();
            renderAll();
        }

        function extractKeywords() {
            const stopWords = ['the', 'is', 'at', 'which', 'on', 'a', 'an', 'and', 'or', 'but', 'in', 'with', 'to', 'from', 'of', 'for', 'as'];
            const wordMap = {};

            allLogs.forEach(log => {
                const words = log.message.toLowerCase()
                    .replace(/[^a-z0-9\s]/g, ' ')
                    .split(/\s+/)
                    .filter(w => w.length > 3 && !stopWords.includes(w));

                words.forEach(word => {
                    if (!wordMap[word]) {
                        wordMap[word] = { count: 0, level: log.level };
                    }
                    wordMap[word].count++;
                    if (log.level === 'error' && wordMap[word].level !== 'error') {
                        wordMap[word].level = 'error';
                    }
                });
            });

            keywords = Object.entries(wordMap)
                .sort((a, b) => b[1].count - a[1].count)
                .slice(0, 50)
                .map(([word, data]) => ({ word, count: data.count, level: data.level }));
        }

        function groupErrors() {
            const groups = {};

            allLogs.filter(l => l.level === 'error').forEach(log => {
                let key = 'other';

                if (/database|db|connection|query|sql/i.test(log.message)) {
                    key = 'database';
                } else if (/timeout|timed out/i.test(log.message)) {
                    key = 'timeout';
                } else if (/memory|heap|oom|out of memory/i.test(log.message)) {
                    key = 'memory';
                } else if (/api|endpoint|request|response/i.test(log.message)) {
                    key = 'api';
                } else if (/authentication|auth|login|permission|unauthorized/i.test(log.message)) {
                    key = 'auth';
                } else if (/null|undefined|cannot read property/i.test(log.message)) {
                    key = 'nullpointer';
                }

                if (!groups[key]) {
                    groups[key] = [];
                }
                groups[key].push(log);
            });

            errorGroups = Object.entries(groups).map(([name, logs]) => ({
                name: formatGroupName(name),
                count: logs.length,
                logs
            })).sort((a, b) => b.count - a.count);
        }

        function formatGroupName(key) {
            const names = {
                'database': '🗄️ Database Errors',
                'timeout': '⏱️ Timeout Issues',
                'memory': '💾 Memory Problems',
                'api': '🌐 API Failures',
                'auth': '🔐 Authentication Errors',
                'nullpointer': '⚠️ Null Pointer Exceptions',
                'other': '❓ Other Errors'
            };
            return names[key] || key;
        }

        function renderAll() {
            renderKeywords();
            renderQuickActions();
            renderErrorGroups();
            renderErrorFlow();
            renderAIInsights();
            renderRootCauses();
            renderSolutions();
            renderAllLogs();
        }

        function renderKeywords() {
            const html = keywords.map(k => `
                <div class="keyword-tag ${k.level}" onclick="searchKeyword('${k.word}')">
                    ${k.word}
                    <span class="keyword-count">${k.count}</span>
                </div>
            `).join('');
            document.getElementById('keywordCloud').innerHTML = html;
        }

        function searchKeyword(word) {
            document.getElementById('searchInput').value = word;
            switchTab('logs');
            filterLogs(word);
        }

        window.searchKeyword = searchKeyword;

        function renderQuickActions() {
            const errors = allLogs.filter(l => l.level === 'error');
            const warnings = allLogs.filter(l => l.level === 'warn');

            const actions = [
                {
                    icon: '🔴',
                    title: `Jump to First Error (#${errors[0]?.index || 'N/A'})`,
                    desc: 'Navigate to the first critical error',
                    action: () => jumpToLog(errors[0]?.index)
                },
                {
                    icon: '🔗',
                    title: 'View Error Chain',
                    desc: 'See sequence of related errors',
                    action: () => switchTab('flow')
                },
                {
                    icon: '🎯',
                    title: 'Find Root Cause',
                    desc: 'AI-powered root cause analysis',
                    action: () => switchTab('rootcause')
                },
                {
                    icon: '💡',
                    title: 'Get Suggested Fixes',
                    desc: 'View recommended solutions',
                    action: () => switchTab('solutions')
                }
            ];

            document.getElementById('quickActions').innerHTML = actions.map((a, i) => `
                <div class="quick-action" onclick="quickAction(${i})">
                    <div class="quick-action-title">${a.icon} ${a.title}</div>
                    <div class="quick-action-desc">${a.desc}</div>
                </div>
            `).join('');

            window.quickActionsList = actions;
        }

        function quickAction(index) {
            window.quickActionsList[index].action();
        }

        window.quickAction = quickAction;

        function renderErrorGroups() {
            document.getElementById('errorGroups').innerHTML = errorGroups.map(g => `
                <div class="error-group" onclick="showErrorGroup('${g.name}')">
                    <div class="error-group-title">${g.name}</div>
                    <div class="error-group-count">${g.count} occurrences</div>
                </div>
            `).join('');
        }

        function showErrorGroup(name) {
            const group = errorGroups.find(g => g.name === name);
            if (group) {
                switchTab('logs');
                renderFilteredLogs(group.logs);
            }
        }

        window.showErrorGroup = showErrorGroup;

        function renderErrorFlow() {
            const errors = allLogs.filter(l => l.level === 'error' || l.level === 'warn').slice(0, 10);

            document.getElementById('flowSteps').innerHTML = errors.map(log => `
                <div class="flow-step ${log.level}">
                    <div class="flow-step-time">${log.timestamp || 'Unknown time'}</div>
                    <div class="flow-step-message">${log.message}</div>
                </div>
            `).join('') || '<p>No error flow detected</p>';
        }

        function renderAIInsights() {
            const errors = allLogs.filter(l => l.level === 'error');
            const insights = [];

            if (errors.length > 20) {
                insights.push(`🚨 High error rate detected: ${errors.length} errors found. This indicates a critical system issue.`);
            }

            const dbErrors = errors.filter(l => /database|db|connection/i.test(l.message));
            if (dbErrors.length > 5) {
                insights.push(`🗄️ Database connection issues detected (${dbErrors.length} occurrences). Check connection pool settings and database health.`);
            }

            const timeouts = allLogs.filter(l => /timeout/i.test(l.message));
            if (timeouts.length > 3) {
                insights.push(`⏱️ Multiple timeout events (${timeouts.length}). Network latency or service overload suspected.`);
            }

            const memory = allLogs.filter(l => /memory|heap|oom/i.test(l.message));
            if (memory.length > 0) {
                insights.push(`💾 Memory-related issues detected (${memory.length}). Possible memory leak or insufficient heap size.`);
            }

            if (insights.length === 0) {
                insights.push('✅ No critical patterns detected. System appears stable.');
            }

            document.getElementById('aiInsights').innerHTML = insights.map(i => `<li>${i}</li>`).join('');
        }

        function renderRootCauses() {
            const causes = [];

            errorGroups.forEach(group => {
                if (group.count > 0) {
                    let cause = '';
                    if (group.name.includes('Database')) {
                        cause = `Database connection pool exhausted or database server unresponsive. Found ${group.count} related errors.`;
                    } else if (group.name.includes('Timeout')) {
                        cause = `Service response time exceeding timeout thresholds. ${group.count} timeout events recorded.`;
                    } else if (group.name.includes('Memory')) {
                        cause = `Insufficient memory allocation or memory leak in application. ${group.count} memory-related errors.`;
                    } else if (group.name.includes('API')) {
                        cause = `External API integration failures or network connectivity issues. ${group.count} API errors detected.`;
                    } else if (group.name.includes('Authentication')) {
                        cause = `Authentication/authorization failures. ${group.count} auth-related errors.`;
                    } else {
                        cause = `${group.name}: ${group.count} occurrences detected.`;
                    }
                    causes.push(cause);
                }
            });

            document.getElementById('rootCauses').innerHTML = causes.map(c => `<li>${c}</li>`).join('');
        }

        function renderSolutions() {
            const solutions = [];

            errorGroups.forEach(group => {
                if (group.name.includes('Database') && group.count > 0) {
                    solutions.push({
                        title: '🗄️ Fix Database Connection Issues',
                        desc: 'Increase connection pool size and add connection retry logic',
                        code: `// Increase connection pool\npool.setMaxConnections(50);\npool.setConnectionTimeout(5000);\n\n// Add retry logic\nretryConnection(3, 1000);`
                    });
                }

                if (group.name.includes('Timeout') && group.count > 0) {
                    solutions.push({
                        title: '⏱️ Resolve Timeout Issues',
                        desc: 'Implement circuit breaker pattern and increase timeout values',
                        code: `// Circuit breaker configuration\ncircuitBreaker.setFailureThreshold(5);\ncircuitBreaker.setTimeout(10000);\ncircuitBreaker.setResetTimeout(30000);`
                    });
                }

                if (group.name.includes('Memory') && group.count > 0) {
                    solutions.push({
                        title: '💾 Fix Memory Problems',
                        desc: 'Increase heap size and implement proper object disposal',
                        code: `// JVM arguments\n-Xms2g -Xmx4g -XX:+UseG1GC\n\n// Proper cleanup\ntry (Resource r = getResource()) {\n    // use resource\n} // auto-close`
                    });
                }

                if (group.name.includes('API') && group.count > 0) {
                    solutions.push({
                        title: '🌐 Fix API Integration Issues',
                        desc: 'Add retry mechanism and fallback handling',
                        code: `// Retry with exponential backoff\nretryPolicy.maxRetries(3);\nretryPolicy.backoffMultiplier(2);\nretryPolicy.timeout(5000);`
                    });
                }
            });

            if (solutions.length === 0) {
                solutions.push({
                    title: '✅ System Health Good',
                    desc: 'No critical issues detected. Continue monitoring.',
                    code: '// Keep monitoring logs for any anomalies'
                });
            }

            document.getElementById('suggestedSolutions').innerHTML = solutions.map(s => `
                <div class="solution-card">
                    <div class="solution-title">${s.title}</div>
                    <div class="solution-desc">${s.desc}</div>
                    <div class="solution-code">${s.code}</div>
                </div>
            `).join('');
        }

        function renderAllLogs() {
            renderFilteredLogs(allLogs);
        }

        function renderFilteredLogs(logs) {
            const html = logs.map(log => `
                <div class="log-entry ${log.level}">
                    <div class="log-header">
                        <span class="log-level level-${log.level}">${log.level}</span>
                        <span style="color: #6b7280; font-size: 0.85em;">${log.timestamp || `Line ${log.index}`}</span>
                    </div>
                    <div class="log-message">${log.message}</div>
                </div>
            `).join('');

            document.getElementById('allLogs').innerHTML = html || '<p>No logs found</p>';
        }

        function filterLogs(term) {
            const filtered = allLogs.filter(l =>
                l.message.toLowerCase().includes(term.toLowerCase())
            );
            renderFilteredLogs(filtered);
        }

        document.getElementById('searchInput').addEventListener('input', (e) => {
            filterLogs(e.target.value);
        });

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(t => t.classList.remove('active'));

            event.target.classList.add('active');
            document.getElementById(tabName + 'Tab').classList.add('active');
        }

        window.switchTab = switchTab;

        function jumpToLog(index) {
            if (!index) return;
            switchTab('logs');
            setTimeout(() => {
                const logs = document.querySelectorAll('.log-entry');
                if (logs[index - 1]) {
                    logs[index - 1].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    logs[index - 1].style.boxShadow = '0 0 20px rgba(102, 126, 234, 0.8)';
                    setTimeout(() => {
                        logs[index - 1].style.boxShadow = '';
                    }, 2000);
                }
            }, 100);
        }

        window.jumpToLog = jumpToLog;

        document.getElementById('exportBtn').addEventListener('click', () => {
            const report = {
                totalLogs: allLogs.length,
                errors: allLogs.filter(l => l.level === 'error').length,
                keywords: keywords,
                errorGroups: errorGroups,
                timestamp: new Date().toISOString()
            };

            const blob = new Blob([JSON.stringify(report, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `debug-report-${Date.now()}.json`;
            link.click();
            URL.revokeObjectURL(url);
        });

        document.getElementById('clearBtn').addEventListener('click', () => {
            if (confirm('Clear all data?')) {
                allLogs = [];
                keywords = [];
                errorGroups = [];
                mainContent.classList.remove('active');
                uploadSection.style.display = 'block';
            }
        });
    </script>
</body>
</html>