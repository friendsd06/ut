
prompts.js
/**
 * Prompt management functions
 * Handles all prompt-related UI operations
 */

// Global variable to store current prompts
let currentPrompts = [];

/**
 * Load and display all prompts
 */
async function loadPrompts() {
    try {
        currentPrompts = await promptApi.getActive();
        displayPrompts(currentPrompts);
    } catch (error) {
        showError('Failed to load prompts: ' + error.message);
        displayPrompts([]);
    }
}

/**
 * Display prompts in the list
 */
function displayPrompts(prompts) {
    const promptsList = el('prompts-list');
    if (!promptsList) return;

    if (prompts.length === 0) {
        promptsList.innerHTML = `
            <div class="empty-state">
                <p>${MESSAGES.NO_PROMPTS}</p>
            </div>
        `;
        return;
    }

    promptsList.innerHTML = prompts.map(prompt => `
        <div class="prompt-card" data-id="${prompt.id}">
            <div class="prompt-header">
                <h3 class="prompt-title">${escapeHtml(prompt.title)}</h3>
                <div class="prompt-actions">
                    <button class="btn-small btn-secondary" onclick="editPrompt(${prompt.id})">Edit</button>
                    <button class="btn-small btn-danger" onclick="deletePrompt(${prompt.id})">Delete</button>
                    <button class="btn-small ${prompt.isActive ? 'btn-warning' : 'btn-success'}"
                            onclick="togglePromptStatus(${prompt.id}, ${!prompt.isActive})">
                        ${prompt.isActive ? 'Deactivate' : 'Activate'}
                    </button>
                </div>
            </div>
            <div class="prompt-meta">
                <span class="prompt-category">${escapeHtml(prompt.category.name)}</span>
                <span class="prompt-status ${prompt.isActive ? 'active' : 'inactive'}">
                    ${prompt.isActive ? 'Active' : 'Inactive'}
                </span>
            </div>
            ${prompt.description ? `<div class="prompt-description">${escapeHtml(prompt.description)}</div>` : ''}
            <div class="prompt-content">
                <pre class="content-preview">${escapeHtml(prompt.content)}</pre>
            </div>
            <div class="prompt-footer">
                <small class="prompt-date">
                    Created: ${formatDate(prompt.createdAt)}
                    ${prompt.updatedAt !== prompt.createdAt ? `| Updated: ${formatDate(prompt.updatedAt)}` : ''}
                </small>
            </div>
        </div>
    `).join('');
}

/**
 * Show prompt form for creating new prompt
 */
function showPromptForm(promptId = null) {
    const modal = el('prompt-modal');
    const form = el('prompt-form');
    const title = el('prompt-modal-title');

    if (!modal || !form || !title) return;

    // Reset form
    form.reset();
    el('prompt-id').value = '';

    if (promptId) {
        title.textContent = 'Edit Prompt';
        loadPromptForEditing(promptId);
    } else {
        title.textContent = 'Add New Prompt';
    }

    // Load categories for dropdown
    loadCategoriesForPromptForm();

    modal.classList.remove('hidden');
}

/**
 * Load categories for prompt form dropdown
 */
async function loadCategoriesForPromptForm() {
    try {
        const categories = await categoryApi.getAll();
        const select = el('prompt-category');
        if (!select) return;

        select.innerHTML = '<option value="">Select a category</option>' +
            categories.map(cat => `<option value="${cat.id}">${escapeHtml(cat.name)}</option>`).join('');
    } catch (error) {
        console.error('Failed to load categories:', error);
        showError('Failed to load categories for form');
    }
}

/**
 * Load prompt data for editing
 */
async function loadPromptForEditing(promptId) {
    try {
        const prompt = await promptApi.getById(promptId);
        if (!prompt) return;

        el('prompt-id').value = prompt.id;
        el('prompt-title').value = prompt.title;
        el('prompt-description').value = prompt.description || '';
        el('prompt-content').value = prompt.content;
        el('prompt-active').checked = prompt.isActive;
        el('prompt-category').value = prompt.category.id;
    } catch (error) {
        showError('Failed to load prompt for editing: ' + error.message);
    }
}

/**
 * Hide prompt form modal
 */
function hidePromptModal() {
    const modal = el('prompt-modal');
    if (modal) modal.classList.add('hidden');
}

/**
 * Search prompts
 */
const searchPrompts = debounce(async function() {
    const searchInput = el('prompt-search');
    const query = searchInput ? searchInput.value.trim() : '';

    try {
        if (query) {
            currentPrompts = await promptApi.search(query);
        } else {
            currentPrompts = await promptApi.getActive();
        }
        displayPrompts(currentPrompts);
    } catch (error) {
        showError('Search failed: ' + error.message);
    }
}, UI_CONFIG.DEBOUNCE_DELAY);

/**
 * Filter prompts by category
 */
async function filterPrompts() {
    const categoryFilter = el('category-filter');
    const categoryId = categoryFilter ? categoryFilter.value : '';

    try {
        if (categoryId) {
            currentPrompts = await promptApi.getByCategory(categoryId);
        } else {
            currentPrompts = await promptApi.getActive();
        }
        displayPrompts(currentPrompts);
    } catch (error) {
        showError('Filter failed: ' + error.message);
    }
}

/**
 * Edit prompt
 */
function editPrompt(promptId) {
    showPromptForm(promptId);
}

/**
 * Delete prompt
 */
function deletePrompt(promptId) {
    showConfirmDialog(`Are you sure you want to delete this prompt?`, () => {
        performDeletePrompt(promptId);
    });
}

/**
 * Perform prompt deletion
 */
async function performDeletePrompt(promptId) {
    try {
        await promptApi.delete(promptId);
        showSuccess('Prompt deleted successfully');
        loadPrompts(); // Reload the list
    } catch (error) {
        showError('Failed to delete prompt: ' + error.message);
    }
}

/**
 * Toggle prompt status (active/inactive)
 */
async function togglePromptStatus(promptId, newStatus) {
    try {
        await promptApi.updateStatus(promptId, newStatus);
        showSuccess(`Prompt ${newStatus ? 'activated' : 'deactivated'} successfully`);
        loadPrompts(); // Reload the list
    } catch (error) {
        showError('Failed to update prompt status: ' + error.message);
    }
}

/**
 * Handle prompt form submission
 */
async function handlePromptFormSubmit(event) {
    event.preventDefault();

    const promptId = el('prompt-id').value;
    const promptData = {
        title: el('prompt-title').value.trim(),
        description: el('prompt-description').value.trim(),
        content: el('prompt-content').value.trim(),
        isActive: el('prompt-active').checked,
        category: {
            id: parseInt(el('prompt-category').value)
        }
    };

    try {
        if (promptId) {
            // Update existing prompt
            await promptApi.update(promptId, promptData);
            showSuccess('Prompt updated successfully');
        } else {
            // Create new prompt
            await promptApi.create(promptData);
            showSuccess('Prompt created successfully');
        }

        hidePromptModal();
        loadPrompts(); // Reload the list
    } catch (error) {
        showError('Failed to save prompt: ' + error.message);
    }
}

/**
 * Utility function to escape HTML
 */
function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * Format date string
 */
function formatDate(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

-----------------------------------------------------
reviews-management.js

/**
 * Reviews Management
 * Handles viewing and managing submitted reviews
 */

class ReviewsManager {
    constructor() {
        this.reviews = [];
        this.filteredReviews = [];
        this.projects = [];
        this.searchTimeout = null;
    }

    init() {
        this.setupEventListeners();
        this.loadReviews();
    }

    setupEventListeners() {
        const searchInput = document.getElementById('reviews-search');
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(() => this.searchReviews(), 300);
            });
        }

        ['reviews-status-filter', 'reviews-priority-filter', 'reviews-project-filter'].forEach(filterId => {
            const filter = document.getElementById(filterId);
            if (filter) {
                filter.addEventListener('change', () => this.filterReviews());
            }
        });
    }

    async loadReviews() {
        try {
            showLoading();

            try {
                const response = await submissionApi.getAll();
                this.reviews = response || [];
            } catch (error) {
                console.warn('Reviews API not available:', error);
                this.reviews = [];
            }

            this.filteredReviews = [...this.reviews];
            await this.loadProjects();
            this.populateFilters();
            this.renderReviews();
            this.updateStats();

        } catch (error) {
            console.error('Failed to load reviews:', error);
            showError('Failed to load reviews');
        } finally {
            hideLoading();
        }
    }

    async loadProjects() {
        if (window.projectsManager && window.projectsManager.projects) {
            this.projects = window.projectsManager.projects;
        }
    }

    populateFilters() {
        const projectFilter = document.getElementById('reviews-project-filter');
        if (projectFilter) {
            projectFilter.innerHTML = '<option value="all">All Projects</option>';
            this.projects.forEach(project => {
                const option = document.createElement('option');
                option.value = project.id;
                option.textContent = project.name;
                projectFilter.appendChild(option);
            });
        }
    }


    renderReviews() {
        const reviewsList = document.getElementById('reviews-list');
        if (!reviewsList) return;

        if (this.filteredReviews.length === 0) {
            reviewsList.innerHTML = this.renderEmptyState();
            return;
        }

        reviewsList.innerHTML = this.filteredReviews.map(review => this.renderReviewItem(review)).join('');
    }

    renderReviewItem(review) {
        const submittedDate = new Date(review.submittedDate).toLocaleString();
        const statusClass = `status-${review.reviewStatus.toLowerCase().replace('_', '-')}`;

        return `
            <div class="review-item" data-review-id="${review.id}">
                <div class="review-header">
                    <div class="review-title-section">
                        <h3 class="review-title">${this.escapeHtml(review.filePath || 'Code Review')}</h3>
                        <div class="review-id">${review.reviewId}</div>
                    </div>
                    <span class="review-status-badge ${statusClass}">${review.reviewStatus.replace('_', ' ')}</span>
                </div>

                <div class="review-meta">
                    <div class="review-meta-item">
                        <span class="review-meta-label">Project</span>
                        <span class="review-meta-value">${review.projectName || 'Unknown'}</span>
                    </div>
                    <div class="review-meta-item">
                        <span class="review-meta-label">Submitter</span>
                        <span class="review-meta-value">${review.submitterName || review.submitterEmail}</span>
                    </div>
                    <div class="review-meta-item">
                        <span class="review-meta-label">Language</span>
                        <span class="review-meta-value">${review.programmingLanguage?.toUpperCase() || 'Unknown'}</span>
                    </div>
                    <div class="review-meta-item">
                        <span class="review-meta-label">Priority</span>
                        <span class="review-meta-value priority-${review.priority?.toLowerCase()}">${review.priority}</span>
                    </div>
                    <div class="review-meta-item">
                        <span class="review-meta-label">Submitted</span>
                        <span class="review-meta-value">${submittedDate}</span>
                    </div>
                    <div class="review-meta-item">
                        <span class="review-meta-label">Commit</span>
                        <span class="review-meta-value">${review.commitHash}</span>
                    </div>
                </div>

                <div class="review-actions">
                    <button class="action-btn-small" onclick="viewReviewDetails('${review.reviewId}')" title="View Details">
                        👁️ View
                    </button>
                    ${review.reviewStatus === 'COMPLETED' ? `
                        <button class="action-btn-small" onclick="downloadReviewReport('${review.reviewId}')" title="Download Report">
                            📄 Report
                        </button>
                    ` : ''}
                    ${review.reviewStatus === 'PENDING' || review.reviewStatus === 'IN_PROGRESS' ? `
                        <button class="action-btn-small" onclick="cancelReview('${review.reviewId}')" title="Cancel Review">
                            ❌ Cancel
                        </button>
                    ` : ''}
                </div>
            </div>
        `;
    }

    renderEmptyState() {
        return `
            <div class="reviews-placeholder">
                <div class="placeholder-content">
                    <div class="placeholder-icon">📋</div>
                    <h3>No Reviews Found</h3>
                    <p>No code reviews match your current criteria</p>
                    <button class="btn-primary" onclick="switchToTab('code-review')">Submit Review</button>
                </div>
            </div>
        `;
    }

    searchReviews() {
        const searchTerm = document.getElementById('reviews-search')?.value.toLowerCase() || '';
        this.applyFilters();
    }

    filterReviews() {
        this.applyFilters();
    }

    applyFilters() {
        const searchTerm = document.getElementById('reviews-search')?.value.toLowerCase() || '';
        const statusFilter = document.getElementById('reviews-status-filter')?.value || 'all';
        const priorityFilter = document.getElementById('reviews-priority-filter')?.value || 'all';
        const projectFilter = document.getElementById('reviews-project-filter')?.value || 'all';

        this.filteredReviews = this.reviews.filter(review => {
            const matchesSearch = !searchTerm ||
                review.reviewId.toLowerCase().includes(searchTerm) ||
                (review.submitterName && review.submitterName.toLowerCase().includes(searchTerm)) ||
                (review.submitterEmail && review.submitterEmail.toLowerCase().includes(searchTerm)) ||
                (review.projectName && review.projectName.toLowerCase().includes(searchTerm));

            const matchesStatus = statusFilter === 'all' || review.reviewStatus === statusFilter;
            const matchesPriority = priorityFilter === 'all' || review.priority === priorityFilter;
            const matchesProject = projectFilter === 'all' || review.projectId == projectFilter;

            return matchesSearch && matchesStatus && matchesPriority && matchesProject;
        });

        this.renderReviews();
        this.updateStats();
    }

    updateStats() {
        const stats = this.reviews.reduce((acc, review) => {
            acc[review.reviewStatus] = (acc[review.reviewStatus] || 0) + 1;
            return acc;
        }, {});

        document.getElementById('pending-reviews-count').textContent = stats.PENDING || 0;
        document.getElementById('in-progress-reviews-count').textContent = stats.IN_PROGRESS || 0;
        document.getElementById('completed-reviews-count').textContent = stats.COMPLETED || 0;
    }

    getReviewById(reviewId) {
        return this.reviews.find(r => r.reviewId === reviewId);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

window.reviewsManager = new ReviewsManager();

// Global functions
window.refreshReviews = async function() {
    await window.reviewsManager.loadReviews();
    showSuccess('Reviews refreshed');
};

window.viewReviewDetails = function(reviewId) {
    const review = window.reviewsManager.getReviewById(reviewId);
    if (review) {
        // Show review details modal
        showInfo(`Review details for ${reviewId} would be displayed here`, 'Review Details');
    }
};

window.downloadReviewReport = function(reviewId) {
    // Download the review report
    showInfo(`Downloading report for ${reviewId}...`);
};

window.cancelReview = function(reviewId) {
    showConfirm(
        `Are you sure you want to cancel review ${reviewId}?`,
        async () => {
            try {
                await submissionApi.cancel(reviewId);
                await window.reviewsManager.loadReviews();
                showSuccess('Review cancelled successfully');
            } catch (error) {
                showError('Failed to cancel review');
            }
        }
    );
};

document.addEventListener('DOMContentLoaded', () => {
    if (document.getElementById('reviews-tab')) {
        window.reviewsManager.init();
    }
});
----------------------------------------------
syntax-demo.js

/**
 * Demo Functions for Syntax Highlighting
 * Provides sample data and demo functions to test the enhanced code display
 */

// Sample code for different languages
const DEMO_CODES = {
    java: `@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable String id) {
        try {
            User user = userService.findById(id);
            if (user == null) {
                return ResponseEntity.notFound().build();
            }
            return ResponseEntity.ok(user);
        } catch (Exception e) {
            logger.error("Error fetching user: " + id, e);
            return ResponseEntity.internalServerError().build();
        }
    }

    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody CreateUserRequest request) {
        if (request.getName() == null || request.getEmail() == null) {
            return ResponseEntity.badRequest().build();
        }

        User user = userService.createUser(request.getName(), request.getEmail());
        return ResponseEntity.ok(user);
    }
}`,

    javascript: `const express = require('express');
const { body, validationResult } = require('express-validator');
const app = express();

app.use(express.json());

// User routes with proper error handling
app.get('/api/users/:id', async (req, res) => {
    try {
        const userId = parseInt(req.params.id);

        if (isNaN(userId)) {
            return res.status(400).json({
                error: 'Invalid user ID format'
            });
        }

        const user = await userService.findById(userId);

        if (!user) {
            return res.status(404).json({
                error: 'User not found'
            });
        }

        res.json({
            id: user.id,
            name: user.name,
            email: user.email,
            createdAt: user.createdAt
        });
    } catch (error) {
        console.error('Error fetching user:', error);
        res.status(500).json({
            error: 'Internal server error'
        });
    }
});

app.post('/api/users', [
    body('name').isLength({ min: 2 }).withMessage('Name must be at least 2 characters'),
    body('email').isEmail().withMessage('Must be a valid email')
], async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
    }

    const { name, email } = req.body;
    const user = await userService.createUser(name, email);
    res.status(201).json(user);
});`,

    python: `from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from marshmallow import Schema, fields, ValidationError
import logging

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())

class UserSchema(Schema):
    name = fields.Str(required=True, validate=lambda x: len(x) >= 2)
    email = fields.Email(required=True)

user_schema = UserSchema()

@app.route('/api/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    """Get user by ID with proper error handling"""
    try:
        user = User.query.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404

        return jsonify({
            'id': user.id,
            'name': user.name,
            'email': user.email,
            'created_at': user.created_at.isoformat()
        })
    except Exception as e:
        app.logger.error(f'Error fetching user {user_id}: {e}')
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/users', methods=['POST'])
def create_user():
    """Create new user with validation"""
    try:
        data = user_schema.load(request.get_json())
    except ValidationError as err:
        return jsonify({'errors': err.messages}), 400

    # Check if user already exists
    existing_user = User.query.filter_by(email=data['email']).first()
    if existing_user:
        return jsonify({'error': 'User with this email already exists'}), 409

    user = User(name=data['name'], email=data['email'])
    db.session.add(user)
    db.session.commit()

    return jsonify({
        'id': user.id,
        'name': user.name,
        'email': user.email,
        'created_at': user.created_at.isoformat()
    }), 201`
};

// Sample analysis results
const DEMO_RESULTS = {
    codeReview: `# Code Review Analysis

## 🔍 Overall Assessment
This code demonstrates good practices but has several areas for improvement.

## ⚠️ Issues Found

### 1. Error Handling
- **Issue**: Generic exception handling without specific error types
- **Severity**: Medium
- **Recommendation**: Implement specific exception types for different error scenarios

### 2. Input Validation
- **Issue**: Missing null checks and input validation
- **Severity**: High
- **Recommendation**: Add comprehensive input validation before processing

### 3. Security Concerns
- **Issue**: Potential for SQL injection if using raw queries
- **Severity**: High
- **Recommendation**: Ensure all database interactions use parameterized queries

## 💡 Recommendations

### Code Quality Improvements
1. **Add comprehensive logging** for better debugging and monitoring
2. **Implement proper exception hierarchy** with custom exceptions
3. **Add input validation** at the controller level
4. **Include unit tests** for all public methods
5. **Consider using DTOs** for better data transfer object patterns

### Security Enhancements
1. **Implement rate limiting** to prevent abuse
2. **Add authentication and authorization** checks
3. **Sanitize all user inputs** before processing
4. **Use HTTPS** for all API communications

### Performance Optimizations
1. **Add caching** for frequently accessed data
2. **Implement pagination** for list endpoints
3. **Consider database indexing** for better query performance
4. **Use connection pooling** for database connections

## 📊 Code Metrics
- **Cyclomatic Complexity**: 6 (Good)
- **Lines of Code**: 45
- **Method Count**: 3
- **Test Coverage**: 0% (Needs Improvement)

## ✅ Positive Aspects
- Clean code structure and naming conventions
- Proper use of HTTP status codes
- Good separation of concerns
- Consistent coding style`,

    promptTest: `# Prompt Testing Results

## 🧪 Test Configuration
- **Prompt**: "Review this code for security vulnerabilities and best practices"
- **Language**: Java
- **Code Lines**: 32

## 📊 Analysis Results

### Security Assessment
The prompt effectively identified several security concerns:

1. **Input Validation**: ✅ Successfully detected missing validation
2. **Error Handling**: ✅ Identified overly generic exception handling
3. **SQL Injection**: ✅ Flagged potential database security issues
4. **Authentication**: ⚠️ Partially detected missing auth checks

### Best Practices Review
The prompt performed well in identifying code quality issues:

1. **Logging**: ✅ Detected missing logging mechanisms
2. **Exception Handling**: ✅ Identified improvement opportunities
3. **Code Structure**: ✅ Recognized good organizational patterns
4. **Documentation**: ❌ Failed to identify missing Javadoc comments

## 💯 Prompt Effectiveness Score: 85/100

### Strengths
- Comprehensive security analysis
- Good identification of common vulnerabilities
- Clear prioritization of issues by severity
- Actionable recommendations provided

### Areas for Improvement
- Could better identify documentation gaps
- More specific suggestions for testing strategies
- Enhanced focus on performance considerations

## 🔧 Prompt Optimization Suggestions

### Enhanced Security Focus
\`\`\`
Review this code for security vulnerabilities, paying special attention to:
- Input validation and sanitization
- Authentication and authorization gaps
- SQL injection prevention
- XSS protection measures
- Sensitive data handling
\`\`\`

### Improved Best Practices Detection
\`\`\`
Analyze this code for best practices including:
- Code documentation and comments
- Unit test coverage potential
- Performance optimization opportunities
- SOLID principle adherence
- Error handling robustness
\`\`\``
};

// Demo function for AI Code Review
function demoAICodeReview(language = 'java') {
    const code = DEMO_CODES[language];
    if (!code) {
        showErrorMessage(`Demo code not available for ${language}`);
        return;
    }

    // Show loading state
    showSuccessMessage('Running AI Code Review demo...');

    // Simulate API delay
    setTimeout(() => {
        displayAIReviewResult(DEMO_RESULTS.codeReview, code, language);
    }, 1500);
}

// Demo function for Prompt Testing
function demoPromptTesting(language = 'java') {
    const code = DEMO_CODES[language];
    if (!code) {
        showErrorMessage(`Demo code not available for ${language}`);
        return;
    }

    // Show loading state
    showSuccessMessage('Running Prompt Testing demo...');

    // Simulate API delay
    setTimeout(() => {
        displayPromptTestResult(
            DEMO_RESULTS.promptTest,
            code,
            language,
            'Security & Best Practices Review'
        );
    }, 1500);
}

// Demo function with structured result
function demoStructuredResult(language = 'javascript') {
    const code = DEMO_CODES[language];

    const structuredResult = {
        summary: "This JavaScript code shows good modern practices but has several areas for improvement in error handling and security.",
        issues: [
            {
                title: "Missing Input Validation",
                description: "The route parameters are not properly validated before processing. This could lead to unexpected behavior or security vulnerabilities.",
                severity: "high",
                suggestion: "Add comprehensive input validation using middleware or validation libraries like Joi or express-validator."
            },
            {
                title: "Generic Error Handling",
                description: "Error handling is too generic and doesn't provide meaningful feedback for different types of errors.",
                severity: "medium",
                suggestion: "Implement specific error types and provide appropriate HTTP status codes for different error scenarios."
            },
            {
                title: "No Rate Limiting",
                description: "The API endpoints lack rate limiting, which could lead to abuse or DoS attacks.",
                severity: "medium",
                suggestion: "Implement rate limiting middleware to prevent abuse of API endpoints."
            }
        ],
        recommendations: [
            "Add comprehensive logging for better debugging and monitoring",
            "Implement authentication and authorization middleware",
            "Use environment variables for configuration",
            "Add API documentation with OpenAPI/Swagger",
            "Implement comprehensive unit and integration tests"
        ]
    };

    showSuccessMessage('Running structured result demo...');

    setTimeout(() => {
        displayAIReviewResult(structuredResult, code, language);
    }, 1500);
}

// Add demo buttons to the interface
function addDemoButtons() {
    // Add demo buttons to AI Review section
    const aiReviewForm = document.querySelector('.ai-review-form');
    if (aiReviewForm) {
        const demoSection = document.createElement('div');
        demoSection.className = 'demo-section';
        demoSection.innerHTML = `
            <div style="margin: 1rem 0; padding: 1rem; background: #f0f8ff; border-radius: 8px; border-left: 4px solid #0066cc;">
                <h4>🎭 Demo Functions</h4>
                <p style="font-size: 0.9rem; color: #666; margin-bottom: 1rem;">
                    Test the enhanced syntax highlighting and result display:
                </p>
                <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                    <button class="btn-secondary" onclick="demoAICodeReview('java')">
                        ☕ Java Demo
                    </button>
                    <button class="btn-secondary" onclick="demoAICodeReview('javascript')">
                        📜 JavaScript Demo
                    </button>
                    <button class="btn-secondary" onclick="demoAICodeReview('python')">
                        🐍 Python Demo
                    </button>
                    <button class="btn-secondary" onclick="demoStructuredResult('javascript')">
                        📊 Structured Result
                    </button>
                </div>
            </div>
        `;

        aiReviewForm.appendChild(demoSection);
    }

    // Add demo buttons to Prompt Testing section
    const testLabForm = document.querySelector('.test-lab-form');
    if (testLabForm) {
        const demoSection = document.createElement('div');
        demoSection.className = 'demo-section';
        demoSection.innerHTML = `
            <div style="margin: 1rem 0; padding: 1rem; background: #fff0f5; border-radius: 8px; border-left: 4px solid #cc6699;">
                <h4>🧪 Testing Demos</h4>
                <p style="font-size: 0.9rem; color: #666; margin-bottom: 1rem;">
                    Test prompt effectiveness with sample code:
                </p>
                <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                    <button class="btn-secondary" onclick="demoPromptTesting('java')">
                        ☕ Java Test
                    </button>
                    <button class="btn-secondary" onclick="demoPromptTesting('javascript')">
                        📜 JS Test
                    </button>
                    <button class="btn-secondary" onclick="demoPromptTesting('python')">
                        🐍 Python Test
                    </button>
                </div>
            </div>
        `;

        testLabForm.appendChild(demoSection);
    }
}

// Initialize demo functions
document.addEventListener('DOMContentLoaded', () => {
    // Add a small delay to ensure other components are loaded
    setTimeout(addDemoButtons, 1000);
});

// Export functions for global use
window.demoAICodeReview = demoAICodeReview;
window.demoPromptTesting = demoPromptTesting;
window.demoStructuredResult = demoStructuredResult;

====================
syntax-highlighter.js
/**
 * Advanced Syntax Highlighting System
 * Provides syntax highlighting for multiple programming languages
 * with consistent formatting and clear visual structure
 */

// Language configurations with syntax patterns
const LANGUAGE_CONFIGS = {
    javascript: {
        name: 'JavaScript',
        icon: '📜',
        keywords: [
            'const', 'let', 'var', 'function', 'return', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break',
            'continue', 'try', 'catch', 'finally', 'throw', 'new', 'this', 'super', 'class', 'extends', 'import',
            'export', 'default', 'from', 'async', 'await', 'typeof', 'instanceof', 'in', 'of', 'delete', 'void',
            'null', 'undefined', 'true', 'false'
        ],
        types: ['Object', 'Array', 'String', 'Number', 'Boolean', 'Function', 'Promise', 'Date', 'RegExp'],
        operators: ['=>', '===', '!==', '==', '!=', '<=', '>=', '<', '>', '&&', '||', '!', '+', '-', '*', '/', '%', '**'],
        brackets: ['(', ')', '[', ']', '{', '}'],
        strings: ['"', "'", '`'],
        comments: ['//', '/*', '*/']
    },
    java: {
        name: 'Java',
        icon: '☕',
        keywords: [
            'public', 'private', 'protected', 'static', 'final', 'abstract', 'class', 'interface', 'enum', 'extends',
            'implements', 'import', 'package', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break',
            'continue', 'return', 'try', 'catch', 'finally', 'throw', 'throws', 'new', 'this', 'super', 'null',
            'true', 'false', 'instanceof', 'synchronized', 'volatile', 'transient', 'native', 'strictfp'
        ],
        types: ['int', 'long', 'short', 'byte', 'double', 'float', 'boolean', 'char', 'String', 'Object', 'List', 'Map', 'Set'],
        annotations: ['@Override', '@Autowired', '@Component', '@Service', '@Repository', '@Controller', '@RestController',
                     '@RequestMapping', '@GetMapping', '@PostMapping', '@PutMapping', '@DeleteMapping', '@PathVariable',
                     '@RequestBody', '@RequestParam', '@ResponseBody', '@Entity', '@Table', '@Column', '@Id'],
        operators: ['==', '!=', '<=', '>=', '<', '>', '&&', '||', '!', '+', '-', '*', '/', '%'],
        brackets: ['(', ')', '[', ']', '{', '}'],
        strings: ['"', "'"],
        comments: ['//', '/*', '*/']
    },
    python: {
        name: 'Python',
        icon: '🐍',
        keywords: [
            'def', 'class', 'if', 'elif', 'else', 'for', 'while', 'in', 'not', 'and', 'or', 'is', 'return',
            'break', 'continue', 'pass', 'try', 'except', 'finally', 'raise', 'with', 'as', 'import', 'from',
            'global', 'nonlocal', 'lambda', 'yield', 'async', 'await', 'True', 'False', 'None'
        ],
        types: ['int', 'float', 'str', 'bool', 'list', 'dict', 'tuple', 'set', 'frozenset'],
        decorators: ['@app.route', '@property', '@staticmethod', '@classmethod', '@dataclass'],
        operators: ['==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'not', '+', '-', '*', '/', '//', '%', '**'],
        brackets: ['(', ')', '[', ']', '{', '}'],
        strings: ['"', "'", '"""', "'''"],
        comments: ['#']
    },
    csharp: {
        name: 'C#',
        icon: '#️⃣',
        keywords: [
            'public', 'private', 'protected', 'internal', 'static', 'readonly', 'const', 'abstract', 'virtual',
            'override', 'sealed', 'class', 'interface', 'struct', 'enum', 'namespace', 'using', 'if', 'else',
            'for', 'foreach', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'try', 'catch',
            'finally', 'throw', 'new', 'this', 'base', 'null', 'true', 'false', 'is', 'as', 'typeof', 'sizeof',
            'async', 'await', 'var', 'dynamic', 'out', 'ref', 'params', 'in'
        ],
        types: ['int', 'long', 'short', 'byte', 'double', 'float', 'decimal', 'bool', 'char', 'string', 'object',
                'List', 'Dictionary', 'Array', 'Task', 'ActionResult', 'IActionResult'],
        attributes: ['[HttpGet]', '[HttpPost]', '[HttpPut]', '[HttpDelete]', '[Route]', '[ApiController]', '[Authorize]'],
        operators: ['==', '!=', '<=', '>=', '<', '>', '&&', '||', '!', '+', '-', '*', '/', '%', '??', '?.'],
        brackets: ['(', ')', '[', ']', '{', '}'],
        strings: ['"', "'", '@"'],
        comments: ['//', '/*', '*/']
    },
    typescript: {
        name: 'TypeScript',
        icon: '🔷',
        keywords: [
            'const', 'let', 'var', 'function', 'return', 'if', 'else', 'for', 'while', 'do', 'switch', 'case',
            'break', 'continue', 'try', 'catch', 'finally', 'throw', 'new', 'this', 'super', 'class', 'extends',
            'implements', 'interface', 'type', 'import', 'export', 'default', 'from', 'async', 'await', 'typeof',
            'instanceof', 'in', 'of', 'delete', 'void', 'null', 'undefined', 'true', 'false', 'public', 'private',
            'protected', 'readonly', 'static', 'abstract', 'enum', 'namespace', 'module', 'declare'
        ],
        types: ['string', 'number', 'boolean', 'object', 'any', 'unknown', 'never', 'void', 'Array', 'Promise',
                'Map', 'Set', 'Date', 'RegExp', 'Function', 'Record', 'Partial', 'Required', 'Pick', 'Omit'],
        operators: ['=>', '===', '!==', '==', '!=', '<=', '>=', '<', '>', '&&', '||', '!', '+', '-', '*', '/', '%', '**'],
        brackets: ['(', ')', '[', ']', '{', '}', '<', '>'],
        strings: ['"', "'", '`'],
        comments: ['//', '/*', '*/']
    }
};

// Theme configurations
const SYNTAX_THEMES = {
    dark: {
        background: '#1e1e1e',
        foreground: '#d4d4d4',
        keyword: '#569cd6',
        string: '#ce9178',
        comment: '#6a9955',
        number: '#b5cea8',
        operator: '#d4d4d4',
        bracket: '#ffd700',
        type: '#4ec9b0',
        annotation: '#dcdcaa',
        function: '#dcdcaa',
        variable: '#9cdcfe'
    },
    light: {
        background: '#ffffff',
        foreground: '#000000',
        keyword: '#0000ff',
        string: '#a31515',
        comment: '#008000',
        number: '#098658',
        operator: '#000000',
        bracket: '#000000',
        type: '#267f99',
        annotation: '#795e26',
        function: '#795e26',
        variable: '#001080'
    },
    monokai: {
        background: '#272822',
        foreground: '#f8f8f2',
        keyword: '#f92672',
        string: '#e6db74',
        comment: '#75715e',
        number: '#ae81ff',
        operator: '#f92672',
        bracket: '#f8f8f2',
        type: '#66d9ef',
        annotation: '#a6e22e',
        function: '#a6e22e',
        variable: '#f8f8f2'
    }
};

// Current theme (can be changed dynamically)
let currentTheme = 'dark';

// Syntax highlighting class
class SyntaxHighlighter {
    constructor(theme = 'dark') {
        this.theme = SYNTAX_THEMES[theme] || SYNTAX_THEMES.dark;
        this.currentTheme = theme;
    }

    // Main highlighting function
    highlight(code, language) {
        if (!code || !language) return this.escapeHtml(code || '');

        const config = LANGUAGE_CONFIGS[language.toLowerCase()];
        if (!config) return this.escapeHtml(code);

        let highlightedCode = this.escapeHtml(code);

        // Apply highlighting in order of precedence
        highlightedCode = this.highlightComments(highlightedCode, config);
        highlightedCode = this.highlightStrings(highlightedCode, config);
        highlightedCode = this.highlightNumbers(highlightedCode);
        highlightedCode = this.highlightAnnotations(highlightedCode, config);
        highlightedCode = this.highlightKeywords(highlightedCode, config);
        highlightedCode = this.highlightTypes(highlightedCode, config);
        highlightedCode = this.highlightOperators(highlightedCode, config);
        highlightedCode = this.highlightBrackets(highlightedCode, config);
        highlightedCode = this.highlightFunctions(highlightedCode);

        return highlightedCode;
    }

    // Escape HTML characters
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Highlight comments
    highlightComments(code, config) {
        if (!config.comments) return code;

        // Single-line comments
        if (config.comments.includes('//')) {
            code = code.replace(/(\/\/.*?)(?=\n|$)/g,
                `<span class="syntax-comment">$1</span>`);
        }

        if (config.comments.includes('#')) {
            code = code.replace(/(#.*?)(?=\n|$)/g,
                `<span class="syntax-comment">$1</span>`);
        }

        // Multi-line comments
        if (config.comments.includes('/*')) {
            code = code.replace(/(\/\*[\s\S]*?\*\/)/g,
                `<span class="syntax-comment">$1</span>`);
        }

        return code;
    }

    // Highlight strings
    highlightStrings(code, config) {
        if (!config.strings) return code;

        config.strings.forEach(quote => {
            if (quote === '`') {
                // Template literals
                code = code.replace(new RegExp(`(\`(?:[^\`\\\\]|\\\\.)*\`)`, 'g'),
                    `<span class="syntax-string">$1</span>`);
            } else if (quote === '"""' || quote === "'''") {
                // Multi-line strings (Python)
                const escaped = quote.replace(/"/g, '\\"').replace(/'/g, "\\'");
                code = code.replace(new RegExp(`(${escaped}[\\s\\S]*?${escaped})`, 'g'),
                    `<span class="syntax-string">$1</span>`);
            } else {
                // Regular strings
                const escaped = quote === '"' ? '\\"' : "\\'";
                code = code.replace(new RegExp(`(${quote}(?:[^${quote}\\\\]|\\\\.)*${quote})`, 'g'),
                    `<span class="syntax-string">$1</span>`);
            }
        });

        return code;
    }

    // Highlight numbers
    highlightNumbers(code) {
        code = code.replace(/\b(\d+\.?\d*)\b/g, `<span class="syntax-number">$1</span>`);
        return code;
    }

    // Highlight annotations/decorators
    highlightAnnotations(code, config) {
        if (config.annotations) {
            config.annotations.forEach(annotation => {
                const escaped = annotation.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                code = code.replace(new RegExp(`\\b(${escaped})\\b`, 'g'),
                    `<span class="syntax-annotation">$1</span>`);
            });
        }

        if (config.decorators) {
            config.decorators.forEach(decorator => {
                const escaped = decorator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                code = code.replace(new RegExp(`\\b(${escaped})\\b`, 'g'),
                    `<span class="syntax-annotation">$1</span>`);
            });
        }

        if (config.attributes) {
            config.attributes.forEach(attribute => {
                const escaped = attribute.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                code = code.replace(new RegExp(`(${escaped})`, 'g'),
                    `<span class="syntax-annotation">$1</span>`);
            });
        }

        return code;
    }

    // Highlight keywords
    highlightKeywords(code, config) {
        if (!config.keywords) return code;

        config.keywords.forEach(keyword => {
            code = code.replace(new RegExp(`\\b(${keyword})\\b`, 'g'),
                `<span class="syntax-keyword">$1</span>`);
        });

        return code;
    }

    // Highlight types
    highlightTypes(code, config) {
        if (!config.types) return code;

        config.types.forEach(type => {
            code = code.replace(new RegExp(`\\b(${type})\\b`, 'g'),
                `<span class="syntax-type">$1</span>`);
        });

        return code;
    }

    // Highlight operators
    highlightOperators(code, config) {
        if (!config.operators) return code;

        // Sort by length (longest first) to avoid partial matches
        const sortedOperators = [...config.operators].sort((a, b) => b.length - a.length);

        sortedOperators.forEach(operator => {
            const escaped = operator.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            code = code.replace(new RegExp(`(${escaped})`, 'g'),
                `<span class="syntax-operator">$1</span>`);
        });

        return code;
    }

    // Highlight brackets
    highlightBrackets(code, config) {
        if (!config.brackets) return code;

        config.brackets.forEach(bracket => {
            const escaped = bracket.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            code = code.replace(new RegExp(`(${escaped})`, 'g'),
                `<span class="syntax-bracket">$1</span>`);
        });

        return code;
    }

    // Highlight function names
    highlightFunctions(code) {
        // Function definitions and calls
        code = code.replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\s*(?=\()/g,
            `<span class="syntax-function">$1</span>`);

        return code;
    }

    // Generate styled HTML wrapper
    wrapInContainer(highlightedCode, language, options = {}) {
        const config = LANGUAGE_CONFIGS[language.toLowerCase()];
        const languageName = config ? config.name : language.toUpperCase();
        const languageIcon = config ? config.icon : '📄';

        const showLineNumbers = options.showLineNumbers !== false;
        const showLanguage = options.showLanguage !== false;
        const copyButton = options.copyButton !== false;

        let lineNumbers = '';
        if (showLineNumbers) {
            const lines = highlightedCode.split('\n');
            lineNumbers = lines.map((_, index) => index + 1).join('\n');
        }

        return `
            <div class="syntax-container ${this.currentTheme}-theme">
                ${showLanguage || copyButton ? `
                <div class="syntax-header">
                    ${showLanguage ? `
                    <div class="syntax-language">
                        <span class="language-icon">${languageIcon}</span>
                        <span class="language-name">${languageName}</span>
                    </div>
                    ` : ''}
                    ${copyButton ? `
                    <button class="syntax-copy-btn" onclick="copySyntaxCode(this)" title="Copy Code">
                        <span class="copy-icon">📋</span>
                        <span class="copy-text">Copy</span>
                    </button>
                    ` : ''}
                </div>
                ` : ''}
                <div class="syntax-content">
                    ${showLineNumbers ? `
                    <div class="syntax-line-numbers">
                        <pre><code>${lineNumbers}</code></pre>
                    </div>
                    ` : ''}
                    <div class="syntax-code">
                        <pre><code>${highlightedCode}</code></pre>
                    </div>
                </div>
            </div>
        `;
    }

    // Change theme
    setTheme(themeName) {
        if (SYNTAX_THEMES[themeName]) {
            this.theme = SYNTAX_THEMES[themeName];
            this.currentTheme = themeName;
        }
    }

    // Get available themes
    getAvailableThemes() {
        return Object.keys(SYNTAX_THEMES);
    }
}

// Global instance
const syntaxHighlighter = new SyntaxHighlighter('dark');

// Utility functions for integration
function highlightCode(code, language, options = {}) {
    return syntaxHighlighter.highlight(code, language);
}

function highlightCodeWithWrapper(code, language, options = {}) {
    const highlighted = syntaxHighlighter.highlight(code, language);
    return syntaxHighlighter.wrapInContainer(highlighted, language, options);
}

function copySyntaxCode(button) {
    const container = button.closest('.syntax-container');
    const codeElement = container.querySelector('.syntax-code code');

    if (codeElement) {
        const code = codeElement.textContent;
        navigator.clipboard.writeText(code).then(() => {
            const originalText = button.querySelector('.copy-text').textContent;
            button.querySelector('.copy-text').textContent = 'Copied!';
            button.querySelector('.copy-icon').textContent = '✅';

            setTimeout(() => {
                button.querySelector('.copy-text').textContent = originalText;
                button.querySelector('.copy-icon').textContent = '📋';
            }, 2000);
        }).catch(() => {
            // Fallback for older browsers
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(codeElement);
            selection.removeAllRanges();
            selection.addRange(range);
            document.execCommand('copy');
            selection.removeAllRanges();
        });
    }
}

// Change syntax theme globally
function changeSyntaxTheme(themeName) {
    syntaxHighlighter.setTheme(themeName);

    // Update all existing syntax containers
    document.querySelectorAll('.syntax-container').forEach(container => {
        container.className = container.className.replace(/\w+-theme/, `${themeName}-theme`);
    });
}

// Export for global use
window.highlightCode = highlightCode;
window.highlightCodeWithWrapper = highlightCodeWithWrapper;
window.copySyntaxCode = copySyntaxCode;
window.changeSyntaxTheme = changeSyntaxTheme;
window.syntaxHighlighter = syntaxHighlighter;

-----------------------------------

teams.js
/**
 * Teams Management
 * Handles CRUD operations for teams with search and filtering
 */

class TeamsManager {
    constructor() {
        this.teams = [];
        this.filteredTeams = [];
        this.searchTimeout = null;
        this.currentTeam = null;
    }

    /**
     * Initialize teams management
     */
    async init() {
        this.setupEventListeners();
        await this.loadTeams();
    }

    /**
     * Setup event listeners
     */
    setupEventListeners() {
        // Search functionality
        const searchInput = document.getElementById('team-search');
        if (searchInput) {
            searchInput.addEventListener('input', () => {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(() => this.searchTeams(), 300);
            });
        }

        // Filter functionality
        const statusFilter = document.getElementById('team-status-filter');
        if (statusFilter) {
            statusFilter.addEventListener('change', () => this.filterTeams());
        }

        // Team form submission
        const teamForm = document.getElementById('team-form');
        if (teamForm) {
            teamForm.addEventListener('submit', (e) => this.handleTeamSubmit(e));
        }
    }

    /**
     * Load teams from backend
     */
    async loadTeams() {
        console.log('TeamsManager: loadTeams() called');
        try {
            console.log('TeamsManager: Showing loading indicator');
            showLoading();

            // Try to load teams from API
            try {
                console.log('TeamsManager: Calling teamApi.getAll()');
                console.log('TeamsManager: teamApi object:', typeof teamApi !== 'undefined' ? teamApi : 'UNDEFINED');

                const response = await teamApi.getAll();
                console.log('TeamsManager: API response received:', response);
                this.teams = response || [];
                console.log('TeamsManager: Teams loaded, count:', this.teams.length);
            } catch (error) {
                console.warn('TeamsManager: Teams API failed:', error);
                console.error('TeamsManager: Full error details:', error);
                this.teams = [];
            }

            this.filteredTeams = [...this.teams];
            console.log('TeamsManager: Filtered teams set, count:', this.filteredTeams.length);

            console.log('TeamsManager: Calling renderTeams()');
            this.renderTeams();
            console.log('TeamsManager: renderTeams() completed');

        } catch (error) {
            console.error('TeamsManager: Failed to load teams:', error);
            showError('Failed to load teams');
        } finally {
            console.log('TeamsManager: Hiding loading indicator');
            hideLoading();
        }
    }


    /**
     * Render teams grid
     */
    renderTeams() {
        console.log('TeamsManager: renderTeams() called');
        const teamsGrid = document.getElementById('teams-grid');
        console.log('TeamsManager: teams-grid element:', teamsGrid);

        if (!teamsGrid) {
            console.error('TeamsManager: teams-grid element not found!');
            return;
        }

        console.log('TeamsManager: Filtered teams count for rendering:', this.filteredTeams.length);
        if (this.filteredTeams.length === 0) {
            console.log('TeamsManager: No teams to display, showing empty state');
            const emptyStateHtml = this.renderEmptyState();
            console.log('TeamsManager: Empty state HTML generated');
            teamsGrid.innerHTML = emptyStateHtml;
            return;
        }

        console.log('TeamsManager: Rendering team cards for teams:', this.filteredTeams.map(t => t.name));
        const teamCardsHtml = this.filteredTeams.map(team => this.renderTeamCard(team)).join('');
        console.log('TeamsManager: Team cards HTML generated, length:', teamCardsHtml.length);
        teamsGrid.innerHTML = teamCardsHtml;
        console.log('TeamsManager: Team cards inserted into DOM');
    }

    /**
     * Render individual team card
     */
    renderTeamCard(team) {
        const createdDate = new Date(team.createdDate).toLocaleDateString();
        const statusClass = team.active ? 'status-active' : 'status-inactive';
        const statusText = team.active ? 'Active' : 'Inactive';

        return `
            <div class="team-card" data-team-id="${team.id}">
                <div class="team-header">
                    <h3 class="team-name">${this.escapeHtml(team.name)}</h3>
                    <span class="team-status ${statusClass}">${statusText}</span>
                </div>

                <div class="team-description">
                    ${team.description ? this.escapeHtml(team.description) : 'No description provided'}
                </div>

                <div class="team-meta">
                    ${team.teamLeadEmail ? `
                        <div class="meta-item">
                            <span class="meta-icon">👤</span>
                            <span>Lead: ${this.escapeHtml(team.teamLeadEmail)}</span>
                        </div>
                    ` : ''}

                    <div class="meta-item">
                        <span class="meta-icon">📂</span>
                        <span>${team.projectsCount || 0} project${(team.projectsCount || 0) !== 1 ? 's' : ''}</span>
                    </div>

                    <div class="meta-item">
                        <span class="meta-icon">📅</span>
                        <span>Created ${createdDate}</span>
                    </div>

                    ${team.notificationEmails ? `
                        <div class="meta-item">
                            <span class="meta-icon">📧</span>
                            <span>${team.notificationEmails.split(',').length} notification email${team.notificationEmails.split(',').length !== 1 ? 's' : ''}</span>
                        </div>
                    ` : ''}
                </div>

                <div class="team-actions">
                    <button class="action-btn-small edit" onclick="editTeam(${team.id})" title="Edit Team">
                        ✏️ Edit
                    </button>
                    <button class="action-btn-small" onclick="viewTeamProjects(${team.id})" title="View Projects">
                        📂 Projects
                    </button>
                    <button class="action-btn-small delete" onclick="deleteTeam(${team.id})" title="Delete Team">
                        🗑️ Delete
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * Render empty state
     */
    renderEmptyState() {
        const searchInput = document.getElementById('team-search');
        const statusFilter = document.getElementById('team-status-filter');

        const hasSearch = searchInput?.value;
        const hasFilter = statusFilter?.value !== 'all';

        console.log('TeamsManager: renderEmptyState() - searchInput:', searchInput);
        console.log('TeamsManager: renderEmptyState() - statusFilter:', statusFilter);
        console.log('TeamsManager: renderEmptyState() - hasSearch:', hasSearch);
        console.log('TeamsManager: renderEmptyState() - hasFilter:', hasFilter);

        if (hasSearch || hasFilter) {
            console.log('TeamsManager: Showing "No Teams Found" due to search/filter');
            return `
                <div class="team-card-placeholder">
                    <div class="placeholder-content">
                        <div class="placeholder-icon">🔍</div>
                        <h3>No Teams Found</h3>
                        <p>No teams match your current search or filter criteria</p>
                        <button class="btn-secondary" onclick="clearTeamFilters()">Clear Filters</button>
                    </div>
                </div>
            `;
        }

        console.log('TeamsManager: Showing "No Teams Yet" placeholder');
        return `
            <div class="team-card-placeholder">
                <div class="placeholder-content">
                    <div class="placeholder-icon">👥</div>
                    <h3>No Teams Yet</h3>
                    <p>Create your first team to start managing your development projects</p>
                    <button class="btn-primary" onclick="showTeamModal()">Create First Team</button>
                </div>
            </div>
        `;
    }

    /**
     * Search teams
     */
    searchTeams() {
        const searchTerm = document.getElementById('team-search')?.value.toLowerCase() || '';
        this.applyFilters(searchTerm);
    }

    /**
     * Filter teams by status
     */
    filterTeams() {
        const searchTerm = document.getElementById('team-search')?.value.toLowerCase() || '';
        this.applyFilters(searchTerm);
    }

    /**
     * Apply search and filter criteria
     */
    applyFilters(searchTerm) {
        const statusFilter = document.getElementById('team-status-filter')?.value || 'all';

        this.filteredTeams = this.teams.filter(team => {
            // Search filter
            const matchesSearch = !searchTerm ||
                team.name.toLowerCase().includes(searchTerm) ||
                (team.description && team.description.toLowerCase().includes(searchTerm)) ||
                (team.teamLeadEmail && team.teamLeadEmail.toLowerCase().includes(searchTerm));

            // Status filter
            const matchesStatus = statusFilter === 'all' ||
                (statusFilter === 'active' && team.active) ||
                (statusFilter === 'inactive' && !team.active);

            return matchesSearch && matchesStatus;
        });

        this.renderTeams();
    }

    /**
     * Handle team form submission
     */
    async handleTeamSubmit(event) {
        event.preventDefault();
        console.log('TeamsManager: handleTeamSubmit called');

        const formData = new FormData(event.target);
        const teamData = {
            name: formData.get('team-name') || document.getElementById('team-name').value,
            description: formData.get('team-description') || document.getElementById('team-description').value,
            teamLeadEmail: formData.get('team-lead-email') || document.getElementById('team-lead-email').value,
            notificationEmails: formData.get('team-notification-emails') || document.getElementById('team-notification-emails').value,
            active: document.getElementById('team-active').checked
        };

        console.log('TeamsManager: Team data prepared:', teamData);

        // Validation
        if (!teamData.name || teamData.name.trim().length === 0) {
            showError('Team name is required');
            return;
        }

        if (teamData.teamLeadEmail && !this.isValidEmail(teamData.teamLeadEmail)) {
            showError('Please enter a valid team lead email');
            return;
        }

        try {
            const teamId = document.getElementById('team-id').value;
            console.log('TeamsManager: Team ID from form:', teamId);

            if (teamId) {
                console.log('TeamsManager: Updating existing team');
                await this.updateTeam(teamId, teamData);
            } else {
                console.log('TeamsManager: Creating new team');
                await this.createTeam(teamData);
            }

            console.log('TeamsManager: Team operation completed, hiding modal');
            hideTeamModal();

            console.log('TeamsManager: About to call loadTeams() to refresh list');
            await this.loadTeams();
            console.log('TeamsManager: loadTeams() completed after team save');

        } catch (error) {
            console.error('Failed to save team:', error);
            showError('Failed to save team');
        }
    }

    /**
     * Create new team
     */
    async createTeam(teamData) {
        try {
            console.log('TeamsManager: Calling teamApi.create with data:', teamData);
            const result = await teamApi.create(teamData);
            console.log('TeamsManager: teamApi.create returned:', result);
            showSuccess('Team created successfully');
        } catch (error) {
            console.error('TeamsManager: teamApi.create failed:', error);
            // Fallback: add to local mock data
            const newTeam = {
                id: Date.now(),
                ...teamData,
                createdDate: new Date().toISOString(),
                lastModified: new Date().toISOString(),
                projectsCount: 0
            };
            console.log('TeamsManager: Adding to local mock data:', newTeam);
            this.teams.push(newTeam);
            showSuccess('Team created successfully');
        }
    }

    /**
     * Update existing team
     */
    async updateTeam(teamId, teamData) {
        try {
            await teamApi.update(teamId, teamData);
            showSuccess('Team updated successfully');
        } catch (error) {
            // Fallback: update in local mock data
            const teamIndex = this.teams.findIndex(t => t.id == teamId);
            if (teamIndex !== -1) {
                this.teams[teamIndex] = {
                    ...this.teams[teamIndex],
                    ...teamData,
                    lastModified: new Date().toISOString()
                };
                showSuccess('Team updated successfully');
            } else {
                throw error;
            }
        }
    }

    /**
     * Delete team
     */
    async deleteTeam(teamId) {
        try {
            await teamApi.delete(teamId);
            showSuccess('Team deleted successfully');
            await this.loadTeams();
        } catch (error) {
            // Fallback: remove from local mock data
            this.teams = this.teams.filter(t => t.id != teamId);
            this.filteredTeams = this.filteredTeams.filter(t => t.id != teamId);
            this.renderTeams();
            showSuccess('Team deleted successfully');
        }
    }

    /**
     * Get team by ID
     */
    getTeamById(teamId) {
        return this.teams.find(team => team.id == teamId);
    }

    /**
     * Utility function to escape HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * Validate email format
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
}

// Global teams manager instance
window.teamsManager = new TeamsManager();

// Global functions for UI interactions
window.showTeamModal = function(teamId = null) {
    const modal = document.getElementById('team-modal');
    const form = document.getElementById('team-form');
    const title = document.getElementById('team-modal-title');

    if (!modal || !form) return;

    // Reset form
    form.reset();
    document.getElementById('team-id').value = '';

    if (teamId) {
        // Edit mode
        const team = window.teamsManager.getTeamById(teamId);
        if (team) {
            title.textContent = 'Edit Team';
            document.getElementById('team-id').value = team.id;
            document.getElementById('team-name').value = team.name;
            document.getElementById('team-description').value = team.description || '';
            document.getElementById('team-lead-email').value = team.teamLeadEmail || '';
            document.getElementById('team-notification-emails').value = team.notificationEmails || '';
            document.getElementById('team-active').checked = team.active;
        }
    } else {
        // Create mode
        title.textContent = 'Add New Team';
        document.getElementById('team-active').checked = true;
    }

    modal.classList.remove('hidden');
};

window.hideTeamModal = function() {
    const modal = document.getElementById('team-modal');
    if (modal) {
        modal.classList.add('hidden');
    }
};

window.editTeam = function(teamId) {
    showTeamModal(teamId);
};

window.deleteTeam = function(teamId) {
    const team = window.teamsManager.getTeamById(teamId);
    if (!team) return;

    showConfirm(
        `Are you sure you want to delete the team "${team.name}"?`,
        async () => {
            await window.teamsManager.deleteTeam(teamId);
        }
    );
};

window.viewTeamProjects = function(teamId) {
    // Switch to projects tab and filter by team
    switchTab('projects');
    setTimeout(() => {
        const projectTeamFilter = document.getElementById('project-team-filter');
        if (projectTeamFilter) {
            projectTeamFilter.value = teamId;
            if (window.projectsManager && typeof window.projectsManager.filterProjects === 'function') {
                window.projectsManager.filterProjects();
            }
        }
    }, 300);
};

window.clearTeamFilters = function() {
    document.getElementById('team-search').value = '';
    document.getElementById('team-status-filter').value = 'all';
    window.teamsManager.applyFilters('');
};

// Initialize when DOM is ready
console.log('Teams.js: Setting up DOMContentLoaded listener');

// Check if DOM is already loaded
if (document.readyState === 'loading') {
    console.log('Teams.js: DOM still loading, adding event listener');
    document.addEventListener('DOMContentLoaded', initializeTeamsManager);
} else {
    console.log('Teams.js: DOM already loaded, initializing immediately');
    initializeTeamsManager();
}

function initializeTeamsManager() {
    console.log('Teams.js: initializeTeamsManager called');
    const teamsTab = document.getElementById('teams-tab');
    console.log('Teams.js: teams-tab element:', teamsTab);

    if (teamsTab) {
        console.log('Teams.js: Initializing teamsManager...');
        window.teamsManager.init().then(() => {
            console.log('Teams.js: teamsManager initialization completed');
        }).catch(error => {
            console.error('Teams.js: teamsManager initialization failed:', error);
        });
    } else {
        console.error('Teams.js: teams-tab element not found!');
    }
}

----------------------------
ui.js


/*
 * UI helper functions for showing/hiding elements and updating the UI
 */

// Utility to get element by ID
function el(id) {
    return document.getElementById(id);
}

// Show loading indicator
function showLoading() {
    const loading = el('loading');
    if (loading) loading.classList.remove('hidden');
}

// Hide loading indicator
function hideLoading() {
    const loading = el('loading');
    if (loading) loading.classList.add('hidden');
}

// Show error message
function showError(message) {
    const error = el('error-message');
    const text = error ? error.querySelector('.error-text') : null;
    if (error && text) {
        text.textContent = message || MESSAGES.ERROR_GENERIC;
        error.classList.remove('hidden');
    }
}

// Hide error message
function hideError() {
    const error = el('error-message');
    if (error) error.classList.add('hidden');
}

// Show success message
function showSuccess(message) {
    const success = el('success-message');
    const text = success ? success.querySelector('.success-text') : null;
    if (success && text) {
        text.textContent = message || MESSAGES.SAVE_SUCCESS;
        success.classList.remove('hidden');
    }
}

// Hide success message
function hideSuccess() {
    const success = el('success-message');
    if (success) success.classList.add('hidden');
}

// Simple debounce function
function debounce(func, delay) {
    let timeoutId;
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

// Switch between tabs
function switchTab(tabName) {
    // Hide all tabs
    const allTabs = document.querySelectorAll('.tab-content');
    allTabs.forEach(tab => {
        tab.classList.remove('active');
    });

    // Show the selected tab
    const selectedTab = el(`${tabName}-tab`);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }

    // Update tab button states
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-tab') === tabName) {
            btn.classList.add('active');
        }
    });

    // Initialize AI features when AI tabs are shown
    if (tabName === 'test-lab' || tabName === 'ai-review') {
        if (typeof initializeAIFeatures === 'function') {
            initializeAIFeatures();
        }
    }

    // Initialize Project Analyzer when tab is shown
    if (tabName === 'project-analyzer') {
        if (typeof initializeProjectAnalyzer === 'function') {
            initializeProjectAnalyzer();
        }
    }

    // Initialize Code Review submission manager when tab is shown
    if (tabName === 'code-review') {
        if (window.codeReviewSubmissionManager && typeof window.codeReviewSubmissionManager.init === 'function') {
            console.log('Switching to Code Review tab - initializing submission manager');
            window.codeReviewSubmissionManager.init();
        } else {
            console.warn('Code Review submission manager not available');
        }
    }
}

// Alternative function name for compatibility
function showTab(tabName) {
    console.log(`UI: Showing tab: ${tabName}`);
    switchTab(tabName);
}

// Export UI functions to global scope
window.el = el;
window.showLoading = showLoading;
window.hideLoading = hideLoading;
window.showError = showError;
window.hideError = hideError;
window.showSuccess = showSuccess;
window.hideSuccess = hideSuccess;
window.debounce = debounce;
window.switchTab = switchTab;
window.showTab = showTab;
--------------------------------


utils.js


/**
 * Utility functions for the Code Review Manager
 * Contains common helper functions and UI utilities
 */

// Note: showLoading, hideLoading, showSuccess, showError are defined in ui.js
// to work with the existing HTML structure

/**
 * Show notification
 * @param {string} message - Message to display
 * @param {string} type - Type of notification (success, error, info, warning)
 */
function showNotification(message, type = 'info') {
    // Create notification element if it doesn't exist
    let notificationContainer = document.getElementById('notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notification-container';
        notificationContainer.className = 'notification-container';
        document.body.appendChild(notificationContainer);
    }

    // Create notification
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;

    const icon = getNotificationIcon(type);
    notification.innerHTML = `
        <span class="notification-icon">${icon}</span>
        <span class="notification-message">${message}</span>
        <button class="notification-close" onclick="closeNotification(this)">×</button>
    `;

    notificationContainer.appendChild(notification);

    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);

    // Add slide-in animation
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
}

/**
 * Get notification icon based on type
 * @param {string} type - Notification type
 * @returns {string} Icon character
 */
function getNotificationIcon(type) {
    const icons = {
        success: '✅',
        error: '❌',
        warning: '⚠️',
        info: 'ℹ️'
    };
    return icons[type] || icons.info;
}

/**
 * Close notification
 * @param {HTMLElement} button - Close button element
 */
function closeNotification(button) {
    const notification = button.parentElement;
    if (notification) {
        notification.remove();
    }
}

/**
 * Show confirmation dialog
 * @param {string} message - Confirmation message
 * @param {function} onConfirm - Callback when user confirms
 * @param {function} onCancel - Callback when user cancels (optional)
 */
function showConfirm(message, onConfirm, onCancel = null) {
    // Create modal backdrop
    const backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop';
    backdrop.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    `;

    // Create confirmation dialog
    const dialog = document.createElement('div');
    dialog.className = 'confirm-dialog';
    dialog.style.cssText = `
        background: white;
        border-radius: 8px;
        padding: 24px;
        max-width: 400px;
        width: 90%;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    `;

    dialog.innerHTML = `
        <div style="margin-bottom: 20px;">
            <h3 style="margin: 0 0 10px 0; color: #333;">Confirm Action</h3>
            <p style="margin: 0; color: #666; line-height: 1.4;">${message}</p>
        </div>
        <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button id="confirm-cancel" style="
                padding: 8px 16px;
                border: 1px solid #ddd;
                background: white;
                border-radius: 4px;
                cursor: pointer;
                color: #666;
            ">Cancel</button>
            <button id="confirm-ok" style="
                padding: 8px 16px;
                border: none;
                background: #dc3545;
                color: white;
                border-radius: 4px;
                cursor: pointer;
            ">Confirm</button>
        </div>
    `;

    backdrop.appendChild(dialog);
    document.body.appendChild(backdrop);

    // Handle button clicks
    dialog.querySelector('#confirm-ok').onclick = () => {
        backdrop.remove();
        if (onConfirm) onConfirm();
    };

    dialog.querySelector('#confirm-cancel').onclick = () => {
        backdrop.remove();
        if (onCancel) onCancel();
    };

    // Close on backdrop click
    backdrop.onclick = (e) => {
        if (e.target === backdrop) {
            backdrop.remove();
            if (onCancel) onCancel();
        }
    };
}

// Note: switchTab function is defined in ui.js

/**
 * Escape HTML to prevent XSS
 * @param {string} text - Text to escape
 * @returns {string} Escaped text
 */
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * Validate email format
 * @param {string} email - Email to validate
 * @returns {boolean} True if valid email
 */
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

/**
 * Format date for display
 * @param {string|Date} date - Date to format
 * @returns {string} Formatted date
 */
function formatDate(date) {
    if (!date) return 'N/A';
    try {
        return new Date(date).toLocaleDateString();
    } catch {
        return 'Invalid Date';
    }
}

/**
 * Format relative time (e.g., "2 hours ago")
 * @param {string|Date} date - Date to format
 * @returns {string} Relative time string
 */
function formatRelativeTime(date) {
    if (!date) return 'N/A';

    try {
        const now = new Date();
        const target = new Date(date);
        const diffMs = now - target;
        const diffSeconds = Math.floor(diffMs / 1000);
        const diffMinutes = Math.floor(diffSeconds / 60);
        const diffHours = Math.floor(diffMinutes / 60);
        const diffDays = Math.floor(diffHours / 24);

        if (diffSeconds < 60) return 'Just now';
        if (diffMinutes < 60) return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''} ago`;
        if (diffHours < 24) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
        if (diffDays < 30) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;

        return formatDate(date);
    } catch {
        return 'Invalid Date';
    }
}

// Note: debounce function is defined in ui.js

// Legacy API call function for backwards compatibility
// This is deprecated - use the new API objects in api.js instead
async function apiCall(endpoint, method = 'GET', data = null) {
    console.warn('apiCall() is deprecated. Use the new API objects (teamApi, projectApi, submissionApi) instead.');

    try {
        const url = `${API_CONFIG.BASE_URL}${endpoint}`;
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data && method !== 'GET') {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('API call failed:', error);
        throw error;
    }
}

--------------------------------------
enhanced-ui.css

/* Enhanced UI Styles for Code Review Manager */

/* Dashboard Styles */
.dashboard-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem;
}

.dashboard-header {
    text-align: center;
    margin-bottom: 2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
}

.dashboard-header h1 {
    margin: 0 0 0.5rem 0;
    font-size: 2.5rem;
    font-weight: 700;
}

.dashboard-subtitle {
    margin: 0;
    font-size: 1.1rem;
    opacity: 0.9;
}

.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
}

.dashboard-section {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.dashboard-section:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 48px rgba(0,0,0,0.15);
}

.dashboard-section h2 {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    color: #333;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
}

.stat-card {
    background: white;
    padding: 1rem;
    border-radius: 0.75rem;
    text-align: center;
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
}

.stat-card:hover {
    border-color: #667eea;
    transform: translateY(-2px);
}

.stat-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    display: block;
}

.stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: #667eea;
    margin-bottom: 0.25rem;
}

.stat-label {
    font-size: 0.9rem;
    color: #666;
    font-weight: 500;
}

.activity-list {
    max-height: 300px;
    overflow-y: auto;
}

.activity-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 0.75rem;
    background: white;
    border-radius: 0.5rem;
    margin-bottom: 0.75rem;
    border-left: 4px solid #667eea;
    transition: all 0.2s ease;
}

.activity-item:hover {
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.activity-icon {
    font-size: 1.25rem;
    min-width: 1.5rem;
}

.activity-content {
    flex: 1;
}

.activity-title {
    display: block;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.25rem;
}

.activity-time {
    display: block;
    font-size: 0.85rem;
    color: #666;
}

.quick-actions {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 1rem;
}

.action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    background: white;
    border: 2px solid #f0f0f0;
    border-radius: 0.75rem;
    text-decoration: none;
    color: #333;
    transition: all 0.3s ease;
    cursor: pointer;
    font-size: 0.9rem;
}

.action-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.action-btn.primary {
    border-color: #667eea;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
}

.action-btn.secondary {
    border-color: #48bb78;
    background: linear-gradient(135deg, #48bb78, #38a169);
    color: white;
}

.action-btn.tertiary {
    border-color: #ed8936;
    background: linear-gradient(135deg, #ed8936, #dd6b20);
    color: white;
}

.action-btn.quaternary {
    border-color: #9f7aea;
    background: linear-gradient(135deg, #9f7aea, #805ad5);
    color: white;
}

.action-icon {
    font-size: 1.5rem;
}

/* Enhanced README Presentation Styles */
.readme-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

/* Hero Section */
.readme-hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 2rem;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.readme-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="%23ffffff" opacity="0.1"/><circle cx="25" cy="75" r="1" fill="%23ffffff" opacity="0.05"/><circle cx="75" cy="25" r="1" fill="%23ffffff" opacity="0.05"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grain)"/></svg>') repeat;
    pointer-events: none;
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    margin: 0 auto;
}

.hero-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.2);
    padding: 0.75rem 1.5rem;
    border-radius: 2rem;
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.badge-icon {
    font-size: 1.1rem;
    animation: rocket 3s ease-in-out infinite;
}

@keyframes rocket {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-3px); }
}

.hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 800;
    margin: 0 0 1.5rem 0;
    line-height: 1.2;
}

.title-gradient {
    background: linear-gradient(45deg, #ffffff, #f0f8ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: block;
}

.title-highlight {
    background: linear-gradient(45deg, #ffd700, #ffeb3b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: block;
    margin-top: 0.5rem;
}

.hero-subtitle {
    font-size: 1.3rem;
    margin: 0 0 2rem 0;
    opacity: 0.9;
    line-height: 1.6;
}

.hero-tagline {
    font-size: 1rem;
    font-weight: 500;
    opacity: 0.8;
}

.hero-badges {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 3rem;
}

.tech-badge {
    padding: 0.5rem 1rem;
    border-radius: 1.5rem;
    font-size: 0.85rem;
    font-weight: 600;
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.tech-badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}

.tech-badge.java { background: rgba(237, 117, 88, 0.3); }
.tech-badge.spring { background: rgba(109, 179, 63, 0.3); }
.tech-badge.ai { background: rgba(138, 43, 226, 0.3); }
.tech-badge.status { background: rgba(76, 175, 80, 0.3); }

.hero-metrics {
    display: flex;
    justify-content: center;
    gap: 3rem;
    flex-wrap: wrap;
    position: relative;
    z-index: 2;
}

.metric-item {
    text-align: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
}

.metric-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.2);
}

.metric-number {
    font-size: 2.5rem;
    font-weight: 800;
    color: #ffd700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.metric-label {
    font-size: 0.9rem;
    opacity: 0.9;
    margin-top: 0.5rem;
    font-weight: 500;
}

/* Section Styling */
.readme-section {
    background: rgba(255, 255, 255, 0.95);
    margin: 2rem;
    border-radius: 1.5rem;
    padding: 3rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.section-header {
    text-align: center;
    margin-bottom: 3rem;
}

.section-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #333;
    margin: 0 0 1rem 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
}

.section-icon {
    font-size: 2.2rem;
}

.section-subtitle {
    font-size: 1.1rem;
    color: #666;
    margin: 0;
    font-weight: 500;
}

/* Executive Summary */
.summary-content {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 3rem;
    align-items: center;
}

.summary-lead {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #444;
    margin-bottom: 2rem;
}

.value-props {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.value-prop {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #f8f9ff, #f0f4f8);
    border-radius: 1rem;
    border-left: 4px solid #667eea;
    transition: all 0.3s ease;
}

.value-prop:hover {
    transform: translateX(8px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.prop-icon {
    font-size: 1.5rem;
    min-width: 2rem;
}

.prop-content {
    font-size: 1.1rem;
    color: #333;
}

.platform-preview {
    width: 300px;
    background: #1a1a1a;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.preview-header {
    background: #2d2d2d;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.preview-dots {
    display: flex;
    gap: 0.3rem;
}

.dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    opacity: 0.7;
}

.dot.red { background: #ff5f57; }
.dot.yellow { background: #ffbd2e; }
.dot.green { background: #28ca42; }

.preview-title {
    color: #fff;
    font-size: 0.9rem;
    font-weight: 500;
}

.preview-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.preview-tab {
    padding: 0.75rem 1rem;
    background: #3a3a3a;
    color: #ccc;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.preview-tab.active {
    background: #667eea;
    color: white;
}

.preview-tab:hover {
    background: #4a5568;
}

/* Capabilities Grid */
.capabilities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.capability-card {
    background: white;
    border-radius: 1.5rem;
    padding: 2rem;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.capability-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.capability-card.ai-powered::before { background: linear-gradient(90deg, #8b5cf6, #a855f7); }
.capability-card.enterprise::before { background: linear-gradient(90deg, #059669, #10b981); }
.capability-card.knowledge::before { background: linear-gradient(90deg, #dc2626, #ef4444); }
.capability-card.ux::before { background: linear-gradient(90deg, #7c3aed, #8b5cf6); }

.capability-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
    border-color: #667eea;
}

.card-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.card-icon {
    font-size: 2.5rem;
    opacity: 0.9;
}

.card-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: #333;
    margin: 0;
}

.feature-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.feature-list li {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 0;
    border-bottom: 1px solid #f0f0f0;
    font-size: 0.95rem;
    color: #555;
}

.feature-list li:last-child {
    border-bottom: none;
}

.check {
    color: #10b981;
    font-weight: bold;
    font-size: 1.1rem;
}

/* Performance Metrics */
.metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
}

.metric-card {
    background: white;
    border-radius: 1.5rem;
    padding: 2rem;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
}

.metric-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.metric-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
}

.metric-icon {
    font-size: 2rem;
}

.metric-header h4 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 700;
    color: #333;
}

.metric-comparison {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.metric-bar {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.bar-label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #666;
}

.bar-container {
    position: relative;
    height: 2rem;
    background: #f0f0f0;
    border-radius: 1rem;
    overflow: hidden;
    display: flex;
    align-items: center;
}

.bar-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea, #764ba2);
    border-radius: 1rem;
    transition: width 1s ease;
    position: relative;
}

.bar-fill.competitor {
    background: linear-gradient(90deg, #e53e3e, #c53030);
}

.bar-value {
    position: absolute;
    right: 1rem;
    font-weight: 600;
    color: #333;
    font-size: 0.9rem;
    z-index: 2;
}

/* Workflow Diagram */
.workflow-diagram {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
    max-width: 1000px;
    margin: 0 auto;
}

.workflow-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width: 200px;
    position: relative;
}

.step-number {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 1.2rem;
    margin-bottom: 1rem;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
}

.step-content {
    background: #f8f9ff;
    padding: 1.5rem;
    border-radius: 1rem;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
}

.step-content:hover {
    border-color: #667eea;
    transform: translateY(-3px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.1);
}

.step-icon {
    font-size: 2rem;
    margin-bottom: 0.75rem;
}

.step-content h4 {
    margin: 0 0 0.5rem 0;
    color: #333;
    font-weight: 600;
}

.step-content p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
    line-height: 1.4;
}

.workflow-arrow {
    font-size: 2rem;
    color: #667eea;
    font-weight: bold;
    margin: 0 0.5rem;
}

/* Quick Start Guide */
.start-steps {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.start-step {
    background: white;
    border-radius: 1.5rem;
    padding: 2rem;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
}

.start-step:hover {
    transform: translateY(-5px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.step-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.step-badge {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    color: white;
    font-size: 1.1rem;
}

.step-badge.backend { background: linear-gradient(135deg, #e53e3e, #c53030); }
.step-badge.frontend { background: linear-gradient(135deg, #38a169, #2f855a); }
.step-badge.ai { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }

.step-header h3 {
    margin: 0;
    font-size: 1.3rem;
    color: #333;
    font-weight: 700;
}

.code-block {
    background: #1a1a1a;
    border-radius: 0.75rem;
    overflow: hidden;
    margin-bottom: 1rem;
}

.code-header {
    background: #2d2d2d;
    padding: 0.75rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.code-lang {
    color: #10b981;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
}

.copy-btn {
    background: #667eea;
    color: white;
    border: none;
    padding: 0.3rem 0.75rem;
    border-radius: 0.3rem;
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.copy-btn:hover {
    background: #5a67d8;
}

.code-block code {
    display: block;
    padding: 1rem;
    color: #10b981;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.4;
}

.step-result {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: #f0fdf4;
    border: 1px solid #bbf7d0;
    border-radius: 0.75rem;
    font-size: 0.9rem;
}

.result-icon {
    font-size: 1.2rem;
}

/* Roadmap Timeline */
.roadmap-timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
}

.roadmap-timeline::before {
    content: '';
    position: absolute;
    left: 2rem;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(180deg, #667eea, #764ba2);
    border-radius: 1.5px;
}

.timeline-item {
    position: relative;
    margin-bottom: 3rem;
    padding-left: 5rem;
}

.timeline-badge {
    position: absolute;
    left: 0;
    top: 0.5rem;
    width: 4rem;
    height: 2.5rem;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-radius: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: 700;
    z-index: 2;
}

.timeline-badge.current {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
    from { box-shadow: 0 0 20px rgba(245, 158, 11, 0.5); }
    to { box-shadow: 0 0 30px rgba(245, 158, 11, 0.8); }
}

.timeline-content {
    background: white;
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
}

.timeline-content:hover {
    transform: translateY(-3px);
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.timeline-content h4 {
    margin: 0 0 1rem 0;
    color: #333;
    font-size: 1.2rem;
    font-weight: 700;
}

.timeline-content ul {
    margin: 0;
    padding-left: 1.5rem;
    color: #555;
}

.timeline-content li {
    margin-bottom: 0.5rem;
    line-height: 1.5;
}

/* CTA Section */
.cta {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.cta-content {
    position: relative;
    z-index: 2;
}

.cta-text h2 {
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    font-weight: 700;
}

.cta-text p {
    font-size: 1.2rem;
    margin: 0 0 2rem 0;
    opacity: 0.9;
}

.cta-actions {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
}

.cta-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    border: none;
    border-radius: 3rem;
    font-size: 1.1rem;
    font-weight: 600;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
}

.cta-btn.primary {
    background: white;
    color: #667eea;
}

.cta-btn.primary:hover {
    background: #f7fafc;
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(255, 255, 255, 0.3);
}

.cta-btn.secondary {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
}

.cta-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(255, 255, 255, 0.2);
}

.btn-icon {
    font-size: 1.2rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    .readme-hero {
        padding: 3rem 1rem;
    }

    .hero-title {
        font-size: 2.5rem;
    }

    .hero-metrics {
        gap: 1.5rem;
    }

    .readme-section {
        margin: 1rem;
        padding: 2rem;
    }

    .summary-content {
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .platform-preview {
        width: 100%;
        max-width: 300px;
        margin: 0 auto;
    }

    .workflow-diagram {
        flex-direction: column;
    }

    .workflow-arrow {
        transform: rotate(90deg);
    }

    .roadmap-timeline::before {
        left: 1.5rem;
    }

    .timeline-item {
        padding-left: 4rem;
    }

    .timeline-badge {
        width: 3rem;
        height: 2rem;
        font-size: 0.7rem;
    }
}

/* Empty States */
.empty-activity-state,
.empty-teams-state,
.empty-projects-state,
.empty-reviews-state {
    text-align: center;
    padding: 3rem 2rem;
    color: #666;
}

.empty-activity-state .empty-icon,
.empty-teams-state .empty-icon,
.empty-projects-state .empty-icon,
.empty-reviews-state .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
    display: block;
}

.empty-activity-state p,
.empty-teams-state p,
.empty-projects-state p,
.empty-reviews-state p {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.empty-activity-state small,
.empty-teams-state small,
.empty-projects-state small,
.empty-reviews-state small {
    font-size: 0.9rem;
    opacity: 0.7;
}

.status-indicators {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.status-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: white;
    border-radius: 0.5rem;
    border: 1px solid #e2e8f0;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ef4444;
    animation: pulse 2s infinite;
}

.status-dot.online {
    background: #10b981;
    animation: none;
}

.status-dot.offline {
    background: #ef4444;
}

.status-label {
    font-weight: 500;
    flex: 1;
}

.status-value {
    font-size: 0.9rem;
    color: #666;
}

/* Teams and Projects Management Styles */
.teams-container,
.projects-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1rem;
}

.teams-header,
.projects-header,
.code-review-header,
.reviews-header,
.admin-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    border-radius: 1rem;
    border: 1px solid #e2e8f0;
}

.teams-title-section h1,
.projects-title-section h1,
.code-review-title-section h1,
.reviews-title-section h1,
.admin-title-section h1 {
    margin: 0 0 0.5rem 0;
    font-size: 2rem;
    color: #1a202c;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.teams-subtitle,
.projects-subtitle,
.code-review-subtitle,
.reviews-subtitle,
.admin-subtitle {
    margin: 0;
    color: #4a5568;
    font-size: 1rem;
}

.teams-controls,
.projects-controls,
.reviews-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    align-items: center;
}

.search-container {
    flex: 1;
    min-width: 200px;
}

.search-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: all 0.2s ease;
}

.search-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.filter-container {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.filter-select {
    padding: 0.75rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    background: white;
    min-width: 150px;
    transition: all 0.2s ease;
}

.filter-select:focus {
    outline: none;
    border-color: #667eea;
}

.teams-grid,
.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
}

.team-card,
.project-card {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 2px solid #f7fafc;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.team-card:hover,
.project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
    border-color: #667eea;
}

.team-card::before,
.project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.team-header,
.project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.team-name,
.project-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0;
}

.team-status,
.project-status {
    padding: 0.25rem 0.75rem;
    border-radius: 2rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.status-active {
    background: #d1fae5;
    color: #059669;
}

.status-inactive {
    background: #fee2e2;
    color: #dc2626;
}

.team-description,
.project-description {
    color: #4a5568;
    margin-bottom: 1rem;
    line-height: 1.5;
}

.team-meta,
.project-meta {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #666;
}

.meta-icon {
    font-size: 1rem;
    min-width: 1rem;
}

.team-actions,
.project-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e2e8f0;
}

.action-btn-small {
    padding: 0.5rem 1rem;
    border: 1px solid #e2e8f0;
    background: white;
    border-radius: 0.5rem;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #4a5568;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.action-btn-small:hover {
    background: #f7fafc;
    border-color: #cbd5e0;
    color: #2d3748;
}

.action-btn-small.edit {
    color: #3182ce;
    border-color: #bee3f8;
}

.action-btn-small.edit:hover {
    background: #ebf8ff;
    border-color: #3182ce;
}

.action-btn-small.delete {
    color: #e53e3e;
    border-color: #fed7d7;
}

.action-btn-small.delete:hover {
    background: #fed7d7;
    border-color: #e53e3e;
}

/* Placeholder Styles */
.team-card-placeholder,
.project-card-placeholder,
.reviews-placeholder {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    color: #a0aec0;
}

.placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
}

.placeholder-icon {
    font-size: 4rem;
    opacity: 0.5;
}

.placeholder-content h3 {
    margin: 0;
    font-size: 1.5rem;
    color: #4a5568;
}

.placeholder-content p {
    margin: 0;
    color: #718096;
    max-width: 400px;
}

/* Code Review Form Styles */
.code-review-form-container {
    max-width: 1000px;
    margin: 0 auto;
}

.code-review-form {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
}

.form-section {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #f1f5f9;
}

.form-section:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.form-section h3 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    color: #374151;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
}

.code-input-container {
    position: relative;
}

.code-input-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
    padding: 0.75rem 1rem;
    background: #f8fafc;
    border-radius: 0.5rem 0.5rem 0 0;
    border: 1px solid #e2e8f0;
    border-bottom: none;
}

.code-input-tools {
    display: flex;
    gap: 0.5rem;
}

.tool-btn {
    padding: 0.4rem 0.8rem;
    border: 1px solid #d1d5db;
    background: white;
    border-radius: 0.375rem;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #374151;
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.tool-btn:hover {
    background: #f9fafb;
    border-color: #9ca3af;
    color: #111827;
}

.file-upload-btn {
    position: relative;
    overflow: hidden;
}

.code-stats {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
    color: #6b7280;
}

.code-textarea {
    width: 100%;
    min-height: 400px;
    padding: 1rem;
    border: 1px solid #e2e8f0;
    border-top: none;
    border-radius: 0 0 0.5rem 0.5rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.9rem;
    line-height: 1.6;
    resize: vertical;
    background: #fafbfc;
}

.code-textarea:focus {
    outline: none;
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.code-review-actions {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 2px solid #f1f5f9;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
}

.submit-btn {
    padding: 0.75rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Reviews Management Styles */
.reviews-stats {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    justify-content: center;
}

.reviews-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.review-item {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    border: 1px solid #f1f5f9;
    transition: all 0.2s ease;
}

.review-item:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    border-color: #e2e8f0;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}

.review-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #1a202c;
    margin: 0 0 0.25rem 0;
}

.review-id {
    font-family: monospace;
    color: #718096;
    font-size: 0.9rem;
}

.review-status-badge {
    padding: 0.3rem 0.8rem;
    border-radius: 2rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.status-pending {
    background: #fef3c7;
    color: #92400e;
}

.status-in-progress {
    background: #dbeafe;
    color: #1d4ed8;
}

.status-completed {
    background: #d1fae5;
    color: #059669;
}

.status-failed {
    background: #fee2e2;
    color: #dc2626;
}

.status-cancelled {
    background: #f3f4f6;
    color: #374151;
}

.review-meta {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.review-meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.review-meta-label {
    font-size: 0.8rem;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
}

.review-meta-value {
    font-size: 0.9rem;
    color: #374151;
    font-weight: 500;
}

.review-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #f1f5f9;
}

/* Admin Panel Styles */
.admin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
}

.admin-section {
    background: white;
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid #f1f5f9;
}

.admin-section h2 {
    margin: 0 0 1.5rem 0;
    font-size: 1.2rem;
    color: #1a202c;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #f1f5f9;
}

.admin-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.admin-stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
}

.stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 0.75rem;
    border: 1px solid #e2e8f0;
}

.stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: #667eea;
}

.status-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: #f8fafc;
    border-radius: 0.5rem;
    border: 1px solid #e2e8f0;
    font-size: 0.9rem;
}

.form-help {
    font-size: 0.8rem;
    color: #6b7280;
    margin-top: 0.25rem;
    display: block;
}

/* Modal Enhancements */
.modal-content.large {
    max-width: 900px;
    width: 90vw;
}

.modal-content.small {
    max-width: 400px;
}

/* Enhanced Form Styles */
.checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-weight: 500;
}

.checkbox-label input[type="checkbox"] {
    width: 1.2rem;
    height: 1.2rem;
    cursor: pointer;
}

/* Priority Badges */
.priority-low {
    background: #ecfccb;
    color: #365314;
}

.priority-medium {
    background: #fef3c7;
    color: #92400e;
}

.priority-high {
    background: #fed7d7;
    color: #c53030;
}

.priority-urgent {
    background: #e2e8f0;
    color: #2d3748;
    animation: pulse 2s infinite;
}

/* Loading States */
.loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

/* Responsive Design */
@media (max-width: 768px) {
    .tabs {
        overflow-x: auto;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    .tabs::-webkit-scrollbar {
        display: none;
    }

    .tab-btn {
        min-width: 120px;
        flex-shrink: 0;
    }

    .dashboard-grid {
        grid-template-columns: 1fr;
    }

    .teams-header,
    .projects-header,
    .code-review-header,
    .reviews-header,
    .admin-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .teams-controls,
    .projects-controls,
    .reviews-controls {
        flex-direction: column;
    }

    .filter-container {
        width: 100%;
    }

    .filter-select {
        width: 100%;
    }

    .form-row {
        grid-template-columns: 1fr;
    }

    .code-review-actions {
        flex-direction: column;
    }

    .reviews-stats {
        flex-direction: column;
    }

    .admin-grid {
        grid-template-columns: 1fr;
    }

    .quick-actions {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 480px) {
    .quick-actions {
        grid-template-columns: 1fr;
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .code-input-header {
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }

    .code-input-tools {
        width: 100%;
        justify-content: space-between;
    }
}

/* Animation Keyframes */
@keyframes pulse {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
}

@keyframes loading {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

---------------------------------------------

styles.css

/**
 * Code Review Manager - Main Stylesheet
 * Clean, modern, and professional styling
 */

/* ===== RESET AND BASE STYLES ===== */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f8f9fa;
}

/* ===== HEADER ===== */
.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem 0;
    text-align: center;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
}

.logo {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.tagline {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* ===== CONTAINER ===== */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
}

/* ===== TABS ===== */
.tabs {
    display: flex;
    flex-wrap: wrap;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
    overflow: visible;
    gap: 2px;
    width: 100%;
    max-width: 100%;
    justify-content: flex-start;
}

.tab-btn {
    flex: 0 1 auto;
    min-width: fit-content;
    padding: 0.75rem 1rem;
    background: white;
    border: none;
    cursor: pointer;
    font-size: 0.85rem;
    font-weight: 500;
    transition: all 0.3s ease;
    color: #666;
    border-bottom: 3px solid transparent;
    white-space: nowrap;
    border-radius: 6px 6px 0 0;
    max-width: 140px;
    text-overflow: ellipsis;
    overflow: hidden;
}

.tab-btn:hover {
    background: #f8f9fa;
    color: #333;
}

.tab-btn.active {
    background: #667eea;
    color: white;
    border-bottom-color: #5a67d8;
}

/* ===== LOADING AND MESSAGES ===== */
.loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

.spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-right: 0.5rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.error-message, .success-message {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    animation: slideInDown 0.3s ease;
}

.error-message {
    background: #fed7d7;
    color: #c53030;
    border-left: 4px solid #e53e3e;
}

.success-message {
    background: #c6f6d5;
    color: #276749;
    border-left: 4px solid #38a169;
}

.close-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    margin-left: 1rem;
    opacity: 0.7;
    transition: opacity 0.2s;
}

.close-btn:hover {
    opacity: 1;
}

/* ===== CONTENT HEADER ===== */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.content-header h2 {
    font-size: 1.8rem;
    color: #2d3748;
    margin: 0;
}

.header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.search-container {
    display: flex;
    background: white;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.search-input {
    padding: 0.5rem 1rem;
    border: none;
    outline: none;
    min-width: 200px;
    font-size: 0.9rem;
}

/* ===== README TAB STYLES ===== */
.readme-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    margin: -2rem -1rem;
    padding: 0;
}

/* Hero Section */
.readme-hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 2rem;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.readme-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 20% 50%, rgba(255,255,255,0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255,255,255,0.1) 0%, transparent 50%);
    pointer-events: none;
}

.hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    margin: 0 auto;
}

.hero-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.15);
    padding: 0.75rem 1.5rem;
    border-radius: 2rem;
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: pulse 3s infinite;
}

@keyframes pulse {
    0%, 100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.4); }
    50% { transform: scale(1.02); box-shadow: 0 0 0 10px rgba(255, 255, 255, 0); }
}

.badge-icon {
    font-size: 1.1rem;
}

.hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 800;
    margin: 0 0 1.5rem 0;
    line-height: 1.2;
}

.title-gradient {
    background: linear-gradient(45deg, #ffffff, #f0f8ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: block;
}

.title-highlight {
    background: linear-gradient(45deg, #ffd700, #ffeb3b);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: block;
    margin-top: 0.5rem;
}

.hero-subtitle {
    font-size: 1.3rem;
    margin: 0 0 2rem 0;
    opacity: 0.9;
    line-height: 1.6;
}

.hero-tagline {
    font-size: 1rem;
    font-weight: 500;
    opacity: 0.8;
}

.hero-badges {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 3rem;
}

.tech-badge {
    padding: 0.5rem 1rem;
    border-radius: 1.5rem;
    font-size: 0.85rem;
    font-weight: 600;
    border: 2px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
    cursor: pointer;
}

.tech-badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}

.tech-badge.java { background: rgba(237, 117, 88, 0.2); }
.tech-badge.spring { background: rgba(109, 179, 63, 0.2); }
.tech-badge.ai { background: rgba(138, 43, 226, 0.2); }
.tech-badge.status { background: rgba(76, 175, 80, 0.2); }

.hero-metrics {
    display: flex;
    justify-content: center;
    gap: 3rem;
    flex-wrap: wrap;
    position: relative;
    z-index: 2;
}

.metric-item {
    text-align: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 1rem;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    min-width: 120px;
}

.metric-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.2);
    background: rgba(255, 255, 255, 0.15);
}

.metric-number {
    font-size: 2.5rem;
    font-weight: 800;
    color: #ffd700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    display: block;
}

.metric-label {
    font-size: 0.9rem;
    opacity: 0.9;
    margin-top: 0.5rem;
    font-weight: 500;
}

/* Section Styling */
.readme-section {
    background: rgba(255, 255, 255, 0.98);
    margin: 2rem;
    border-radius: 1.5rem;
    padding: 3rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.section-header {
    text-align: center;
    margin-bottom: 3rem;
}

.section-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1rem 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
}

.section-icon {
    font-size: 2.2rem;
}

.section-subtitle {
    font-size: 1.1rem;
    color: #718096;
    margin: 0;
    font-weight: 500;
}

/* Executive Summary */
.summary-content {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
    align-items: center;
}

.summary-lead {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #4a5568;
    margin-bottom: 2rem;
}

.value-props {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.value-prop {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: linear-gradient(135deg, #f7fafc, #edf2f7);
    border-radius: 1rem;
    border-left: 4px solid #667eea;
    transition: all 0.3s ease;
}

.value-prop:hover {
    transform: translateX(8px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    background: linear-gradient(135deg, #edf2f7, #e2e8f0);
}

.prop-icon {
    font-size: 1.5rem;
    min-width: 2rem;
}

.prop-content {
    font-size: 1.1rem;
    color: #2d3748;
}

.platform-preview {
    width: 280px;
    background: #1a202c;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
    transition: transform 0.3s ease;
}

.platform-preview:hover {
    transform: translateY(-5px) scale(1.02);
}

.preview-header {
    background: #2d3748;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.preview-dots {
    display: flex;
    gap: 0.3rem;
}

.dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    opacity: 0.7;
}

.dot.red { background: #fc8181; }
.dot.yellow { background: #f6e05e; }
.dot.green { background: #68d391; }

.preview-title {
    color: #e2e8f0;
    font-size: 0.9rem;
    font-weight: 500;
}

.preview-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.preview-tab {
    padding: 0.75rem 1rem;
    background: #2d3748;
    color: #a0aec0;
    border-radius: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    cursor: pointer;
}

.preview-tab.active {
    background: #667eea;
    color: white;
}

.preview-tab:hover {
    background: #4a5568;
    color: #e2e8f0;
}

/* Responsive Design */
@media (max-width: 768px) {
    .readme-hero {
        padding: 3rem 1rem;
    }

    .hero-title {
        font-size: 2.5rem;
    }

    .hero-metrics {
        gap: 1.5rem;
    }

    .readme-section {
        margin: 1rem;
        padding: 2rem;
    }

    .summary-content {
        grid-template-columns: 1fr;
        gap: 2rem;
    }

    .platform-preview {
        width: 100%;
        max-width: 300px;
        margin: 0 auto;
    }

    .section-title {
        font-size: 2rem;
        flex-direction: column;
        gap: 0.5rem;
    }
}

/* Features Grid */
.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.feature-card {
    background: white;
    border-radius: 1.2rem;
    padding: 2.5rem 2rem;
    text-align: center;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border: 2px solid #f7fafc;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.feature-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.feature-card.ai::before { background: linear-gradient(90deg, #8b5cf6, #a855f7); }
.feature-card.enterprise::before { background: linear-gradient(90deg, #059669, #10b981); }
.feature-card.performance::before { background: linear-gradient(90deg, #f59e0b, #d97706); }
.feature-card.integration::before { background: linear-gradient(90deg, #3b82f6, #1e40af); }

.feature-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 45px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.feature-icon {
    font-size: 3rem;
    margin-bottom: 1.5rem;
    display: block;
}

.feature-card h3 {
    font-size: 1.4rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1rem 0;
}

.feature-card p {
    color: #4a5568;
    line-height: 1.6;
    margin: 0;
}

/* Quick Start Grid */
.quick-start-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.start-card {
    background: white;
    border-radius: 1.2rem;
    padding: 2rem;
    text-align: center;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border: 2px solid #f7fafc;
    transition: all 0.3s ease;
    position: relative;
}

.start-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 45px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.start-number {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 1.2rem;
    margin: 0 auto 1.5rem auto;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
}

.start-card h3 {
    font-size: 1.3rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1.5rem 0;
}

.code-snippet {
    background: #1a202c;
    border-radius: 0.8rem;
    padding: 1rem;
    margin: 1rem 0;
    font-family: 'Courier New', monospace;
}

.code-snippet code {
    color: #68d391;
    font-size: 0.9rem;
    display: block;
}

.start-card p {
    color: #4a5568;
    margin: 1rem 0 0 0;
    font-size: 0.95rem;
}

/* CTA Section */
.cta-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
    position: relative;
    overflow: hidden;
}

.cta-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 70%, rgba(255,255,255,0.1) 0%, transparent 50%);
    pointer-events: none;
}

.cta-content {
    position: relative;
    z-index: 2;
}

.cta-content h2 {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0 0 1rem 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.cta-content p {
    font-size: 1.1rem;
    opacity: 0.9;
    margin: 0 0 2.5rem 0;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.6;
}

.cta-buttons {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
}

.cta-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    border: none;
    border-radius: 3rem;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
}

.cta-btn.primary {
    background: white;
    color: #667eea;
    box-shadow: 0 8px 25px rgba(255, 255, 255, 0.2);
}

.cta-btn.primary:hover {
    background: #f7fafc;
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(255, 255, 255, 0.3);
}

.cta-btn.secondary {
    background: rgba(255, 255, 255, 0.15);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
}

.cta-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.25);
    transform: translateY(-3px);
    box-shadow: 0 15px 35px rgba(255, 255, 255, 0.2);
}

.cta-btn span {
    font-size: 1.2rem;
}

/* Architecture Section Styles */
.architecture-diagram {
    background: linear-gradient(135deg, #f8fafc, #edf2f7);
    border-radius: 1.5rem;
    padding: 3rem 2rem;
    margin: 2rem 0;
    border: 2px solid #e2e8f0;
    position: relative;
    overflow: hidden;
}

.architecture-diagram::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 80% 20%, rgba(102, 126, 234, 0.05) 0%, transparent 50%);
    pointer-events: none;
}

.arch-layer {
    background: white;
    border-radius: 1rem;
    padding: 2rem;
    margin: 1.5rem 0;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border-left: 4px solid #667eea;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
}

.arch-layer:hover {
    transform: translateX(8px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12);
}

.arch-layer.presentation { border-left-color: #8b5cf6; }
.arch-layer.business { border-left-color: #10b981; }
.arch-layer.data { border-left-color: #f59e0b; }
.arch-layer.integration { border-left-color: #3b82f6; }

.arch-layer h3 {
    font-size: 1.4rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.arch-components {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}

.arch-component {
    background: #f7fafc;
    border-radius: 0.75rem;
    padding: 1rem;
    text-align: center;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

.arch-component:hover {
    background: white;
    border-color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.component-icon {
    font-size: 1.5rem;
}

.component-name {
    font-size: 0.9rem;
    font-weight: 600;
    color: #4a5568;
}

.arch-arrow {
    text-align: center;
    font-size: 2rem;
    color: #667eea;
    font-weight: bold;
    margin: 1rem 0;
    z-index: 2;
    position: relative;
}

/* Technical Stack Section */
.tech-stack-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 3rem 0;
}

.tech-column {
    background: white;
    border-radius: 1.2rem;
    padding: 2rem;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border: 2px solid #f7fafc;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.tech-column::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
}

.backend-stack::before { background: linear-gradient(90deg, #3b82f6, #1e40af); }
.frontend-stack::before { background: linear-gradient(90deg, #f59e0b, #d97706); }
.ai-stack::before { background: linear-gradient(90deg, #8b5cf6, #7c3aed); }

.tech-column:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 45px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.tech-column h3 {
    font-size: 1.3rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.tech-items {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.tech-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: #f8fafc;
    border-radius: 0.75rem;
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
}

.tech-item:hover {
    background: white;
    border-color: #667eea;
    transform: translateX(5px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.tech-icon {
    font-size: 1.5rem;
    min-width: 2rem;
}

.tech-details {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.tech-details strong {
    font-size: 1rem;
    font-weight: 700;
    color: #2d3748;
}

.tech-details span {
    font-size: 0.85rem;
    color: #718096;
    line-height: 1.3;
}

/* Architecture Principles */
.arch-principles {
    margin-top: 3rem;
}

.arch-principles h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 2rem 0;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.principles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.principle-card {
    background: white;
    border-radius: 1rem;
    padding: 2rem 1.5rem;
    text-align: center;
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.06);
    border: 2px solid #f0f0f0;
    transition: all 0.3s ease;
    position: relative;
}

.principle-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.12);
    border-color: #667eea;
}

.principle-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    display: block;
}

.principle-card h4 {
    font-size: 1.1rem;
    font-weight: 700;
    color: #2d3748;
    margin: 0 0 1rem 0;
}

.principle-card p {
    color: #4a5568;
    line-height: 1.5;
    margin: 0;
    font-size: 0.9rem;
}

/* Responsive Design for Architecture */
@media (max-width: 768px) {
    .architecture-diagram {
        padding: 2rem 1rem;
    }

    .arch-layer {
        padding: 1.5rem;
    }

    .arch-components {
        grid-template-columns: 1fr;
    }

    .tech-stack-section {
        grid-template-columns: 1fr;
    }

    .principles-grid {
        grid-template-columns: 1fr;
    }

    .principle-card {
        padding: 1.5rem 1rem;
    }
}

.search-btn {
    padding: 0.5rem 1rem;
    background: #667eea;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background 0.2s;
}

.search-btn:hover {
    background: #5a67d8;
}

.filter-select {
    padding: 0.5rem 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    background: white;
    font-size: 0.9rem;
    min-width: 150px;
    cursor: pointer;
}

/* ===== BUTTONS ===== */
.btn-primary, .btn-secondary, .btn-danger, .btn-success, .btn-warning {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-block;
}

.btn-primary {
    background: #667eea;
    color: white;
}

.btn-primary:hover {
    background: #5a67d8;
    transform: translateY(-1px);
}

.btn-secondary {
    background: #718096;
    color: white;
}

.btn-secondary:hover {
    background: #4a5568;
}

.btn-danger {
    background: #e53e3e;
    color: white;
}

.btn-danger:hover {
    background: #c53030;
}

.btn-success {
    background: #38a169;
    color: white;
}

.btn-success:hover {
    background: #2f855a;
}

.btn-warning {
    background: #d69e2e;
    color: white;
}

.btn-warning:hover {
    background: #b7791f;
}

.btn-small {
    padding: 0.3rem 0.7rem;
    font-size: 0.8rem;
}

/* ===== TAB CONTENT ===== */
.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}

/* ===== PROMPTS ===== */
.prompts-list {
    display: grid;
    gap: 1.5rem;
}

.prompt-card {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.prompt-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
}

.prompt-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.prompt-title {
    font-size: 1.3rem;
    color: #2d3748;
    margin: 0;
    flex: 1;
}

.prompt-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.prompt-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
}

.prompt-category {
    background: #e6fffa;
    color: #065f46;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.prompt-status {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.prompt-status.active {
    background: #d1fae5;
    color: #065f46;
}

.prompt-status.inactive {
    background: #fed7d7;
    color: #c53030;
}

.prompt-description {
    color: #4a5568;
    margin-bottom: 1rem;
    font-style: italic;
}

.prompt-content {
    margin-bottom: 1rem;
}

.content-preview {
    background: #f7fafc;
    padding: 1rem;
    border-radius: 6px;
    border-left: 4px solid #667eea;
    max-height: 200px;
    overflow-y: auto;
    font-size: 0.9rem;
    line-height: 1.5;
    white-space: pre-wrap;
    font-family: 'Courier New', Monaco, monospace;
}

.prompt-footer {
    border-top: 1px solid #e2e8f0;
    padding-top: 1rem;
}

.prompt-date {
    color: #718096;
    font-size: 0.8rem;
}

/* ===== CATEGORIES ===== */
.categories-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

.category-card {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.category-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
}

.category-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.category-name {
    font-size: 1.2rem;
    color: #2d3748;
    margin: 0;
    flex: 1;
}

.category-actions {
    display: flex;
    gap: 0.5rem;
}

.category-description {
    color: #4a5568;
    margin-bottom: 1rem;
}

.category-footer {
    border-top: 1px solid #e2e8f0;
    padding-top: 1rem;
}

.category-date {
    color: #718096;
    font-size: 0.8rem;
}

/* ===== MODALS ===== */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    animation: fadeIn 0.3s ease;
}

.modal-content {
    background: white;
    border-radius: 8px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    animation: slideInUp 0.3s ease;
}

.modal-content.small {
    max-width: 400px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
}

.modal-header h3 {
    margin: 0;
    color: #2d3748;
}

.modal-body {
    padding: 1.5rem;
}

/* ===== FORMS ===== */
.form {
    padding: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #2d3748;
    font-weight: 500;
}

.form-input, .form-select, .form-textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.9rem;
    transition: border-color 0.2s, box-shadow 0.2s;
}

.form-input:focus, .form-select:focus, .form-textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-textarea {
    resize: vertical;
    font-family: inherit;
}

.checkbox-label {
    display: flex !important;
    align-items: center;
    cursor: pointer;
}

.checkbox-label input[type="checkbox"] {
    width: auto !important;
    margin-right: 0.5rem;
    margin-bottom: 0;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid #e2e8f0;
    background: #f8f9fa;
    margin: 1.5rem -1.5rem -1.5rem -1.5rem;
}

/* ===== EMPTY STATE ===== */
.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.empty-state p {
    color: #718096;
    font-size: 1.1rem;
}

/* ===== UTILITY CLASSES ===== */
.hidden {
    display: none !important;
}

/* ===== ANIMATIONS ===== */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideInUp {
    from {
        transform: translateY(30px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@keyframes slideInDown {
    from {
        transform: translateY(-30px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* ===== RESPONSIVE DESIGN ===== */
@media (max-width: 768px) {
    .header {
        padding: 1.5rem 0;
    }

    .logo {
        font-size: 2rem;
    }

    .container {
        padding: 1rem;
    }

    .content-header {
        flex-direction: column;
        align-items: stretch;
    }

    .header-actions {
        flex-direction: column;
        align-items: stretch;
    }

    .search-container {
        order: -1;
    }

    .search-input {
        min-width: auto;
    }

    .categories-list {
        grid-template-columns: 1fr;
    }

    .prompt-header, .category-header {
        flex-direction: column;
        align-items: stretch;
    }

    .prompt-actions, .category-actions {
        justify-content: flex-start;
        margin-top: 1rem;
    }

    .modal-content {
        width: 95%;
        margin: 1rem;
    }

    .form-actions {
        flex-direction: column;
    }

    .tabs {
        flex-wrap: wrap;
        gap: 1px;
        justify-content: center;
    }

    .tab-btn {
        flex: 0 1 auto;
        min-width: 120px;
        padding: 0.7rem 0.8rem;
        font-size: 0.8rem;
        text-align: center;
        border-radius: 4px;
        margin-bottom: 2px;
    }

    .tab-btn.active {
        border-left: none;
        border-bottom: 2px solid #667eea;
        background: #667eea;
        color: white;
    }

    .form-row {
        flex-direction: column;
        gap: 1rem;
    }

    .half-width {
        width: 100%;
    }

    .ai-feature-container {
        padding: 1rem;
    }

    .review-meta {
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }

    .result-content {
        max-height: 300px;
        font-size: 0.85rem;
    }

    .code-textarea {
        font-size: 0.8rem;
        min-height: 200px;
    }
}

@media (max-width: 480px) {
    .prompt-meta, .header-actions {
        gap: 0.5rem;
    }

    .btn-small {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }
}

/* ===== AI FEATURES (PROMPT TESTING LAB & CODE REVIEW) ===== */
.ai-feature-container {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
}

.ai-status {
    margin-bottom: 1.5rem;
    padding: 1rem;
    border-radius: 6px;
    background-color: #f8f9fa;
    border-left: 4px solid #667eea;
}

.ai-status.error {
    background-color: #fed7d7;
    border-left-color: #e53e3e;
    color: #c53030;
}

.ai-status.success {
    background-color: #c6f6d5;
    border-left-color: #38a169;
    color: #276749;
}

.form-row {
    display: flex;
    gap: 1.5rem;
    margin-bottom: 1.5rem;
}

.half-width {
    width: 50%;
}

.code-textarea {
    font-family: 'Courier New', Monaco, monospace;
    white-space: pre;
    tab-size: 4;
    line-height: 1.4;
    font-size: 0.9rem;
    background-color: #f8f9fa;
    border-color: #e2e8f0;
    resize: vertical;
}

.code-textarea:focus {
    background-color: #fff;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.result-container {
    margin-top: 2rem;
    padding: 1.5rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #667eea;
}

.result-container h3 {
    margin-bottom: 1rem;
    color: #2d3748;
}

.review-meta {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #718096;
}

.result-content {
    padding: 1rem;
    background: white;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
    max-height: 500px;
    overflow-y: auto;
    white-space: pre-wrap;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
}

.result-content pre,
.result-content code {
    font-family: 'Courier New', Monaco, monospace;
    background-color: #f1f5f9;
    border-radius: 4px;
    padding: 0.2em 0.4em;
    font-size: 0.9em;
}

.result-content pre {
    padding: 1em;
    overflow-x: auto;
    margin: 1em 0;
}

.result-content h1,
.result-content h2,
.result-content h3,
.result-content h4 {
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    color: #2d3748;
}

.result-content p {
    margin-bottom: 1em;
}

.result-content ul,
.result-content ol {
    padding-left: 2em;
    margin-bottom: 1em;
}

.result-content li {
    margin-bottom: 0.5em;
}

.result-content hr {
    margin: 2em 0;
    border: 0;
    height: 1px;
    background-color: #e2e8f0;
}

.result-content blockquote {
    border-left: 4px solid #cbd5e0;
    padding-left: 1em;
    margin-left: 0;
    margin-right: 0;
    color: #4a5568;
}

.result-content .success {
    color: #38a169;
}

.result-content .warning {
    color: #d69e2e;
}

.result-content .error {
    color: #e53e3e;
}

.ai-loader {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 2rem 0;
}

.ai-loader .spinner {
    margin-right: 1rem;
    width: 30px;
    height: 30px;
    border-width: 3px;
}

/* ===== PROJECT ANALYZER STYLES ===== */
.project-overview {
    margin-bottom: 2rem;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.stat-item {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 4px;
    border-left: 3px solid #667eea;
}

.stat-label {
    font-weight: 500;
    color: #4a5568;
}

.stat-value {
    font-weight: bold;
    color: #2d3748;
}

.file-types-section, .key-files-section, .project-structure-section {
    margin-bottom: 2rem;
}

.file-types-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.5rem;
    margin-top: 1rem;
}

.file-type-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.75rem;
    background: #f1f5f9;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
}

.file-extension {
    font-weight: bold;
    color: #667eea;
    margin-bottom: 0.25rem;
}

.file-count {
    font-size: 0.875rem;
    color: #718096;
}

.key-files-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
}

.key-file-tag {
    padding: 0.25rem 0.75rem;
    background: #e6fffa;
    color: #2d3748;
    border-radius: 12px;
    border: 1px solid #38b2ac;
    font-size: 0.875rem;
    font-weight: 500;
}

.file-tree {
    max-height: 400px;
    overflow-y: auto;
    background: #f8f9fa;
    border-radius: 6px;
    padding: 1rem;
    margin-top: 1rem;
}

.file-tree-item {
    display: grid;
    grid-template-columns: 30px 1fr auto;
    gap: 0.5rem;
    padding: 0.25rem 0;
    align-items: center;
    border-bottom: 1px solid #e2e8f0;
}

.file-tree-item:last-child {
    border-bottom: none;
}

.file-icon {
    font-size: 1.2rem;
    text-align: center;
}

.file-path {
    font-family: 'Courier New', Monaco, monospace;
    font-size: 0.875rem;
    color: #4a5568;
}

.file-size {
    font-size: 0.75rem;
    color: #a0aec0;
    font-weight: 500;
}

.file-tree-more {
    padding: 1rem;
    text-align: center;
    color: #718096;
    font-style: italic;
    border-top: 1px solid #e2e8f0;
}

/* Responsive adjustments for project analyzer */
@media (max-width: 768px) {
    .stats-grid {
        grid-template-columns: 1fr;
    }

    .file-types-grid {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    }

    .file-tree-item {
        grid-template-columns: 25px 1fr;
        gap: 0.25rem;
    }

    .file-size {
        display: none;
    }
}

/* ===== README TAB STYLES ===== */
.readme-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.readme-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 2rem;
    text-align: center;
}

.readme-header h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.readme-subtitle {
    font-size: 1.3rem;
    opacity: 0.95;
    font-weight: 400;
    line-height: 1.5;
}

.readme-content {
    padding: 2rem;
}

.readme-section {
    margin-bottom: 3rem;
}

.readme-section h2 {
    font-size: 2rem;
    color: #2d3748;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Feature Grid Styles */
.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.feature-card {
    background: #f8f9ff;
    border: 1px solid #e6f3ff;
    border-radius: 10px;
    padding: 2rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
}

.feature-card h3 {
    color: #667eea;
    font-size: 1.3rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.feature-card ul {
    list-style: none;
    padding: 0;
}

.feature-card li {
    padding: 0.5rem 0;
    color: #4a5568;
    line-height: 1.6;
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
}

.feature-card li strong {
    color: #2d3748;
}

/* Architecture Info Styles */
.architecture-info p {
    font-size: 1.1rem;
    color: #4a5568;
    margin-bottom: 2rem;
}

.tech-stack {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.tech-item {
    background: linear-gradient(135deg, #f6f9fc 0%, #ffffff 100%);
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    transition: border-color 0.3s ease;
}

.tech-item:hover {
    border-color: #667eea;
}

.tech-item h4 {
    font-size: 1.4rem;
    color: #2d3748;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.tech-item p {
    color: #667eea;
    font-weight: 600;
    margin-bottom: 1rem;
}

.tech-item ul {
    list-style: none;
    padding: 0;
    text-align: left;
}

.tech-item li {
    padding: 0.3rem 0;
    color: #4a5568;
    position: relative;
    padding-left: 1.5rem;
}

.tech-item li:before {
    content: "•";
    color: #667eea;
    font-weight: bold;
    position: absolute;
    left: 0;
}

/* Quick Start Guide Styles */
.quick-start {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.start-step {
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    transition: all 0.3s ease;
}

.start-step:hover {
    border-color: #667eea;
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
}

.start-step h3 {
    color: #2d3748;
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

.code-block {
    background: #1a202c;
    color: #68d391;
    padding: 1rem;
    border-radius: 6px;
    margin: 1rem 0;
    font-family: 'Courier New', Monaco, monospace;
    text-align: left;
}

.code-block code {
    font-size: 0.9rem;
    line-height: 1.5;
}

.start-step p {
    color: #4a5568;
    margin-top: 1rem;
}

.start-step ul {
    text-align: left;
    color: #4a5568;
    margin-top: 1rem;
}

.start-step li {
    padding: 0.2rem 0;
}

/* Usage Flow Styles */
.usage-flow {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.flow-step {
    display: flex;
    align-items: center;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
}

.flow-step:hover {
    border-color: #667eea;
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
}

.step-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    font-weight: bold;
    font-size: 1.3rem;
    border-radius: 50%;
    margin-right: 1.5rem;
    flex-shrink: 0;
    box-shadow: 0 4px 10px rgba(102, 126, 234, 0.3);
}

.step-content {
    flex: 1;
}

.step-content h4 {
    color: #2d3748;
    font-size: 1.2rem;
    margin-bottom: 0.5rem;
}

.step-content p {
    color: #4a5568;
    line-height: 1.6;
}

.step-content strong {
    color: #667eea;
    font-weight: 600;
}

/* Responsive Design for README */
@media (max-width: 768px) {
    .readme-header {
        padding: 2rem 1rem;
    }

    .readme-header h1 {
        font-size: 2rem;
    }

    .readme-subtitle {
        font-size: 1.1rem;
    }

    .readme-content {
        padding: 1rem;
    }

    .feature-grid {
        grid-template-columns: 1fr;
    }

    .tech-stack {
        grid-template-columns: 1fr;
    }

    .quick-start {
        grid-template-columns: 1fr;
    }

    .flow-step {
        flex-direction: column;
        text-align: center;
    }

    .step-number {
        margin-right: 0;
        margin-bottom: 1rem;
    }
}

/* ===== ENHANCED CODE EDITOR STYLES ===== */
.code-editor-group {
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.code-editor-group:hover {
    border-color: #667eea;
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.15);
}

.code-editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, #f6f9fc 0%, #ffffff 100%);
    border-bottom: 2px solid #e2e8f0;
    padding: 1rem 1.5rem;
}

.code-editor-label {
    font-weight: 600;
    font-size: 1.1rem;
    color: #2d3748;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
}

.editor-icon {
    font-size: 1.2rem;
}

.code-editor-tools {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.editor-tool-btn {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    padding: 0.5rem 0.8rem;
    background: #f8f9fa;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.85rem;
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
    transition: all 0.2s ease;
}

.editor-tool-btn:hover {
    background: #667eea;
    color: white;
    border-color: #667eea;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
}

.code-editor-wrapper {
    position: relative;
    display: flex;
    background: #1a202c;
    min-height: 400px;
}

.line-numbers {
    background: #2d3748;
    color: #a0aec0;
    padding: 1rem 0.8rem;
    font-family: 'Courier New', Monaco, monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    text-align: right;
    border-right: 2px solid #4a5568;
    user-select: none;
    min-width: 50px;
    white-space: pre;
}

.code-editor {
    flex: 1;
    background: #1a202c;
    color: #e2e8f0;
    border: none;
    outline: none;
    padding: 1rem;
    font-family: 'Courier New', Monaco, 'Lucida Console', monospace;
    font-size: 0.95rem;
    line-height: 1.5;
    resize: none;
    white-space: pre;
    overflow-wrap: normal;
    overflow-x: auto;
    tab-size: 4;
}

.code-editor:focus {
    background: #1a202c;
    color: #e2e8f0;
}

.code-editor::placeholder {
    color: #718096;
    font-style: italic;
}

/* Syntax highlighting simulation with CSS */
.code-editor:focus {
    caret-color: #68d391;
}

.code-editor-footer {
    background: #f8f9fa;
    padding: 0.75rem 1.5rem;
    border-top: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.editor-info {
    font-size: 0.85rem;
    color: #718096;
    font-weight: 500;
}

.editor-info span {
    margin-right: 0.5rem;
}

/* Enhanced code textarea for backwards compatibility */
.code-textarea {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-family: 'Courier New', Monaco, monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    background: #1a202c;
    color: #e2e8f0;
    resize: vertical;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    min-height: 300px;
}

.code-textarea:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    outline: none;
}

.code-textarea::placeholder {
    color: #718096;
    font-style: italic;
}

/* Mobile responsiveness for code editors */
@media (max-width: 768px) {
    .code-editor-header {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
    }

    .code-editor-tools {
        flex-wrap: wrap;
        justify-content: center;
    }

    .editor-tool-btn {
        flex: 1;
        min-width: 80px;
        justify-content: center;
    }

    .line-numbers {
        min-width: 35px;
        padding: 1rem 0.5rem;
        font-size: 0.8rem;
    }

    .code-editor {
        font-size: 0.85rem;
        padding: 0.8rem;
    }

    .code-editor-footer {
        padding: 0.5rem 1rem;
        flex-direction: column;
        gap: 0.5rem;
        text-align: center;
    }
}

/* Dark theme adjustments */
@media (prefers-color-scheme: dark) {
    .code-editor-header {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: #e2e8f0;
    }

    .code-editor-label {
        color: #e2e8f0;
    }

    .editor-tool-btn {
        background: #4a5568;
        border-color: #718096;
        color: #e2e8f0;
    }

    .editor-tool-btn:hover {
        background: #667eea;
        border-color: #667eea;
    }

    .code-editor-footer {
        background: #2d3748;
        border-top-color: #4a5568;
        color: #a0aec0;
    }
}

/* ===== ENHANCED PROMPTS SECTION STYLES ===== */

/* Prompts Header */
.prompts-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 2rem;
    margin-bottom: 2rem;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
}

.prompts-header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    gap: 2rem;
}

.prompts-title-section {
    flex: 1;
}

.prompts-main-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.title-icon {
    font-size: 2.2rem;
    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.3));
}

.prompts-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    font-weight: 400;
}

/* Stats Cards */
.prompts-stats {
    display: flex;
    gap: 1.5rem;
}

.stat-card {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
}

.stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1;
    margin-bottom: 0.5rem;
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
    font-weight: 500;
}

/* Enhanced Toolbar */
.prompts-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.toolbar-left {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
    min-width: 300px;
}

.toolbar-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}

/* Enhanced Search Bar */
.search-bar-container {
    position: relative;
    flex: 1;
    max-width: 400px;
}

.search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 1.1rem;
    color: #718096;
    z-index: 10;
}

.enhanced-search-input {
    width: 100%;
    padding: 0.8rem 1rem 0.8rem 3rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 0.95rem;
    background: #f8f9fa;
    transition: all 0.3s ease;
}

.enhanced-search-input:focus {
    outline: none;
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.search-clear-btn {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #a0aec0;
    cursor: pointer;
    padding: 0.2rem;
    border-radius: 4px;
    transition: color 0.2s;
}

.search-clear-btn:hover {
    color: #e53e3e;
    background: rgba(229, 62, 62, 0.1);
}

/* Filter Container */
.filter-container {
    display: flex;
    gap: 0.5rem;
}

.enhanced-filter-select {
    padding: 0.8rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 0.9rem;
    background: white;
    cursor: pointer;
    transition: border-color 0.3s ease;
    min-width: 150px;
}

.enhanced-filter-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

/* View Options */
.view-options {
    display: flex;
    background: #f1f5f9;
    border-radius: 8px;
    padding: 0.2rem;
    gap: 0.2rem;
}

.view-btn {
    padding: 0.6rem 1rem;
    background: transparent;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 1rem;
}

.view-btn:hover {
    background: #e2e8f0;
}

.view-btn.active {
    background: #667eea;
    color: white;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
}

/* Enhanced Primary Button */
.btn-primary-enhanced {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
}

.btn-primary-enhanced:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
}

.btn-icon {
    font-size: 1.1rem;
}

/* Prompts Container */
.prompts-container {
    max-width: 1200px;
    margin: 0 auto;
}

/* Quick Actions Panel */
.quick-actions-panel {
    background: #fff3cd;
    border: 2px solid #ffeaa7;
    border-radius: 8px;
    padding: 1rem 1.5rem;
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.panel-header h3 {
    margin: 0;
    color: #856404;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.selected-count {
    font-size: 0.9rem;
    color: #6c757d;
    font-weight: 500;
}

.panel-actions {
    display: flex;
    gap: 0.5rem;
}

.action-btn {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    padding: 0.5rem 1rem;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.action-btn:hover {
    background: #f8f9fa;
    border-color: #adb5bd;
}

.action-btn.danger:hover {
    background: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.empty-state-content {
    max-width: 400px;
    margin: 0 auto;
}

.empty-state-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.empty-state h3 {
    font-size: 1.5rem;
    color: #2d3748;
    margin-bottom: 1rem;
}

.empty-state p {
    color: #718096;
    margin-bottom: 2rem;
    font-size: 1.1rem;
}

/* Prompts Display */
.prompts-display {
    transition: all 0.3s ease;
}

.prompts-display.grid-view {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
}

.prompts-display.list-view {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

/* Individual Prompt Cards */
.prompt-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
    border: 2px solid transparent;
}

.prompt-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
    border-color: #667eea;
}

.prompt-card.selected {
    border-color: #48bb78;
    box-shadow: 0 8px 25px rgba(72, 187, 120, 0.2);
}

.prompt-card-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e2e8f0;
    position: relative;
}

.prompt-card-header .checkbox-container {
    position: absolute;
    top: 1rem;
    right: 1rem;
}

.prompt-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 0.5rem;
    line-height: 1.3;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.prompt-category {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background: #e6fffa;
    color: #285e61;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.prompt-description {
    color: #718096;
    line-height: 1.5;
    margin-bottom: 1rem;
}

.prompt-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.85rem;
    color: #a0aec0;
}

.prompt-status {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    font-weight: 500;
}

.prompt-status.active {
    color: #38a169;
}

.prompt-status.inactive {
    color: #e53e3e;
}

.prompt-card-content {
    padding: 1.5rem;
}

.prompt-content-preview {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    font-family: 'Courier New', monospace;
    font-size: 0.85rem;
    line-height: 1.4;
    color: #4a5568;
    max-height: 150px;
    overflow-y: auto;
    white-space: pre-wrap;
    margin-bottom: 1rem;
}

.prompt-card-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-top: 1px solid #e2e8f0;
}

.prompt-actions-left {
    display: flex;
    gap: 0.5rem;
}

.prompt-actions-right {
    display: flex;
    gap: 0.3rem;
}

.prompt-action-btn {
    padding: 0.4rem 0.8rem;
    border: none;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.3rem;
}

.prompt-action-btn.primary {
    background: #667eea;
    color: white;
}

.prompt-action-btn.primary:hover {
    background: #5a67d8;
}

.prompt-action-btn.secondary {
    background: #e2e8f0;
    color: #4a5568;
}

.prompt-action-btn.secondary:hover {
    background: #cbd5e0;
}

.prompt-action-btn.success {
    background: #48bb78;
    color: white;
}

.prompt-action-btn.success:hover {
    background: #38a169;
}

.prompt-action-btn.danger {
    background: #f56565;
    color: white;
}

.prompt-action-btn.danger:hover {
    background: #e53e3e;
}

/* List View Specific Styles */
.prompts-display.list-view .prompt-card {
    display: flex;
    align-items: center;
    padding: 1rem;
}

.prompts-display.list-view .prompt-card-header {
    flex: 1;
    border-bottom: none;
    padding: 0;
    margin-right: 1rem;
}

.prompts-display.list-view .prompt-card-content {
    display: none;
}

.prompts-display.list-view .prompt-card-actions {
    background: transparent;
    border: none;
    padding: 0;
}

/* Responsive Design */
@media (max-width: 768px) {
    .prompts-header-content {
        flex-direction: column;
        text-align: center;
        gap: 2rem;
    }

    .prompts-stats {
        justify-content: center;
        flex-wrap: wrap;
    }

    .stat-card {
        padding: 1rem;
    }

    .stat-number {
        font-size: 2rem;
    }

    .prompts-toolbar {
        flex-direction: column;
        gap: 1rem;
    }

    .toolbar-left,
    .toolbar-right {
        width: 100%;
        justify-content: center;
    }

    .search-bar-container {
        max-width: none;
    }

    .filter-container {
        flex-direction: column;
        width: 100%;
        gap: 0.5rem;
    }

    .enhanced-filter-select {
        min-width: auto;
    }

    .prompts-display.grid-view {
        grid-template-columns: 1fr;
    }

    .prompts-display.list-view .prompt-card {
        flex-direction: column;
        align-items: stretch;
    }

    .prompts-display.list-view .prompt-card-header {
        margin-right: 0;
        margin-bottom: 1rem;
    }

    .quick-actions-panel {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .panel-actions {
        flex-wrap: wrap;
        justify-content: center;
    }
}

/* ===== SYNTAX HIGHLIGHTING STYLES ===== */

/* Syntax Container */
.syntax-container {
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    margin: 1rem 0;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.syntax-container:hover {
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
}

/* Syntax Header */
.syntax-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.syntax-language {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #e2e8f0;
    font-weight: 600;
    font-size: 0.9rem;
}

.language-icon {
    font-size: 1.1rem;
}

.language-name {
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.syntax-copy-btn {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    padding: 0.5rem 1rem;
    background: rgba(255, 255, 255, 0.1);
    color: #e2e8f0;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);
}

.syntax-copy-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-1px);
}

.copy-icon {
    font-size: 0.9rem;
}

/* Syntax Content */
.syntax-content {
    display: flex;
    background: #1e1e1e;
    min-height: 200px;
    max-height: 600px;
    overflow: auto;
}

.syntax-line-numbers {
    background: #2d3748;
    color: #718096;
    padding: 1rem 0.8rem;
    font-family: 'Courier New', Monaco, monospace;
    font-size: 0.85rem;
    line-height: 1.6;
    text-align: right;
    border-right: 1px solid #4a5568;
    user-select: none;
    min-width: 60px;
    position: sticky;
    left: 0;
    z-index: 1;
}

.syntax-line-numbers pre {
    margin: 0;
    white-space: pre;
}

.syntax-code {
    flex: 1;
    padding: 1rem;
    overflow-x: auto;
}

.syntax-code pre {
    margin: 0;
    font-family: 'Courier New', Monaco, 'Lucida Console', monospace;
    font-size: 0.85rem;
    line-height: 1.6;
    white-space: pre;
    color: #d4d4d4;
}

.syntax-code code {
    display: block;
    white-space: pre;
}

/* Dark Theme Syntax Colors */
.syntax-container.dark-theme .syntax-content {
    background: #1e1e1e;
}

.syntax-container.dark-theme .syntax-code pre {
    color: #d4d4d4;
}

.syntax-container.dark-theme .syntax-keyword {
    color: #569cd6;
    font-weight: 600;
}

.syntax-container.dark-theme .syntax-string {
    color: #ce9178;
}

.syntax-container.dark-theme .syntax-comment {
    color: #6a9955;
    font-style: italic;
}

.syntax-container.dark-theme .syntax-number {
    color: #b5cea8;
}

.syntax-container.dark-theme .syntax-operator {
    color: #d4d4d4;
    font-weight: 600;
}

.syntax-container.dark-theme .syntax-bracket {
    color: #ffd700;
    font-weight: bold;
}

.syntax-container.dark-theme .syntax-type {
    color: #4ec9b0;
    font-weight: 600;
}

.syntax-container.dark-theme .syntax-annotation {
    color: #dcdcaa;
    font-weight: 600;
}

.syntax-container.dark-theme .syntax-function {
    color: #dcdcaa;
    font-weight: 600;
}

.syntax-container.dark-theme .syntax-variable {
    color: #9cdcfe;
}

/* Light Theme Syntax Colors */
.syntax-container.light-theme .syntax-content {
    background: #ffffff;
}

.syntax-container.light-theme .syntax-line-numbers {
    background: #f8f9fa;
    color: #6c757d;
    border-right-color: #dee2e6;
}

.syntax-container.light-theme .syntax-code pre {
    color: #000000;
}

.syntax-container.light-theme .syntax-keyword {
    color: #0000ff;
    font-weight: 600;
}

.syntax-container.light-theme .syntax-string {
    color: #a31515;
}

.syntax-container.light-theme .syntax-comment {
    color: #008000;
    font-style: italic;
}

.syntax-container.light-theme .syntax-number {
    color: #098658;
}

.syntax-container.light-theme .syntax-operator {
    color: #000000;
    font-weight: 600;
}

.syntax-container.light-theme .syntax-bracket {
    color: #000000;
    font-weight: bold;
}

.syntax-container.light-theme .syntax-type {
    color: #267f99;
    font-weight: 600;
}

.syntax-container.light-theme .syntax-annotation {
    color: #795e26;
    font-weight: 600;
}

.syntax-container.light-theme .syntax-function {
    color: #795e26;
    font-weight: 600;
}

.syntax-container.light-theme .syntax-variable {
    color: #001080;
}

/* Monokai Theme Syntax Colors */
.syntax-container.monokai-theme .syntax-content {
    background: #272822;
}

.syntax-container.monokai-theme .syntax-line-numbers {
    background: #383830;
    color: #75715e;
    border-right-color: #49483e;
}

.syntax-container.monokai-theme .syntax-code pre {
    color: #f8f8f2;
}

.syntax-container.monokai-theme .syntax-keyword {
    color: #f92672;
    font-weight: 600;
}

.syntax-container.monokai-theme .syntax-string {
    color: #e6db74;
}

.syntax-container.monokai-theme .syntax-comment {
    color: #75715e;
    font-style: italic;
}

.syntax-container.monokai-theme .syntax-number {
    color: #ae81ff;
}

.syntax-container.monokai-theme .syntax-operator {
    color: #f92672;
    font-weight: 600;
}

.syntax-container.monokai-theme .syntax-bracket {
    color: #f8f8f2;
    font-weight: bold;
}

.syntax-container.monokai-theme .syntax-type {
    color: #66d9ef;
    font-weight: 600;
}

.syntax-container.monokai-theme .syntax-annotation {
    color: #a6e22e;
    font-weight: 600;
}

.syntax-container.monokai-theme .syntax-function {
    color: #a6e22e;
    font-weight: 600;
}

.syntax-container.monokai-theme .syntax-variable {
    color: #f8f8f2;
}

/* Result Container Enhancement for Code Display */
.result-container {
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    margin: 2rem 0;
    overflow: hidden;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
}

.result-container:hover {
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
    border-color: #667eea;
}

.result-container h3 {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem 2rem;
    margin: 0;
    font-size: 1.3rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.result-content {
    padding: 2rem;
    max-height: 800px;
    overflow-y: auto;
}

/* Enhanced Code Display in Results */
.code-submission-display {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    margin: 1rem 0;
    border-left: 4px solid #667eea;
    position: relative;
}

.code-submission-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e2e8f0;
}

.submission-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.85rem;
    color: #6c757d;
}

.meta-item {
    display: flex;
    align-items: center;
    gap: 0.3rem;
}

.language-badge {
    padding: 0.2rem 0.8rem;
    background: #667eea;
    color: white;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
}

.lines-count {
    padding: 0.2rem 0.6rem;
    background: #e9ecef;
    color: #495057;
    border-radius: 8px;
    font-size: 0.75rem;
}

/* Theme Toggle for Results */
.theme-toggle-container {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
}

.theme-toggle {
    display: flex;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    padding: 0.2rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
}

.theme-btn {
    padding: 0.3rem 0.6rem;
    border: none;
    background: transparent;
    border-radius: 16px;
    font-size: 0.7rem;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #6c757d;
}

.theme-btn.active {
    background: #667eea;
    color: white;
    box-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);
}

/* Responsive Design for Syntax Highlighting */
@media (max-width: 768px) {
    .syntax-container {
        margin: 0.5rem 0;
    }

    .syntax-header {
        padding: 0.8rem 1rem;
        flex-direction: column;
        gap: 0.5rem;
        align-items: stretch;
    }

    .syntax-language {
        justify-content: center;
    }

    .syntax-copy-btn {
        justify-content: center;
    }

    .syntax-line-numbers {
        min-width: 40px;
        padding: 1rem 0.5rem;
        font-size: 0.75rem;
    }

    .syntax-code {
        padding: 0.8rem;
    }

    .syntax-code pre {
        font-size: 0.75rem;
    }

    .result-container h3 {
        padding: 1rem 1.5rem;
        font-size: 1.1rem;
    }

    .result-content {
        padding: 1rem;
    }

    .code-submission-display {
        padding: 1rem;
    }

    .theme-toggle-container {
        position: relative;
        top: auto;
        right: auto;
        margin-bottom: 1rem;
        text-align: center;
    }
}

/* ===== ENHANCED RESULT DISPLAY STYLES ===== */

/* Enhanced Result Display */
.enhanced-result-display {
    position: relative;
}

.section-header {
    margin: 2rem 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e2e8f0;
}

.section-header h4 {
    font-size: 1.2rem;
    font-weight: 600;
    color: #2d3748;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Code Submission Section */
.code-submission-section {
    margin: 1rem 0 2rem 0;
}

/* Analysis Results Section */
.analysis-results-section {
    margin: 2rem 0;
}

.analysis-content {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    border-left: 4px solid #28a745;
}

/* Formatted Result Styles */
.formatted-result {
    line-height: 1.7;
    font-size: 0.95rem;
}

.result-paragraph {
    margin-bottom: 1rem;
    color: #4a5568;
}

.result-header {
    color: #2d3748;
    font-weight: 600;
    margin: 1.5rem 0 1rem 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.result-list {
    margin: 1rem 0;
    padding-left: 1.5rem;
}

.result-list li {
    margin-bottom: 0.5rem;
    color: #4a5568;
}

.inline-code {
    background: #e2e8f0;
    color: #2d3748;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: 'Courier New', Monaco, monospace;
    font-size: 0.9em;
}

/* Structured Result Styles */
.structured-result {
    margin: 1rem 0;
}

.result-section {
    margin: 2rem 0;
    padding: 1.5rem;
    background: white;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

.result-content {
    color: #4a5568;
    line-height: 1.6;
}

/* Issues List Styles */
.issues-list {
    margin: 1rem 0;
}

.issue-item {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    margin: 1rem 0;
    overflow: hidden;
    transition: all 0.3s ease;
}

.issue-item:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.issue-item.high {
    border-left: 4px solid #e53e3e;
}

.issue-item.medium {
    border-left: 4px solid #f6ad55;
}

.issue-item.low {
    border-left: 4px solid #48bb78;
}

.issue-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-bottom: 1px solid #e2e8f0;
}

.issue-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    background: #667eea;
    color: white;
    border-radius: 50%;
    font-size: 0.8rem;
    font-weight: 600;
}

.issue-title {
    flex: 1;
    font-weight: 600;
    color: #2d3748;
}

.issue-severity {
    padding: 0.2rem 0.6rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
}

.issue-severity.high {
    background: #fed7d7;
    color: #c53030;
}

.issue-severity.medium {
    background: #feebc8;
    color: #c05621;
}

.issue-severity.low {
    background: #c6f6d5;
    color: #276749;
}

.issue-description {
    padding: 1rem 1.5rem;
    color: #4a5568;
    line-height: 1.6;
}

.issue-suggestion {
    padding: 1rem 1.5rem;
    background: #f0fff4;
    border-top: 1px solid #c6f6d5;
    color: #276749;
    font-size: 0.9rem;
}

/* Recommendations Styles */
.recommendations-list {
    margin: 1rem 0;
}

.recommendation-item {
    padding: 0.8rem 1rem;
    background: #f0fff4;
    border-left: 4px solid #48bb78;
    border-radius: 4px;
    margin: 0.5rem 0;
    color: #276749;
    font-weight: 500;
}

/* Result Actions */
.result-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 2rem 0;
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

.action-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
}

.action-button.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
}

.action-button.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
}

.action-button.secondary {
    background: #e2e8f0;
    color: #4a5568;
    border: 1px solid #cbd5e0;
}

.action-button.secondary:hover {
    background: #cbd5e0;
    transform: translateY(-1px);
}

/* Result Text Fallback */
.result-text {
    padding: 1.5rem;
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid #667eea;
    color: #4a5568;
    line-height: 1.6;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Enhanced Mobile Responsiveness */
@media (max-width: 768px) {
    .enhanced-result-display {
        margin: 0.5rem 0;
    }

    .section-header h4 {
        font-size: 1.1rem;
    }

    .result-actions {
        flex-direction: column;
        align-items: stretch;
    }

    .action-button {
        justify-content: center;
        margin: 0.25rem 0;
    }

    .issue-header {
        flex-direction: column;
        gap: 0.5rem;
        align-items: stretch;
    }

    .issue-title {
        text-align: center;
    }

    .analysis-content,
    .result-section {
        padding: 1rem;
    }

    .result-paragraph {
        font-size: 0.9rem;
    }
}
-------------------------

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Review Manager</title>
    <link rel="stylesheet" href="css/styles.css">
    <link rel="stylesheet" href="css/enhanced-ui.css">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <h1 class="logo">Code Review Manager</h1>
            <p class="tagline">Manage prompts for code review, best practices, and more</p>
        </div>
    </header>

    <!-- Main Container -->
    <div class="container">
        <!-- Navigation Tabs -->
        <nav class="tabs">
            <button class="tab-btn active" data-tab="dashboard">🏠 Dashboard</button>
            <button class="tab-btn" data-tab="teams">👥 Teams</button>
            <button class="tab-btn" data-tab="projects">📂 Projects</button>
            <button class="tab-btn" data-tab="code-review">🔍 Code Review</button>
            <button class="tab-btn" data-tab="reviews">📋 Reviews</button>
            <button class="tab-btn" data-tab="prompts">📝 Prompts</button>
            <button class="tab-btn" data-tab="categories">🏷️ Categories</button>
            <button class="tab-btn" data-tab="test-lab">🧪 Testing Lab</button>
            <button class="tab-btn" data-tab="ai-review">⭐ AI Review</button>
            <button class="tab-btn" data-tab="project-analyzer">📁 Analyzer</button>
            <button class="tab-btn" data-tab="admin">⚙️ Admin</button>
            <button class="tab-btn" data-tab="readme">📖 README</button>
        </nav>

        <!-- Loading Indicator -->
        <div id="loading" class="loading hidden">
            <div class="spinner"></div>
            <span>Loading...</span>
        </div>

        <!-- Error Message -->
        <div id="error-message" class="error-message hidden">
            <span class="error-text"></span>
            <button class="close-btn" onclick="hideError()">&times;</button>
        </div>

        <!-- Success Message -->
        <div id="success-message" class="success-message hidden">
            <span class="success-text"></span>
            <button class="close-btn" onclick="hideSuccess()">&times;</button>
        </div>

        <!-- Dashboard Tab Content -->
        <div id="dashboard-tab" class="tab-content active">
            <div class="dashboard-container">
                <div class="dashboard-header">
                    <h1>🏠 Dashboard</h1>
                    <p class="dashboard-subtitle">Welcome to Code Review Manager - Your central hub for code quality</p>
                </div>

                <div class="dashboard-grid">
                    <!-- Quick Stats -->
                    <div class="dashboard-section stats-section">
                        <h2>📊 Quick Statistics</h2>
                        <div class="stats-grid">
                            <div class="stat-card">
                                <div class="stat-icon">👥</div>
                                <div class="stat-info">
                                    <span class="stat-number" id="teams-count">0</span>
                                    <span class="stat-label">Teams</span>
                                </div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-icon">📂</div>
                                <div class="stat-info">
                                    <span class="stat-number" id="projects-count">0</span>
                                    <span class="stat-label">Projects</span>
                                </div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-icon">🔍</div>
                                <div class="stat-info">
                                    <span class="stat-number" id="reviews-count">0</span>
                                    <span class="stat-label">Reviews</span>
                                </div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-icon">📝</div>
                                <div class="stat-info">
                                    <span class="stat-number" id="prompts-count">0</span>
                                    <span class="stat-label">Prompts</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="dashboard-section activity-section">
                        <h2>🕒 Recent Activity</h2>
                        <div class="activity-list" id="recent-activity">
                            <!-- Activity items will be loaded dynamically -->
                        </div>
                    </div>

                    <!-- Quick Actions -->
                    <div class="dashboard-section actions-section">
                        <h2>⚡ Quick Actions</h2>
                        <div class="quick-actions">
                            <button class="action-btn primary" data-action="new-team">
                                <span class="action-icon">👥</span>
                                <span class="action-text">Create Team</span>
                            </button>
                            <button class="action-btn secondary" data-action="new-project">
                                <span class="action-icon">📂</span>
                                <span class="action-text">New Project</span>
                            </button>
                            <button class="action-btn tertiary" data-action="submit-review">
                                <span class="action-icon">🔍</span>
                                <span class="action-text">Submit Review</span>
                            </button>
                            <button class="action-btn quaternary" data-action="add-prompt">
                                <span class="action-icon">📝</span>
                                <span class="action-text">Add Prompt</span>
                            </button>
                        </div>
                    </div>

                    <!-- System Status -->
                    <div class="dashboard-section status-section">
                        <h2>🟢 System Status</h2>
                        <div class="status-indicators">
                            <div class="status-item">
                                <span class="status-dot online"></span>
                                <span class="status-label">Backend API</span>
                                <span class="status-value" id="api-status">Connecting...</span>
                            </div>
                            <div class="status-item">
                                <span class="status-dot online"></span>
                                <span class="status-label">Database</span>
                                <span class="status-value">H2 In-Memory</span>
                            </div>
                            <div class="status-item">
                                <span class="status-dot" id="ai-status-dot"></span>
                                <span class="status-label">AI Service</span>
                                <span class="status-value" id="ai-status-text">Checking...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- README Tab Content -->
        <div id="readme-tab" class="tab-content">
            <div class="readme-container">
                <!-- Hero Section -->
                <div class="readme-hero">
                    <div class="hero-content">
                        <div class="hero-badge">
                            <span class="badge-icon">🚀</span>
                            <span class="badge-text">Enterprise Ready</span>
                        </div>
                        <h1 class="hero-title">
                            <span class="title-gradient">Enterprise Code Review</span>
                            <span class="title-highlight">Management Platform</span>
                        </h1>
                        <p class="hero-subtitle">
                            Next-Generation AI-Powered Code Review Orchestration System<br>
                            <span class="hero-tagline">Built for Scale • Enterprise Ready • AI-Enhanced</span>
                        </p>
                        <div class="hero-badges">
                            <div class="tech-badge java">☕ Java 17</div>
                            <div class="tech-badge spring">🍃 Spring Boot 3.1</div>
                            <div class="tech-badge ai">🧠 Claude AI</div>
                            <div class="tech-badge status">✅ Production Ready</div>
                        </div>
                        <div class="hero-metrics">
                            <div class="metric-item">
                                <div class="metric-number">60%</div>
                                <div class="metric-label">Faster Reviews</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-number">94%</div>
                                <div class="metric-label">AI Accuracy</div>
                            </div>
                            <div class="metric-item">
                                <div class="metric-number">$2.5M</div>
                                <div class="metric-label">Annual Savings</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Key Features -->
                <section class="readme-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            <span class="section-icon">🎯</span>
                            Platform Highlights
                        </h2>
                        <p class="section-subtitle">Enterprise-grade features designed for modern development teams</p>
                    </div>
                    <div class="features-grid">
                        <div class="feature-card ai">
                            <div class="feature-icon">🤖</div>
                            <h3>AI-Powered Reviews</h3>
                            <p>Claude 3.5 Sonnet integration for intelligent code analysis with 94% accuracy</p>
                        </div>
                        <div class="feature-card enterprise">
                            <div class="feature-icon">🏢</div>
                            <h3>Enterprise Ready</h3>
                            <p>Multi-project architecture with team-based organization and role management</p>
                        </div>
                        <div class="feature-card performance">
                            <div class="feature-icon">⚡</div>
                            <h3>Lightning Fast</h3>
                            <p>Sub-30-second review processing with real-time dashboard analytics</p>
                        </div>
                        <div class="feature-card integration">
                            <div class="feature-icon">🔗</div>
                            <h3>Seamless Integration</h3>
                            <p>Git workflow compatibility with comprehensive API endpoints</p>
                        </div>
                    </div>
                </section>

                <!-- System Architecture -->
                <section class="readme-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            <span class="section-icon">🏗️</span>
                            System Architecture
                        </h2>
                        <p class="section-subtitle">Enterprise-grade, cloud-native architecture designed for scale</p>
                    </div>

                    <!-- Architecture Diagram -->
                    <div class="architecture-diagram">
                        <div class="arch-layer presentation">
                            <h3>📱 Presentation Layer</h3>
                            <div class="arch-components">
                                <div class="arch-component">
                                    <span class="component-icon">🌐</span>
                                    <span class="component-name">Progressive Web App</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">📋</span>
                                    <span class="component-name">Real-time Dashboard</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">📝</span>
                                    <span class="component-name">Advanced Code Editor</span>
                                </div>
                            </div>
                        </div>

                        <div class="arch-arrow">↓</div>

                        <div class="arch-layer business">
                            <h3>⚙️ Business Logic Layer</h3>
                            <div class="arch-components">
                                <div class="arch-component">
                                    <span class="component-icon">🤖</span>
                                    <span class="component-name">AI Review Engine</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">🔄</span>
                                    <span class="component-name">Workflow Automation</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">📈</span>
                                    <span class="component-name">Analytics Engine</span>
                                </div>
                            </div>
                        </div>

                        <div class="arch-arrow">↓</div>

                        <div class="arch-layer data">
                            <h3>📦 Data Access Layer</h3>
                            <div class="arch-components">
                                <div class="arch-component">
                                    <span class="component-icon">🗺️</span>
                                    <span class="component-name">Spring Data JPA</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">🔒</span>
                                    <span class="component-name">Connection Pooling</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">⚔️</span>
                                    <span class="component-name">Transaction Mgmt</span>
                                </div>
                            </div>
                        </div>

                        <div class="arch-arrow">↓</div>

                        <div class="arch-layer integration">
                            <h3>🔗 Integration Layer</h3>
                            <div class="arch-components">
                                <div class="arch-component">
                                    <span class="component-icon">🧠</span>
                                    <span class="component-name">Claude 3.5 Sonnet</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">🔌</span>
                                    <span class="component-name">RESTful APIs</span>
                                </div>
                                <div class="arch-component">
                                    <span class="component-icon">📧</span>
                                    <span class="component-name">Notification Service</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Technical Stack -->
                    <div class="tech-stack-section">
                        <div class="tech-column backend-stack">
                            <h3>🟦 Backend Stack</h3>
                            <div class="tech-items">
                                <div class="tech-item">
                                    <span class="tech-icon">☕</span>
                                    <div class="tech-details">
                                        <strong>Java 17</strong>
                                        <span>Latest LTS with modern features</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🍃</span>
                                    <div class="tech-details">
                                        <strong>Spring Boot 3.1</strong>
                                        <span>Enterprise framework with security</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🗺️</span>
                                    <div class="tech-details">
                                        <strong>JPA/Hibernate</strong>
                                        <span>Object-relational mapping</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">📊</span>
                                    <div class="tech-details">
                                        <strong>H2/PostgreSQL</strong>
                                        <span>Development & production databases</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="tech-column frontend-stack">
                            <h3>🟨 Frontend Stack</h3>
                            <div class="tech-items">
                                <div class="tech-item">
                                    <span class="tech-icon">🔥</span>
                                    <div class="tech-details">
                                        <strong>Vanilla JavaScript</strong>
                                        <span>Modern ES6+ without frameworks</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🎨</span>
                                    <div class="tech-details">
                                        <strong>CSS3 + Grid</strong>
                                        <span>Responsive design with animations</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">📱</span>
                                    <div class="tech-details">
                                        <strong>Progressive Web App</strong>
                                        <span>Mobile-first responsive design</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🔌</span>
                                    <div class="tech-details">
                                        <strong>REST Client</strong>
                                        <span>Fetch API with error handling</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="tech-column ai-stack">
                            <h3>🤖 AI & Integration</h3>
                            <div class="tech-items">
                                <div class="tech-item">
                                    <span class="tech-icon">🧠</span>
                                    <div class="tech-details">
                                        <strong>Claude 3.5 Sonnet</strong>
                                        <span>Advanced AI for code analysis</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🔗</span>
                                    <div class="tech-details">
                                        <strong>Spring AI</strong>
                                        <span>AI integration framework</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">📡</span>
                                    <div class="tech-details">
                                        <strong>WebSocket</strong>
                                        <span>Real-time communication</span>
                                    </div>
                                </div>
                                <div class="tech-item">
                                    <span class="tech-icon">🔒</span>
                                    <div class="tech-details">
                                        <strong>OAuth 2.0</strong>
                                        <span>Secure authentication</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Architecture Principles -->
                    <div class="arch-principles">
                        <h3>🎯 Architecture Principles</h3>
                        <div class="principles-grid">
                            <div class="principle-card">
                                <div class="principle-icon">🛡️</div>
                                <h4>Security First</h4>
                                <p>Zero-trust architecture with end-to-end encryption and comprehensive audit trails</p>
                            </div>
                            <div class="principle-card">
                                <div class="principle-icon">🚀</div>
                                <h4>Performance</h4>
                                <p>Sub-200ms response times with intelligent caching and optimized database queries</p>
                            </div>
                            <div class="principle-card">
                                <div class="principle-icon">🔄</div>
                                <h4>Scalability</h4>
                                <p>Horizontal scaling with microservices-ready architecture and cloud deployment</p>
                            </div>
                            <div class="principle-card">
                                <div class="principle-icon">🛠️</div>
                                <h4>Maintainability</h4>
                                <p>Clean code architecture with comprehensive testing and documentation</p>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Quick Start -->
                <section class="readme-section">
                    <div class="section-header">
                        <h2 class="section-title">
                            <span class="section-icon">🚀</span>
                            Quick Start Guide
                        </h2>
                        <p class="section-subtitle">Get up and running in less than 5 minutes</p>
                    </div>
                    <div class="quick-start-grid">
                        <div class="start-card">
                            <div class="start-number">1</div>
                            <h3>Backend Setup</h3>
                            <div class="code-snippet">
                                <code>cd backend && mvn spring-boot:run</code>
                            </div>
                            <p>Starts on <strong>http://localhost:8081</strong></p>
                        </div>
                        <div class="start-card">
                            <div class="start-number">2</div>
                            <h3>Frontend Launch</h3>
                            <div class="code-snippet">
                                <code>cd frontend && python -m http.server 3000</code>
                            </div>
                            <p>Available at <strong>http://localhost:3000</strong></p>
                        </div>
                        <div class="start-card">
                            <div class="start-number">3</div>
                            <h3>AI Configuration</h3>
                            <div class="code-snippet">
                                <code>export ANTHROPIC_API_KEY=your-key</code>
                            </div>
                            <p>Enable <strong>Claude AI features</strong></p>
                        </div>
                    </div>
                </section>

                <!-- Call to Action -->
                <section class="readme-section cta-section">
                    <div class="cta-content">
                        <h2>🎆 Ready to Transform Your Code Review Process?</h2>
                        <p>Experience the future of code quality assurance with AI-powered reviews and enterprise-grade workflow management.</p>
                        <div class="cta-buttons">
                            <button class="cta-btn primary" onclick="showTab('dashboard')">
                                <span>📋</span> Explore Dashboard
                            </button>
                            <button class="cta-btn secondary" onclick="showTab('ai-review')">
                                <span>🤖</span> Try AI Review
                            </button>
                        </div>
                    </div>
                </section>
            </div>
        </div>

        <!-- Prompts Tab Content -->
        <div id="prompts-tab" class="tab-content">
            <!-- Enhanced Prompts Header -->
            <div class="prompts-header">
                <div class="prompts-header-content">
                    <div class="prompts-title-section">
                        <h1 class="prompts-main-title">
                            <span class="title-icon">📝</span>
                            Code Review Prompts
                        </h1>
                        <p class="prompts-subtitle">Manage and organize your code review templates and best practices</p>
                    </div>

                    <div class="prompts-stats" id="prompts-stats">
                        <div class="stat-card">
                            <div class="stat-number" id="total-prompts">0</div>
                            <div class="stat-label">Total Prompts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="active-prompts">0</div>
                            <div class="stat-label">Active</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="total-categories">0</div>
                            <div class="stat-label">Categories</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Search and Filter Bar -->
            <div class="prompts-toolbar">
                <div class="toolbar-left">
                    <div class="search-bar-container">
                        <div class="search-icon">🔍</div>
                        <input type="text" id="prompt-search" class="enhanced-search-input" placeholder="Search prompts by title, description, or content...">
                        <button class="search-clear-btn" onclick="clearSearch()" title="Clear Search">&times;</button>
                    </div>

                    <div class="filter-container">
                        <select id="category-filter" class="enhanced-filter-select" onchange="filterPrompts()">
                            <option value="">🏷️ All Categories</option>
                        </select>
                        <select id="status-filter" class="enhanced-filter-select" onchange="filterPrompts()">
                            <option value="">⚡ All Status</option>
                            <option value="active">✅ Active Only</option>
                            <option value="inactive">❌ Inactive Only</option>
                        </select>
                    </div>
                </div>

                <div class="toolbar-right">
                    <div class="view-options">
                        <button class="view-btn active" data-view="grid" onclick="changeView('grid')" title="Grid View">
                            <span>🎆</span>
                        </button>
                        <button class="view-btn" data-view="list" onclick="changeView('list')" title="List View">
                            <span>📋</span>
                        </button>
                    </div>
                    <button class="btn-primary-enhanced" onclick="showPromptForm()">
                        <span class="btn-icon">➕</span>
                        Add New Prompt
                    </button>
                </div>
            </div>

            <!-- Enhanced Prompts Display -->
            <div class="prompts-container">
                <!-- Quick Actions Panel -->
                <div class="quick-actions-panel" id="quick-actions" style="display: none;">
                    <div class="panel-header">
                        <h3>⚡ Quick Actions</h3>
                        <span class="selected-count" id="selected-count">0 selected</span>
                    </div>
                    <div class="panel-actions">
                        <button class="action-btn" onclick="bulkActivatePrompts()">
                            <span>✅</span> Activate Selected
                        </button>
                        <button class="action-btn" onclick="bulkDeactivatePrompts()">
                            <span>❌</span> Deactivate Selected
                        </button>
                        <button class="action-btn danger" onclick="bulkDeletePrompts()">
                            <span>🗑️</span> Delete Selected
                        </button>
                    </div>
                </div>

                <!-- No Prompts State -->
                <div id="no-prompts-state" class="empty-state">
                    <div class="empty-state-content">
                        <div class="empty-state-icon">📝</div>
                        <h3>No Prompts Found</h3>
                        <p>Get started by creating your first code review prompt</p>
                        <button class="btn-primary-enhanced" onclick="showPromptForm()">
                            <span class="btn-icon">➕</span>
                            Create Your First Prompt
                        </button>
                    </div>
                </div>

                <!-- Prompts Grid/List -->
                <div id="prompts-list" class="prompts-display grid-view">
                    <!-- Prompts will be loaded here dynamically -->
                </div>
            </div>
        </div>

        <!-- Categories Tab Content -->
        <div id="categories-tab" class="tab-content">
            <!-- Categories Header -->
            <div class="content-header">
                <h2>Categories</h2>
                <div class="header-actions">
                    <div class="search-container">
                        <input type="text" id="category-search" class="search-input" placeholder="Search categories...">
                        <button class="search-btn" onclick="searchCategories()">Search</button>
                    </div>
                    <button class="btn-primary" onclick="showCategoryForm()">Add New Category</button>
                </div>
            </div>

            <!-- Categories List -->
            <div id="categories-list" class="categories-list">
                <!-- Categories will be loaded here -->
            </div>
        </div>

        <!-- Prompt Testing Lab Tab Content -->
        <div id="test-lab-tab" class="tab-content">
            <div class="content-header">
                <h2>🧪 Prompt Testing Lab</h2>
                <p>Test your code review prompts against sample code to evaluate their effectiveness</p>
            </div>

            <div class="ai-feature-container">
                <div class="ai-status" id="test-lab-status">
                    <!-- Status will be loaded here -->
                </div>

                <div class="test-lab-form">
                    <div class="form-row">
                        <div class="form-group half-width">
                            <label for="test-prompt-select">Select Prompt to Test:</label>
                            <select id="test-prompt-select" class="form-select">
                                <option value="">Choose a prompt...</option>
                            </select>
                        </div>
                        <div class="form-group half-width">
                            <label>Sample Code Language:</label>
                            <select id="test-code-language" class="form-select">
                                <option value="java">Java/Spring Boot</option>
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="csharp">C#</option>
                                <option value="typescript">TypeScript</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group code-editor-group">
                        <div class="code-editor-header">
                            <label for="test-sample-code" class="code-editor-label">
                                <span class="editor-icon">📝</span>
                                Sample Code for Testing
                            </label>
                            <div class="code-editor-tools">
                                <button type="button" class="editor-tool-btn" onclick="formatCode('test-sample-code')" title="Format Code">
                                    <span>✨</span> Format
                                </button>
                                <button type="button" class="editor-tool-btn" onclick="clearCode('test-sample-code')" title="Clear Editor">
                                    <span>🗑️</span> Clear
                                </button>
                                <button type="button" class="editor-tool-btn" onclick="copyCode('test-sample-code')" title="Copy Code">
                                    <span>📋</span> Copy
                                </button>
                            </div>
                        </div>
                        <div class="code-editor-wrapper">
                            <div class="line-numbers" id="test-line-numbers"></div>
                            <textarea id="test-sample-code" class="code-editor" rows="25"
                                    placeholder="Paste your sample code here to test the prompt..."></textarea>
                        </div>
                        <div class="code-editor-footer">
                            <span class="editor-info">
                                <span id="test-code-lines">Lines: 14</span> •
                                <span id="test-code-chars">Characters: 0</span>
                            </span>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button id="test-prompt-btn" class="btn-primary" onclick="testPrompt()">🧪 Test Prompt</button>
                        <button class="btn-secondary" onclick="clearTestLab()">Clear</button>
                    </div>
                </div>

                <div id="test-result-container" class="result-container hidden">
                    <h3>Test Results</h3>
                    <div id="test-result-content" class="result-content">
                        <!-- Test results will appear here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- AI Code Review Tab Content -->
        <div id="ai-review-tab" class="tab-content">
            <div class="content-header">
                <h2>⭐ AI Code Review Executor</h2>
                <p>Get instant AI-powered code reviews using Claude 4.5 Sonnet via Spring AI</p>
            </div>

            <div class="ai-feature-container">
                <div class="ai-status" id="ai-review-status">
                    <!-- Status will be loaded here -->
                </div>

                <div class="ai-review-form">
                    <div class="form-row">
                        <div class="form-group half-width">
                            <label for="review-prompt-select">Select Review Prompt:</label>
                            <select id="review-prompt-select" class="form-select">
                                <option value="">Choose a prompt...</option>
                            </select>
                        </div>
                        <div class="form-group half-width">
                            <label>Code Language:</label>
                            <select id="review-code-language" class="form-select">
                                <option value="java">Java/Spring Boot</option>
                                <option value="javascript">JavaScript</option>
                                <option value="python">Python</option>
                                <option value="csharp">C#</option>
                                <option value="typescript">TypeScript</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group code-editor-group">
                        <div class="code-editor-header">
                            <label for="review-code-input" class="code-editor-label">
                                <span class="editor-icon">⭐</span>
                                Code to Review
                            </label>
                            <div class="code-editor-tools">
                                <button type="button" class="editor-tool-btn" onclick="formatCode('review-code-input')" title="Format Code">
                                    <span>✨</span> Format
                                </button>
                                <button type="button" class="editor-tool-btn" onclick="clearCode('review-code-input')" title="Clear Editor">
                                    <span>🗑️</span> Clear
                                </button>
                                <button type="button" class="editor-tool-btn" onclick="copyCode('review-code-input')" title="Copy Code">
                                    <span>📋</span> Copy
                                </button>
                                <button type="button" class="editor-tool-btn" onclick="loadSampleCode('review-code-input')" title="Load Sample Code">
                                    <span>📦</span> Sample
                                </button>
                            </div>
                        </div>
                        <div class="code-editor-wrapper">
                            <div class="line-numbers" id="review-line-numbers"></div>
                            <textarea id="review-code-input" class="code-editor" rows="30"
                                    placeholder="Paste your code here for AI review..."></textarea>
                        </div>
                        <div class="code-editor-footer">
                            <span class="editor-info">
                                <span id="review-code-lines">Lines: 0</span> •
                                <span id="review-code-chars">Characters: 0</span>
                            </span>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button id="execute-review-btn" class="btn-primary" onclick="executeAIReview()">⭐ Get AI Review</button>
                        <button class="btn-secondary" onclick="clearReviewForm()">Clear</button>
                    </div>
                </div>

                <div id="ai-review-result-container" class="result-container hidden">
                    <h3>AI Code Review Results</h3>
                    <div class="review-meta">
                        <span id="review-timestamp"></span>
                        <span id="review-model"></span>
                    </div>
                    <div id="ai-review-result-content" class="result-content">
                        <!-- AI review results will appear here -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Project Analyzer Tab Content -->
        <div id="project-analyzer-tab" class="tab-content">
            <div class="content-header">
                <h2>📁 Project Analyzer</h2>
                <p>Analyze entire projects and generate comprehensive reviews and documentation</p>
            </div>

            <div class="ai-feature-container">
                <div class="ai-status" id="project-analyzer-status">
                    <!-- Status will be loaded here -->
                </div>

                <div class="project-analyzer-form">
                    <div class="form-group">
                        <label for="project-path-input">Project Path:</label>
                        <input type="text" id="project-path-input" class="form-input"
                               placeholder="Enter full path to project directory (e.g., C:\Users\user\my-project)">
                        <button type="button" class="btn-secondary" onclick="browseProjectPath()">Browse</button>
                    </div>

                    <div class="form-row">
                        <div class="form-group half-width">
                            <label for="analysis-type">Analysis Type:</label>
                            <select id="analysis-type" class="form-select">
                                <option value="structure">Project Structure Analysis</option>
                                <option value="readme-comprehensive">Generate Comprehensive README</option>
                                <option value="readme-api">Generate API Documentation README</option>
                                <option value="readme-user">Generate User Guide README</option>
                                <option value="full-review">Comprehensive Project Review</option>
                            </select>
                        </div>
                        <div class="form-group half-width">
                            <label for="review-prompt-select-project">Review Prompt (for reviews):</label>
                            <select id="review-prompt-select-project" class="form-select">
                                <option value="">Use default project analysis...</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button id="analyze-project-btn" class="btn-primary" onclick="analyzeProject()">🔍 Analyze Project</button>
                        <button class="btn-secondary" onclick="clearProjectAnalyzer()">Clear</button>
                    </div>
                </div>

                <!-- Project Structure Display -->
                <div id="project-structure-container" class="result-container hidden">
                    <h3>Project Structure Analysis</h3>
                    <div id="project-structure-content" class="result-content">
                        <!-- Project structure will appear here -->
                    </div>
                </div>

                <!-- Project Analysis Results -->
                <div id="project-analysis-result-container" class="result-container hidden">
                    <h3>Analysis Results</h3>
                    <div class="review-meta">
                        <span id="project-analysis-timestamp"></span>
                        <span id="project-analysis-model"></span>
                    </div>
                    <div id="project-analysis-result-content" class="result-content">
                        <!-- Analysis results will appear here -->
                    </div>
                    <div class="form-actions" style="margin-top: 1rem;">
                        <button class="btn-secondary" onclick="downloadAnalysisResult()">📄 Download Result</button>
                        <button class="btn-secondary" onclick="copyAnalysisResult()">📋 Copy to Clipboard</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Teams Tab Content -->
        <div id="teams-tab" class="tab-content">
            <div class="teams-container">
                <div class="teams-header">
                    <div class="teams-title-section">
                        <h1>👥 Team Management</h1>
                        <p class="teams-subtitle">Manage development teams and their members</p>
                    </div>
                    <div class="teams-actions">
                        <button class="btn-primary" onclick="showTeamModal()">
                            <span class="btn-icon">➕</span>
                            Add New Team
                        </button>
                    </div>
                </div>

                <div class="teams-controls">
                    <div class="search-container">
                        <input type="text" id="team-search" class="search-input" placeholder="🔍 Search teams..." oninput="searchTeams()">
                    </div>
                    <div class="filter-container">
                        <select id="team-status-filter" class="filter-select" onchange="filterTeams()">
                            <option value="all">All Teams</option>
                            <option value="active">Active Teams</option>
                            <option value="inactive">Inactive Teams</option>
                        </select>
                    </div>
                </div>

                <div class="teams-grid" id="teams-grid">
                    <!-- Teams will be loaded dynamically -->
                </div>
            </div>
        </div>

        <!-- Projects Tab Content -->
        <div id="projects-tab" class="tab-content">
            <div class="projects-container">
                <div class="projects-header">
                    <div class="projects-title-section">
                        <h1>📂 Project Management</h1>
                        <p class="projects-subtitle">Manage your development projects and repositories</p>
                    </div>
                    <div class="projects-actions">
                        <button class="btn-primary" onclick="showProjectModal()">
                            <span class="btn-icon">➕</span>
                            Add New Project
                        </button>
                    </div>
                </div>

                <div class="projects-controls">
                    <div class="search-container">
                        <input type="text" id="project-search" class="search-input" placeholder="🔍 Search projects..." oninput="searchProjects()">
                    </div>
                    <div class="filter-container">
                        <select id="project-team-filter" class="filter-select" onchange="filterProjects()">
                            <option value="all">All Teams</option>
                        </select>
                        <select id="project-status-filter" class="filter-select" onchange="filterProjects()">
                            <option value="all">All Projects</option>
                            <option value="active">Active Projects</option>
                            <option value="inactive">Inactive Projects</option>
                        </select>
                    </div>
                </div>

                <div class="projects-grid" id="projects-grid">
                    <!-- Projects will be loaded dynamically -->
                </div>
            </div>
        </div>

        <!-- Code Review Submission Tab Content -->
        <div id="code-review-tab" class="tab-content">
            <div class="code-review-container">
                <div class="code-review-header">
                    <div class="code-review-title-section">
                        <h1>🔍 Submit Code Review</h1>
                        <p class="code-review-subtitle">Submit your code for AI-powered analysis and team review</p>
                    </div>
                </div>

                <div class="code-review-form-container">
                    <form id="code-review-form" class="code-review-form">
                        <!-- Project Selection -->
                        <div class="form-section">
                            <h3>📂 Project Information</h3>
                            <div class="form-group">
                                <label for="review-project">Project *</label>
                                <select id="review-project" class="form-select" required>
                                    <option value="">Select a project</option>
                                </select>
                            </div>
                        </div>

                        <!-- Code Information -->
                        <div class="form-section">
                            <h3>📝 Code Information</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="review-submitter-name">Your Name</label>
                                    <input type="text" id="review-submitter-name" class="form-input" placeholder="Your full name">
                                </div>
                                <div class="form-group">
                                    <label for="review-submitter-email">Your Email *</label>
                                    <input type="email" id="review-submitter-email" class="form-input" required placeholder="your.email@company.com">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="review-file-path">File Path</label>
                                    <input type="text" id="review-file-path" class="form-input" placeholder="src/main/java/com/example/MyClass.java">
                                </div>
                                <div class="form-group">
                                    <label for="review-commit-hash">Commit Hash *</label>
                                    <input type="text" id="review-commit-hash" class="form-input" required placeholder="a1b2c3d4e5f6...">
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="review-language">Programming Language</label>
                                    <select id="review-language" class="form-select">
                                        <option value="">Auto-detect</option>
                                        <option value="java">Java</option>
                                        <option value="javascript">JavaScript</option>
                                        <option value="typescript">TypeScript</option>
                                        <option value="python">Python</option>
                                        <option value="csharp">C#</option>
                                        <option value="cpp">C++</option>
                                        <option value="go">Go</option>
                                        <option value="ruby">Ruby</option>
                                        <option value="php">PHP</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="review-priority">Priority *</label>
                                    <select id="review-priority" class="form-select" required>
                                        <option value="LOW">Low</option>
                                        <option value="MEDIUM" selected>Medium</option>
                                        <option value="HIGH">High</option>
                                        <option value="URGENT">Urgent</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Code Content -->
                        <div class="form-section">
                            <h3>💻 Code Content</h3>
                            <div class="code-input-container">
                                <div class="code-input-header">
                                    <div class="code-input-tools">
                                        <button type="button" class="tool-btn" onclick="formatCodeContent()" title="Format Code">
                                            <span>🎨</span> Format
                                        </button>
                                        <button type="button" class="tool-btn" onclick="clearCodeContent()" title="Clear Code">
                                            <span>🗑️</span> Clear
                                        </button>
                                        <button type="button" class="tool-btn" onclick="loadSampleCode()" title="Load Sample">
                                            <span>📎</span> Sample
                                        </button>
                                        <label class="tool-btn file-upload-btn" title="Upload File">
                                            <span>📁</span> Upload
                                            <input type="file" id="code-file-upload" accept=".java,.js,.ts,.py,.cs,.cpp,.go,.rb,.php,.txt" onchange="handleFileUpload(event)" style="display: none;">
                                        </label>
                                    </div>
                                    <div class="code-stats">
                                        <span id="code-lines-count">0 lines</span>
                                        <span id="code-chars-count">0 characters</span>
                                    </div>
                                </div>
                                <textarea id="review-code-content" class="code-textarea" required
                                         placeholder="Paste your code here or upload a file..."
                                         oninput="updateCodeStats()"></textarea>
                            </div>
                        </div>

                        <!-- Submit Actions -->
                        <div class="form-actions code-review-actions">
                            <button type="button" class="btn-secondary" onclick="resetCodeReviewForm()">Reset Form</button>
                            <button type="button" class="btn-secondary" onclick="previewSubmission()">Preview</button>
                            <button type="submit" class="btn-primary submit-btn">
                                <span class="btn-icon">🚀</span>
                                Submit for Review
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Reviews Management Tab Content -->
        <div id="reviews-tab" class="tab-content">
            <div class="reviews-container">
                <div class="reviews-header">
                    <div class="reviews-title-section">
                        <h1>📋 Review Management</h1>
                        <p class="reviews-subtitle">Track and manage all code review submissions</p>
                    </div>
                    <div class="reviews-actions">
                        <button class="btn-primary" onclick="refreshReviews()">
                            <span class="btn-icon">🔄</span>
                            Refresh
                        </button>
                    </div>
                </div>

                <div class="reviews-controls">
                    <div class="search-container">
                        <input type="text" id="reviews-search" class="search-input" placeholder="🔍 Search reviews by ID, submitter, or project..." oninput="searchReviews()">
                    </div>
                    <div class="filter-container">
                        <select id="reviews-status-filter" class="filter-select" onchange="filterReviews()">
                            <option value="all">All Status</option>
                            <option value="PENDING">Pending</option>
                            <option value="IN_PROGRESS">In Progress</option>
                            <option value="COMPLETED">Completed</option>
                            <option value="FAILED">Failed</option>
                            <option value="CANCELLED">Cancelled</option>
                        </select>
                        <select id="reviews-priority-filter" class="filter-select" onchange="filterReviews()">
                            <option value="all">All Priorities</option>
                            <option value="LOW">Low</option>
                            <option value="MEDIUM">Medium</option>
                            <option value="HIGH">High</option>
                            <option value="URGENT">Urgent</option>
                        </select>
                        <select id="reviews-project-filter" class="filter-select" onchange="filterReviews()">
                            <option value="all">All Projects</option>
                        </select>
                    </div>
                </div>

                <div class="reviews-stats">
                    <div class="stat-card">
                        <span class="stat-number" id="pending-reviews-count">0</span>
                        <span class="stat-label">Pending</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="in-progress-reviews-count">0</span>
                        <span class="stat-label">In Progress</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="completed-reviews-count">0</span>
                        <span class="stat-label">Completed</span>
                    </div>
                </div>

                <div class="reviews-list" id="reviews-list">
                    <!-- Reviews will be loaded dynamically -->
                </div>
            </div>
        </div>

        <!-- Admin Tab Content -->
        <div id="admin-tab" class="tab-content">
            <div class="admin-container">
                <div class="admin-header">
                    <div class="admin-title-section">
                        <h1>⚙️ Admin Panel</h1>
                        <p class="admin-subtitle">System administration and configuration</p>
                    </div>
                </div>

                <div class="admin-grid">
                    <!-- System Settings -->
                    <div class="admin-section">
                        <h2>📧 Email Configuration</h2>
                        <div class="admin-form">
                            <div class="form-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" id="email-enabled">
                                    Enable Email Notifications
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="email-from">From Email</label>
                                <input type="email" id="email-from" class="form-input" placeholder="noreply@company.com">
                            </div>
                            <div class="form-group">
                                <label for="base-url">Base URL</label>
                                <input type="url" id="base-url" class="form-input" placeholder="http://localhost:3000">
                            </div>
                            <div class="form-actions">
                                <button class="btn-primary" onclick="saveEmailConfig()">Save Configuration</button>
                                <button class="btn-secondary" onclick="testEmailConfig()">Test Email</button>
                            </div>
                        </div>
                    </div>

                    <!-- AI Configuration -->
                    <div class="admin-section">
                        <h2>🤖 AI Configuration</h2>
                        <div class="admin-form">
                            <div class="form-group">
                                <label for="ai-service-status">AI Service Status</label>
                                <div class="status-indicator" id="ai-service-status">
                                    <span class="status-dot" id="ai-status-indicator"></span>
                                    <span id="ai-status-label">Checking...</span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="ai-model">AI Model</label>
                                <select id="ai-model" class="form-select">
                                    <option value="claude-3-5-sonnet">Claude 3.5 Sonnet</option>
                                    <option value="claude-3-haiku">Claude 3 Haiku</option>
                                </select>
                            </div>
                            <div class="form-actions">
                                <button class="btn-primary" onclick="saveAIConfig()">Save Configuration</button>
                                <button class="btn-secondary" onclick="testAIConnection()">Test Connection</button>
                            </div>
                        </div>
                    </div>

                    <!-- Database Management -->
                    <div class="admin-section">
                        <h2>🗄 Database Management</h2>
                        <div class="admin-form">
                            <div class="form-group">
                                <label>Database Status</label>
                                <div class="status-indicator">
                                    <span class="status-dot online"></span>
                                    <span>H2 In-Memory Database</span>
                                </div>
                            </div>
                            <div class="form-actions">
                                <button class="btn-secondary" onclick="openH2Console()">Open H2 Console</button>
                                <button class="btn-secondary" onclick="exportData()">Export Data</button>
                                <button class="btn-danger" onclick="clearDatabase()">Clear Database</button>
                            </div>
                        </div>
                    </div>

                    <!-- System Statistics -->
                    <div class="admin-section">
                        <h2>📊 System Statistics</h2>
                        <div class="stats-grid admin-stats">
                            <div class="stat-item">
                                <span class="stat-label">Total Teams</span>
                                <span class="stat-value" id="admin-teams-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Total Projects</span>
                                <span class="stat-value" id="admin-projects-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Total Reviews</span>
                                <span class="stat-value" id="admin-reviews-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Total Prompts</span>
                                <span class="stat-value" id="admin-prompts-count">0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Prompt Form -->
    <div id="prompt-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="prompt-modal-title">Add New Prompt</h3>
                <button class="close-btn" onclick="hidePromptModal()">&times;</button>
            </div>
            <form id="prompt-form" class="form">
                <input type="hidden" id="prompt-id">

                <div class="form-group">
                    <label for="prompt-title">Title *</label>
                    <input type="text" id="prompt-title" class="form-input" required maxlength="200">
                </div>

                <div class="form-group">
                    <label for="prompt-category">Category *</label>
                    <select id="prompt-category" class="form-select" required>
                        <option value="">Select a category</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="prompt-description">Description</label>
                    <textarea id="prompt-description" class="form-textarea" rows="3" maxlength="1000"></textarea>
                </div>

                <div class="form-group">
                    <label for="prompt-content">Content *</label>
                    <textarea id="prompt-content" class="form-textarea" rows="10" required maxlength="5000"></textarea>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="prompt-active" checked>
                        Active
                    </label>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hidePromptModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Save Prompt</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal for Category Form -->
    <div id="category-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="category-modal-title">Add New Category</h3>
                <button class="close-btn" onclick="hideCategoryModal()">&times;</button>
            </div>
            <form id="category-form" class="form">
                <input type="hidden" id="category-id">

                <div class="form-group">
                    <label for="category-name">Name *</label>
                    <input type="text" id="category-name" class="form-input" required maxlength="100">
                </div>

                <div class="form-group">
                    <label for="category-description">Description</label>
                    <textarea id="category-description" class="form-textarea" rows="3" maxlength="500"></textarea>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hideCategoryModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Save Category</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Confirm Delete Modal -->
    <div id="confirm-modal" class="modal hidden">
        <div class="modal-content small">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
                <button class="close-btn" onclick="hideConfirmModal()">&times;</button>
            </div>
            <div class="modal-body">
                <p id="confirm-message">Are you sure you want to delete this item?</p>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-secondary" onclick="hideConfirmModal()">Cancel</button>
                <button type="button" class="btn-danger" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>

    <!-- Modal for Team Form -->
    <div id="team-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="team-modal-title">Add New Team</h3>
                <button class="close-btn" onclick="hideTeamModal()">&times;</button>
            </div>
            <form id="team-form" class="form">
                <input type="hidden" id="team-id">

                <div class="form-group">
                    <label for="team-name">Team Name *</label>
                    <input type="text" id="team-name" class="form-input" required maxlength="255" placeholder="Engineering Team">
                </div>

                <div class="form-group">
                    <label for="team-description">Description</label>
                    <textarea id="team-description" class="form-textarea" rows="3" maxlength="1000" placeholder="Brief description of the team's responsibilities"></textarea>
                </div>

                <div class="form-group">
                    <label for="team-lead-email">Team Lead Email</label>
                    <input type="email" id="team-lead-email" class="form-input" placeholder="team.lead@company.com">
                </div>

                <div class="form-group">
                    <label for="team-notification-emails">Notification Emails</label>
                    <textarea id="team-notification-emails" class="form-textarea" rows="2" placeholder="email1@company.com, email2@company.com" maxlength="2000"></textarea>
                    <small class="form-help">Comma-separated list of emails for notifications</small>
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="team-active" checked>
                        Active Team
                    </label>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hideTeamModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Save Team</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal for Project Form -->
    <div id="project-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="project-modal-title">Add New Project</h3>
                <button class="close-btn" onclick="hideProjectModal()">&times;</button>
            </div>
            <form id="project-form" class="form">
                <input type="hidden" id="project-id">

                <div class="form-group">
                    <label for="project-name">Project Name *</label>
                    <input type="text" id="project-name" class="form-input" required maxlength="255" placeholder="My Awesome Project">
                </div>

                <div class="form-group">
                    <label for="project-team">Team *</label>
                    <select id="project-team" class="form-select" required>
                        <option value="">Select a team</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="project-description">Description</label>
                    <textarea id="project-description" class="form-textarea" rows="3" maxlength="1000" placeholder="Brief description of the project"></textarea>
                </div>

                <div class="form-group">
                    <label for="project-repository-url">Repository URL</label>
                    <input type="url" id="project-repository-url" class="form-input" placeholder="https://github.com/company/project">
                </div>

                <div class="form-group">
                    <label for="project-branch-name">Default Branch</label>
                    <input type="text" id="project-branch-name" class="form-input" placeholder="main" value="main">
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="project-active" checked>
                        Active Project
                    </label>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="hideProjectModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Save Project</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Review Details Modal -->
    <div id="review-details-modal" class="modal hidden">
        <div class="modal-content large">
            <div class="modal-header">
                <h3 id="review-details-title">Review Details</h3>
                <button class="close-btn" onclick="hideReviewDetailsModal()">&times;</button>
            </div>
            <div class="modal-body" id="review-details-content">
                <!-- Review details will be populated here -->
            </div>
            <div class="form-actions">
                <button type="button" class="btn-secondary" onclick="hideReviewDetailsModal()">Close</button>
                <button type="button" class="btn-primary" id="download-review-btn" onclick="downloadReviewReport()">Download Report</button>
            </div>
        </div>
    </div>

    <!-- JavaScript Files -->
    <script src="js/config.js"></script>
    <script src="js/utils.js"></script>
    <script src="js/ui.js"></script>
    <script src="js/api.js"></script>
    <script src="js/dashboard.js"></script>
    <script src="js/teams.js"></script>
    <script src="js/projects.js"></script>
    <script src="js/code-review-submission.js"></script>
    <script src="js/reviews-management.js"></script>
    <script src="js/admin.js"></script>
    <script src="js/code-editor.js"></script>
    <script src="js/syntax-highlighter.js"></script>
    <script src="js/enhanced-results.js"></script>
    <script src="js/syntax-demo.js"></script>
    <script src="js/enhanced-prompts.js"></script>
    <script src="js/prompts.js"></script>
    <script src="js/categories.js"></script>
    <script src="js/ai-review.js"></script>
    <script src="js/project-analyzer.js"></script>
    <script src="js/app.js"></script>
</body>
</html>
