// pom.xml dependencies (add these to your pom.xml)
/*
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-stream</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-logging</artifactId>
    </dependency>
</dependencies>
*/

// 1. Entity/DTO Classes
package com.example.abinitio.dto;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;

public class AbinitioRequest {
    @NotBlank(message = "Entity name is required")
    private String entityName;

    @NotNull(message = "Flow status is required")
    private FlowStatus flowStatus;

    private String requestId;
    private LocalDateTime receivedTime;
    private String source;
    private String correlationId;

    // Constructors
    public AbinitioRequest() {
        this.receivedTime = LocalDateTime.now();
    }

    public AbinitioRequest(String entityName, FlowStatus flowStatus) {
        this();
        this.entityName = entityName;
        this.flowStatus = flowStatus;
    }

    // Getters and Setters
    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public LocalDateTime getReceivedTime() { return receivedTime; }
    public void setReceivedTime(LocalDateTime receivedTime) { this.receivedTime = receivedTime; }

    public String getSource() { return source; }
    public void setSource(String source) { this.source = source; }

    public String getCorrelationId() { return correlationId; }
    public void setCorrelationId(String correlationId) { this.correlationId = correlationId; }
}

// 2. Audit Request DTO
package com.example.abinitio.dto;

import java.time.LocalDateTime;

public class AuditRequest {
    private String auditId;
    private String requestId;
    private String entityName;
    private FlowStatus flowStatus;
    private String operation;
    private String status;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private String errorMessage;
    private String userId;
    private String source;
    private String correlationId;

    // Constructors
    public AuditRequest() {
        this.startTime = LocalDateTime.now();
    }

    public AuditRequest(AbinitioRequest abinitioRequest) {
        this();
        this.requestId = abinitioRequest.getRequestId();
        this.entityName = abinitioRequest.getEntityName();
        this.flowStatus = abinitioRequest.getFlowStatus();
        this.source = abinitioRequest.getSource() != null ? abinitioRequest.getSource() : "SQS_LISTENER";
        this.correlationId = abinitioRequest.getCorrelationId();
        this.operation = "FLOW_PROCESSING";
        this.status = "IN_PROGRESS";
    }

    // Factory method to create audit request from abinitio request
    public static AuditRequest fromAbinitioRequest(AbinitioRequest abinitioRequest) {
        return new AuditRequest(abinitioRequest);
    }

    // Getters and Setters
    public String getAuditId() { return auditId; }
    public void setAuditId(String auditId) { this.auditId = auditId; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getOperation() { return operation; }
    public void setOperation(String operation) { this.operation = operation; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public LocalDateTime getStartTime() { return startTime; }
    public void setStartTime(LocalDateTime startTime) { this.startTime = startTime; }

    public LocalDateTime getEndTime() { return endTime; }
    public void setEndTime(LocalDateTime endTime) { this.endTime = endTime; }

    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }

    public String getUserId() { return userId; }
    public void setUserId(String userId) { this.userId = userId; }

    public String getSource() { return source; }
    public void setSource(String source) { this.source = source; }

    public String getCorrelationId() { return correlationId; }
    public void setCorrelationId(String correlationId) { this.correlationId = correlationId; }

    // Helper methods
    public void markAsCompleted() {
        this.status = "COMPLETED";
        this.endTime = LocalDateTime.now();
    }

    public void markAsFailed(String errorMessage) {
        this.status = "FAILED";
        this.endTime = LocalDateTime.now();
        this.errorMessage = errorMessage;
    }
}

// 3. Flow Status Enum
package com.example.abinitio.enums;

public enum FlowStatus {
    FLOW_ONE("FLOW_ONE"),
    FLOW_TWO("FLOW_TWO"),
    UNKNOWN("UNKNOWN");

    private final String value;

    FlowStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public static FlowStatus fromString(String status) {
        if (status == null) {
            return UNKNOWN;
        }

        for (FlowStatus flowStatus : FlowStatus.values()) {
            if (flowStatus.value.equalsIgnoreCase(status.trim())) {
                return flowStatus;
            }
        }
        return UNKNOWN;
    }
}

// 4. Common Service Caller
package com.example.abinitio.service;

import com.example.abinitio.dto.AbinitioRequest;
import com.example.abinitio.dto.AuditRequest;
import com.example.abinitio.enums.FlowStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class CommonServiceCaller {

    private static final Logger logger = LoggerFactory.getLogger(CommonServiceCaller.class);

    public void processFlowOne(AbinitioRequest request, AuditRequest auditRequest) {
        logger.info("Processing Flow One for entity: {} with audit ID: {}",
                   request.getEntityName(), auditRequest.getAuditId());

        try {
            // Flow One specific operations
            performFlowOneOperations(request, auditRequest);

            auditRequest.markAsCompleted();
            logger.info("Flow One processing completed successfully for entity: {}",
                       request.getEntityName());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Flow One for entity: {}",
                        request.getEntityName(), e);
            throw new RuntimeException("Flow One processing failed: " + e.getMessage(), e);
        }
    }

    public void processFlowTwo(AbinitioRequest request, AuditRequest auditRequest) {
        logger.info("Processing Flow Two for entity: {} with audit ID: {}",
                   request.getEntityName(), auditRequest.getAuditId());

        try {
            // Flow Two specific operations
            performFlowTwoOperations(request, auditRequest);

            auditRequest.markAsCompleted();
            logger.info("Flow Two processing completed successfully for entity: {}",
                       request.getEntityName());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Flow Two for entity: {}",
                        request.getEntityName(), e);
            throw new RuntimeException("Flow Two processing failed: " + e.getMessage(), e);
        }
    }

    private void performFlowOneOperations(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Executing Flow One operations for entity: {} with audit: {}",
                    request.getEntityName(), auditRequest.getAuditId());

        // Flow One specific business logic
        // - Data validation for Flow One
        // - Database operations specific to Flow One
        // - External API calls for Flow One
        // - File processing for Flow One

        auditRequest.setOperation("FLOW_ONE_PROCESSING");

        // Simulate processing time
        simulateProcessing(1000);

        logger.debug("Flow One operations completed for entity: {}", request.getEntityName());
    }

    private void performFlowTwoOperations(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Executing Flow Two operations for entity: {} with audit: {}",
                    request.getEntityName(), auditRequest.getAuditId());

        // Flow Two specific business logic
        // - Data validation for Flow Two
        // - Database operations specific to Flow Two
        // - External API calls for Flow Two
        // - File processing for Flow Two

        auditRequest.setOperation("FLOW_TWO_PROCESSING");

        // Simulate processing time
        simulateProcessing(1500);

        logger.debug("Flow Two operations completed for entity: {}", request.getEntityName());
    }

    private void simulateProcessing(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Processing interrupted", e);
        }
    }
}

// 5. SQS Listener with Flow Router Logic
package com.example.abinitio.listener;

import com.example.abinitio.dto.AbinitioRequest;
import com.example.abinitio.dto.AuditRequest;
import com.example.abinitio.enums.FlowStatus;
import com.example.abinitio.service.CommonServiceCaller;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.util.Set;
import java.util.UUID;

@Component
@EnableBinding(Sink.class)
public class SQSListener {

    private static final Logger logger = LoggerFactory.getLogger(SQSListener.class);

    private final CommonServiceCaller commonServiceCaller;
    private final Validator validator;

    public SQSListener(CommonServiceCaller commonServiceCaller, Validator validator) {
        this.commonServiceCaller = commonServiceCaller;
        this.validator = validator;
    }

    @StreamListener(Sink.INPUT)
    public void handleAbinitioRequest(@Payload AbinitioRequest request) {
        String requestId = UUID.randomUUID().toString();
        request.setRequestId(requestId);

        logger.info("Received Abinitio request with ID: {} for entity: {} with flow status: {}",
                   requestId, request.getEntityName(), request.getFlowStatus());

        // Create audit request from abinitio request
        AuditRequest auditRequest = AuditRequest.fromAbinitioRequest(request);
        auditRequest.setAuditId(UUID.randomUUID().toString());

        try {
            // Validate the incoming request
            validateRequest(request);

            logger.info("Starting flow processing for request ID: {} with audit ID: {}",
                       requestId, auditRequest.getAuditId());

            // Flow Router Logic using Switch Case
            routeFlowAndProcess(request, auditRequest);

            logger.info("Successfully processed request ID: {} with final audit status: {}",
                       requestId, auditRequest.getStatus());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Abinitio request ID: {} with audit ID: {}",
                        requestId, auditRequest.getAuditId(), e);

            // Handle processing error
            handleProcessingError(request, auditRequest, e);
        } finally {
            // Log final audit information
            logAuditInformation(auditRequest);
        }
    }

    /**
     * Flow Router Logic - Switch Case Implementation
     */
    private void routeFlowAndProcess(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Routing flow for entity: {} with status: {}",
                    request.getEntityName(), request.getFlowStatus());

        switch (request.getFlowStatus()) {
            case FLOW_ONE:
                logger.info("Routing to Flow One for entity: {}", request.getEntityName());
                auditRequest.setOperation("FLOW_ONE_ROUTING");
                commonServiceCaller.processFlowOne(request, auditRequest);
                break;

            case FLOW_TWO:
                logger.info("Routing to Flow Two for entity: {}", request.getEntityName());
                auditRequest.setOperation("FLOW_TWO_ROUTING");
                commonServiceCaller.processFlowTwo(request, auditRequest);
                break;

            case UNKNOWN:
            default:
                String errorMessage = String.format("Unsupported flow status: %s for entity: %s",
                                                   request.getFlowStatus(), request.getEntityName());
                logger.warn(errorMessage);
                auditRequest.setOperation("UNKNOWN_FLOW_ROUTING");
                throw new IllegalArgumentException(errorMessage);
        }
    }

    private void validateRequest(AbinitioRequest request) {
        Set<ConstraintViolation<AbinitioRequest>> violations = validator.validate(request);
        if (!violations.isEmpty()) {
            StringBuilder sb = new StringBuilder("Validation errors: ");
            for (ConstraintViolation<AbinitioRequest> violation : violations) {
                sb.append(violation.getMessage()).append("; ");
            }
            throw new IllegalArgumentException(sb.toString());
        }

        // Additional business validation
        if (request.getEntityName() != null && request.getEntityName().trim().isEmpty()) {
            throw new IllegalArgumentException("Entity name cannot be empty");
        }
    }

    private void handleProcessingError(AbinitioRequest request, AuditRequest auditRequest, Exception e) {
        logger.error("Processing failed for request ID: {} - Entity: {} - Flow: {}",
                    request.getRequestId(), request.getEntityName(), request.getFlowStatus());

        // Error handling strategies:
        // 1. Send to dead letter queue
        // 2. Store error details in database
        // 3. Send notification alerts
        // 4. Implement retry mechanism

        // For now, just log the error details
        logErrorDetails(request, auditRequest, e);
    }

    private void logErrorDetails(AbinitioRequest request, AuditRequest auditRequest, Exception e) {
        logger.error("=== ERROR DETAILS ===");
        logger.error("Request ID: {}", request.getRequestId());
        logger.error("Audit ID: {}", auditRequest.getAuditId());
        logger.error("Entity Name: {}", request.getEntityName());
        logger.error("Flow Status: {}", request.getFlowStatus());
        logger.error("Error Message: {}", e.getMessage());
        logger.error("Exception Type: {}", e.getClass().getSimpleName());
        logger.error("=== END ERROR DETAILS ===");
    }

    private void logAuditInformation(AuditRequest auditRequest) {
        logger.info("=== AUDIT SUMMARY ===");
        logger.info("Audit ID: {}", auditRequest.getAuditId());
        logger.info("Request ID: {}", auditRequest.getRequestId());
        logger.info("Entity Name: {}", auditRequest.getEntityName());
        logger.info("Flow Status: {}", auditRequest.getFlowStatus());
        logger.info("Operation: {}", auditRequest.getOperation());
        logger.info("Final Status: {}", auditRequest.getStatus());
        logger.info("Start Time: {}", auditRequest.getStartTime());
        logger.info("End Time: {}", auditRequest.getEndTime());
        if (auditRequest.getErrorMessage() != null) {
            logger.info("Error Message: {}", auditRequest.getErrorMessage());
        }
        logger.info("=== END AUDIT SUMMARY ===");
    }
}

// 6. Configuration Class
package com.example.abinitio.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

@Configuration
@EnableBinding(Sink.class)
public class AbinitioConfig {

    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);
        mapper.registerModule(new JavaTimeModule());
        return mapper;
    }

    @Bean
    public Validator validator() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        return factory.getValidator();
    }
}

// 7. Main Application Class
package com.example.abinitio;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AbinitioFlowApplication {

    public static void main(String[] args) {
        SpringApplication.run(AbinitioFlowApplication.class, args);
    }
}

// 8. Application Properties (application.yml)
/*
spring:
  application:
    name: abinitio-flow-service
  cloud:
    stream:
      bindings:
        input:
          destination: abinitio-requests
          group: abinitio-flow-group
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
      rabbit:
        bindings:
          input:
            consumer:
              auto-bind-dlq: true
              republish-to-dlq: true

logging:
  level:
    com.example.abinitio: DEBUG
    org.springframework.cloud.stream: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/abinitio-flow.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
*/

==============

// Complete Test Setup with Main Method

// 1. Missing Enums and DTOs
package com.example.abinitio.enums;

public enum FlowStatus {
    FLOW_ONE("FLOW_ONE"),
    FLOW_TWO("FLOW_TWO"),
    UNKNOWN("UNKNOWN");

    private final String value;

    FlowStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}

package com.example.abinitio.dto;

import com.example.abinitio.enums.FlowStatus;
import java.time.LocalDateTime;

public class AbinitioRequest {
    private String entityName;
    private FlowStatus flowStatus;
    private String requestId;
    private LocalDateTime receivedTime;

    public AbinitioRequest() {
        this.receivedTime = LocalDateTime.now();
    }

    public AbinitioRequest(String entityName, FlowStatus flowStatus) {
        this();
        this.entityName = entityName;
        this.flowStatus = flowStatus;
    }

    // Getters and Setters
    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public LocalDateTime getReceivedTime() { return receivedTime; }
    public void setReceivedTime(LocalDateTime receivedTime) { this.receivedTime = receivedTime; }
}

package com.example.abinitio.dto;

import java.time.LocalDateTime;

public class AuditRequest {
    private String auditId;
    private String requestId;
    private String entityName;
    private String operation;
    private String status;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private String errorMessage;

    public AuditRequest() {
        this.startTime = LocalDateTime.now();
        this.status = "IN_PROGRESS";
    }

    public AuditRequest(AbinitioRequest abinitioRequest) {
        this();
        this.requestId = abinitioRequest.getRequestId();
        this.entityName = abinitioRequest.getEntityName();
        this.operation = "FLOW_PROCESSING";
    }

    public static AuditRequest fromAbinitioRequest(AbinitioRequest abinitioRequest) {
        return new AuditRequest(abinitioRequest);
    }

    public void markAsCompleted() {
        this.status = "COMPLETED";
        this.endTime = LocalDateTime.now();
    }

    public void markAsFailed(String errorMessage) {
        this.status = "FAILED";
        this.endTime = LocalDateTime.now();
        this.errorMessage = errorMessage;
    }

    // Getters and Setters
    public String getAuditId() { return auditId; }
    public void setAuditId(String auditId) { this.auditId = auditId; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public String getOperation() { return operation; }
    public void setOperation(String operation) { this.operation = operation; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public LocalDateTime getStartTime() { return startTime; }
    public void setStartTime(LocalDateTime startTime) { this.startTime = startTime; }

    public LocalDateTime getEndTime() { return endTime; }
    public void setEndTime(LocalDateTime endTime) { this.endTime = endTime; }

    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }
}

// 2. Mock Spring Components for Testing
package com.example.abinitio.mock;

import com.example.abinitio.chain.AbstractFlowHandler;
import com.example.abinitio.context.FlowContext;
import java.util.Map;

// Mock Read Instruction Handler
public class MockReadInstructionHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "READ_INSTRUCTION";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📖 Reading instruction file from S3 for entity: " + context.getRequest().getEntityName());

        String instructionFile = String.format("{\"entity\":\"%s\",\"instructions\":[\"process\",\"validate\"]}",
                                             context.getRequest().getEntityName());
        context.addContextData("instructionFile", instructionFile);

        System.out.println("    ✅ Instruction file read successfully");
        Thread.sleep(100); // Simulate processing time
    }
}

// Mock Prehook Handler
public class MockPrehookHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "PREHOOK";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔧 Executing prehook operations for entity: " + context.getRequest().getEntityName());

        String instructionFile = context.getContextData("instructionFile", String.class);
        Object genericRequest = Map.of("converted", true, "source", instructionFile);
        context.addContextData("genericRequest", genericRequest);

        System.out.println("    ✅ Prehook operations completed");
        Thread.sleep(150);
    }
}

// Mock Validate Handler
public class MockValidateHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "VALIDATE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔍 Executing validation for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Performing MR validation");
        context.addContextData("mrValidationResult", "PASSED");

        System.out.println("      - Performing HCR validation (3 types)");
        context.addContextData("hcrValidationResult", "PASSED");

        System.out.println("    ✅ Validation completed successfully");
        Thread.sleep(200);
    }
}

// Mock Derive Handler
public class MockDeriveHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "DERIVE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📊 Executing derive operations for entity: " + context.getRequest().getEntityName());

        context.addContextData("deriveResult", "COMPLETED");

        System.out.println("    ✅ Derive operations completed");
        Thread.sleep(120);
    }
}

// Mock Create Context ID Handler
public class MockCreateContextIdHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "CREATE_CONTEXT_ID";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🆔 Creating context ID for entity: " + context.getRequest().getEntityName());

        String contextId = java.util.UUID.randomUUID().toString().substring(0, 8);
        context.addContextData("contextId", contextId);

        System.out.println("    ✅ Context ID created: " + contextId);
        Thread.sleep(50);
    }
}

// Mock Create File Handler
public class MockCreateFileHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "CREATE_FILE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📁 Creating files for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Creating adjust file");
        context.addContextData("adjustFile", "adjust_file_created");

        System.out.println("      - Creating base files");
        context.addContextData("keyFile", "key_created");
        context.addContextData("baseAdjustFile", "base_adjust_file_created");
        context.addContextData("baseFile", "base_file_created");

        System.out.println("    ✅ File creation completed");
        Thread.sleep(180);
    }
}

// Mock Perform Adjustment Handler
public class MockPerformAdjustmentHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "PERFORM_ADJUSTMENT";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    ⚙️ Performing comprehensive adjustment operations for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Processing adjustment algorithms");
        context.addContextData("adjustmentResult", "COMPLETED");

        System.out.println("    ✅ Adjustment operations completed");
        Thread.sleep(300); // Longer processing time
    }
}

// Mock Send Notification Handler
public class MockSendNotificationHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "SEND_NOTIFICATION";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📧 Sending notification for entity: " + context.getRequest().getEntityName());

        String message = String.format("Processing completed for entity: %s", context.getRequest().getEntityName());
        context.addContextData("notificationSent", true);

        System.out.println("    ✅ Notification sent: " + message);
        Thread.sleep(80);
    }
}

// Mock Post Hook Handler
public class MockPostHookHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "POST_HOOK";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔚 Executing post-hook operations for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Converting generic request back to instruction");
        context.addContextData("finalInstruction", "instruction_converted");

        System.out.println("      - Creating package entry");
        context.addContextData("packageEntry", "package_entry_created");

        System.out.println("      - Sending final notification");
        context.addContextData("finalNotificationSent", true);

        System.out.println("    ✅ Post-hook operations completed");
        Thread.sleep(100);
    }
}

// 3. Mock Flow Configuration Strategy
public class MockFlowConfigurationStrategy {

    private static final Map<com.example.abinitio.enums.FlowStatus, java.util.Set<String>> FLOW_SKIP_CONFIGURATION = Map.of(
        com.example.abinitio.enums.FlowStatus.FLOW_ONE, java.util.Set.of("DERIVE", "PERFORM_ADJUSTMENT"), // Skip 2 steps
        com.example.abinitio.enums.FlowStatus.FLOW_TWO, java.util.Set.of("VALIDATE"), // Skip 1 step
        com.example.abinitio.enums.FlowStatus.UNKNOWN, java.util.Set.of() // Execute all steps
    );

    public java.util.Set<String> getStepsToSkip(com.example.abinitio.enums.FlowStatus flowStatus) {
        return FLOW_SKIP_CONFIGURATION.getOrDefault(flowStatus, java.util.Set.of());
    }
}

// 4. Mock Chain Builder
public class MockFlowChainBuilder {

    public AbstractFlowHandler buildChain() {
        // Create all handlers
        MockReadInstructionHandler readInstructionHandler = new MockReadInstructionHandler();
        MockPrehookHandler prehookHandler = new MockPrehookHandler();
        MockValidateHandler validateHandler = new MockValidateHandler();
        MockDeriveHandler deriveHandler = new MockDeriveHandler();
        MockCreateContextIdHandler createContextIdHandler = new MockCreateContextIdHandler();
        MockCreateFileHandler createFileHandler = new MockCreateFileHandler();
        MockPerformAdjustmentHandler performAdjustmentHandler = new MockPerformAdjustmentHandler();
        MockSendNotificationHandler sendNotificationHandler = new MockSendNotificationHandler();
        MockPostHookHandler postHookHandler = new MockPostHookHandler();

        // Build the chain
        readInstructionHandler.setNext(prehookHandler);
        prehookHandler.setNext(validateHandler);
        validateHandler.setNext(deriveHandler);
        deriveHandler.setNext(createContextIdHandler);
        createContextIdHandler.setNext(createFileHandler);
        createFileHandler.setNext(performAdjustmentHandler);
        performAdjustmentHandler.setNext(sendNotificationHandler);
        sendNotificationHandler.setNext(postHookHandler);

        return readInstructionHandler; // Return first handler in chain
    }
}

// 5. Mock Common Service Caller
public class MockCommonServiceCaller {

    private final MockFlowChainBuilder chainBuilder;
    private final MockFlowConfigurationStrategy configStrategy;

    public MockCommonServiceCaller() {
        this.chainBuilder = new MockFlowChainBuilder();
        this.configStrategy = new MockFlowConfigurationStrategy();
    }

    public void processFlow(com.example.abinitio.dto.AbinitioRequest request, com.example.abinitio.dto.AuditRequest auditRequest) {
        long startTime = System.currentTimeMillis();

        System.out.println("🚀 Starting flow processing for entity: " + request.getEntityName() +
                          " with flow status: " + request.getFlowStatus());

        try {
            // Get steps to skip based on flow type
            java.util.Set<String> stepsToSkip = configStrategy.getStepsToSkip(request.getFlowStatus());

            System.out.println("⚙️  Flow configuration - Steps to skip: " + stepsToSkip + " for flow: " + request.getFlowStatus());
            System.out.println("📋 Executing flow steps:\n");

            // Create flow context
            com.example.abinitio.context.FlowContext context = new com.example.abinitio.context.FlowContext(request, auditRequest, stepsToSkip);

            // Build and execute chain
            AbstractFlowHandler chain = chainBuilder.buildChain();
            chain.handle(context);

            // Mark audit as completed if processing finished successfully
            if (context.shouldContinue()) {
                auditRequest.markAsCompleted();
                long duration = System.currentTimeMillis() - startTime;

                System.out.println("\n✅ Flow processing completed successfully for entity: " + request.getEntityName());
                System.out.println("⏱️  Total execution time: " + duration + "ms");
                System.out.println("📊 Steps executed: " + context.getContextData().keySet().size());
                System.out.println("🎯 Final status: " + auditRequest.getStatus());
            }

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            long duration = System.currentTimeMillis() - startTime;

            System.err.println("\n❌ Flow processing failed for entity: " + request.getEntityName());
            System.err.println("⏱️  Execution time before failure: " + duration + "ms");
            System.err.println("🔥 Error: " + e.getMessage());
            throw new RuntimeException("Flow processing failed: " + e.getMessage(), e);
        }
    }
}

// 6. Main Test Class
public class FlowProcessingTest {

    public static void main(String[] args) {
        System.out.println("=".repeat(80));
        System.out.println("🔬 ABINITIO FLOW PROCESSING TEST - CHAIN OF RESPONSIBILITY PATTERN");
        System.out.println("=".repeat(80));

        MockCommonServiceCaller serviceCaller = new MockCommonServiceCaller();

        // Test Case 1: FLOW_ONE (Skips DERIVE and PERFORM_ADJUSTMENT)
        testFlowOne(serviceCaller);

        System.out.println("\n" + "=".repeat(80) + "\n");

        // Test Case 2: FLOW_TWO (Skips VALIDATE)
        testFlowTwo(serviceCaller);

        System.out.println("\n" + "=".repeat(80) + "\n");

        // Test Case 3: UNKNOWN (Executes all steps)
        testUnknownFlow(serviceCaller);

        System.out.println("\n" + "=".repeat(80));
        System.out.println("🏁 ALL TESTS COMPLETED SUCCESSFULLY!");
        System.out.println("=".repeat(80));
    }

    private static void testFlowOne(MockCommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 1: FLOW_ONE (Should skip DERIVE and PERFORM_ADJUSTMENT)");
        System.out.println("-".repeat(60));

        try {
            // Create request for Flow One
            com.example.abinitio.dto.AbinitioRequest request = new com.example.abinitio.dto.AbinitioRequest(
                "CustomerEntity", com.example.abinitio.enums.FlowStatus.FLOW_ONE);
            request.setRequestId("REQ-001");

            // Create audit request
            com.example.abinitio.dto.AuditRequest auditRequest = com.example.abinitio.dto.AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-001");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ FLOW_ONE test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ FLOW_ONE test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void testFlowTwo(MockCommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 2: FLOW_TWO (Should skip VALIDATE)");
        System.out.println("-".repeat(60));

        try {
            // Create request for Flow Two
            com.example.abinitio.dto.AbinitioRequest request = new com.example.abinitio.dto.AbinitioRequest(
                "ProductEntity", com.example.abinitio.enums.FlowStatus.FLOW_TWO);
            request.setRequestId("REQ-002");

            // Create audit request
            com.example.abinitio.dto.AuditRequest auditRequest = com.example.abinitio.dto.AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-002");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ FLOW_TWO test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ FLOW_TWO test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void testUnknownFlow(MockCommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 3: UNKNOWN FLOW (Should execute all steps)");
        System.out.println("-".repeat(60));

        try {
            // Create request for Unknown Flow
            com.example.abinitio.dto.AbinitioRequest request = new com.example.abinitio.dto.AbinitioRequest(
                "OrderEntity", com.example.abinitio.enums.FlowStatus.UNKNOWN);
            request.setRequestId("REQ-003");

            // Create audit request
            com.example.abinitio.dto.AuditRequest auditRequest = com.example.abinitio.dto.AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-003");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ UNKNOWN FLOW test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ UNKNOWN FLOW test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

// 7. Expected Output Summary
/*
Expected Console Output:

================================================================================
🔬 ABINITIO FLOW PROCESSING TEST - CHAIN OF RESPONSIBILITY PATTERN
================================================================================
🧪 TEST CASE 1: FLOW_ONE (Should skip DERIVE and PERFORM_ADJUSTMENT)
------------------------------------------------------------
🚀 Starting flow processing for entity: CustomerEntity with flow status: FLOW_ONE
⚙️  Flow configuration - Steps to skip: [DERIVE, PERFORM_ADJUSTMENT] for flow: FLOW_ONE
📋 Executing flow steps:

    📖 Reading instruction file from S3 for entity: CustomerEntity
    ✅ Instruction file read successfully
    🔧 Executing prehook operations for entity: CustomerEntity
    ✅ Prehook operations completed
    🔍 Executing validation for entity: CustomerEntity
      - Performing MR validation
      - Performing HCR validation (3 types)
    ✅ Validation completed successfully
    🆔 Creating context ID for entity: CustomerEntity
    ✅ Context ID created: a1b2c3d4
    📁 Creating files for entity: CustomerEntity
      - Creating adjust file
      - Creating base files
    ✅ File creation completed
    📧 Sending notification for entity: CustomerEntity
    ✅ Notification sent: Processing completed for entity: CustomerEntity
    🔚 Executing post-hook operations for entity: CustomerEntity
      - Converting generic request back to instruction
      - Creating package entry
      - Sending final notification
    ✅ Post-hook operations completed

✅ Flow processing completed successfully for entity: CustomerEntity
⏱️  Total execution time: 650ms
📊 Steps executed: 6
🎯 Final status: COMPLETED
✅ FLOW_ONE test completed successfully!

================================================================================

🧪 TEST CASE 2: FLOW_TWO (Should skip VALIDATE)
------------------------------------------------------------
[Similar output but skipping VALIDATE step]

================================================================================

🧪 TEST CASE 3: UNKNOWN FLOW (Should execute all steps)
------------------------------------------------------------
[Similar output but executing ALL steps including DERIVE and PERFORM_ADJUSTMENT]

================================================================================
🏁 ALL TESTS COMPLETED SUCCESSFULLY!
================================================================================
*/

========================

// Complete Chain of Responsibility Test with Main Method

import java.time.LocalDateTime;
import java.util.*;

// 1. Required Enums and DTOs
enum FlowStatus {
    FLOW_ONE("FLOW_ONE"),
    FLOW_TWO("FLOW_TWO"),
    UNKNOWN("UNKNOWN");

    private final String value;

    FlowStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}

class AbinitioRequest {
    private String entityName;
    private FlowStatus flowStatus;
    private String requestId;
    private LocalDateTime receivedTime;

    public AbinitioRequest() {
        this.receivedTime = LocalDateTime.now();
    }

    public AbinitioRequest(String entityName, FlowStatus flowStatus) {
        this();
        this.entityName = entityName;
        this.flowStatus = flowStatus;
    }

    // Getters and Setters
    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public LocalDateTime getReceivedTime() { return receivedTime; }
    public void setReceivedTime(LocalDateTime receivedTime) { this.receivedTime = receivedTime; }
}

class AuditRequest {
    private String auditId;
    private String requestId;
    private String entityName;
    private String operation;
    private String status;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private String errorMessage;

    public AuditRequest() {
        this.startTime = LocalDateTime.now();
        this.status = "IN_PROGRESS";
    }

    public AuditRequest(AbinitioRequest abinitioRequest) {
        this();
        this.requestId = abinitioRequest.getRequestId();
        this.entityName = abinitioRequest.getEntityName();
        this.operation = "FLOW_PROCESSING";
    }

    public static AuditRequest fromAbinitioRequest(AbinitioRequest abinitioRequest) {
        return new AuditRequest(abinitioRequest);
    }

    public void markAsCompleted() {
        this.status = "COMPLETED";
        this.endTime = LocalDateTime.now();
    }

    public void markAsFailed(String errorMessage) {
        this.status = "FAILED";
        this.endTime = LocalDateTime.now();
        this.errorMessage = errorMessage;
    }

    // Getters and Setters
    public String getAuditId() { return auditId; }
    public void setAuditId(String auditId) { this.auditId = auditId; }

    public String getRequestId() { return requestId; }
    public String getEntityName() { return entityName; }
    public String getOperation() { return operation; }
    public String getStatus() { return status; }
    public LocalDateTime getStartTime() { return startTime; }
    public LocalDateTime getEndTime() { return endTime; }
    public String getErrorMessage() { return errorMessage; }
}

// 2. Flow Context
class FlowContext {
    private AbinitioRequest request;
    private AuditRequest auditRequest;
    private FlowStatus flowType;
    private Set<String> stepsToSkip;
    private Map<String, Object> contextData;
    private boolean shouldContinue;
    private String currentStep;

    public FlowContext(AbinitioRequest request, AuditRequest auditRequest, Set<String> stepsToSkip) {
        this.request = request;
        this.auditRequest = auditRequest;
        this.flowType = request.getFlowStatus();
        this.stepsToSkip = stepsToSkip != null ? stepsToSkip : Set.of();
        this.contextData = new HashMap<>();
        this.shouldContinue = true;
    }

    public boolean shouldSkipStep(String stepName) {
        return stepsToSkip.contains(stepName);
    }

    public void addContextData(String key, Object value) {
        contextData.put(key, value);
    }

    @SuppressWarnings("unchecked")
    public <T> T getContextData(String key, Class<T> type) {
        Object value = contextData.get(key);
        return (T) value;
    }

    public void stopProcessing() {
        this.shouldContinue = false;
    }

    // Getters
    public AbinitioRequest getRequest() { return request; }
    public AuditRequest getAuditRequest() { return auditRequest; }
    public FlowStatus getFlowType() { return flowType; }
    public boolean shouldContinue() { return shouldContinue; }
    public String getCurrentStep() { return currentStep; }
    public Map<String, Object> getContextData() { return contextData; }

    public void setCurrentStep(String currentStep) { this.currentStep = currentStep; }
}

// 3. Abstract Chain Handler
abstract class AbstractFlowHandler {

    protected AbstractFlowHandler nextHandler;

    public void setNext(AbstractFlowHandler nextHandler) {
        this.nextHandler = nextHandler;
    }

    public final void handle(FlowContext context) {
        String stepName = getStepName();
        context.setCurrentStep(stepName);

        if (!context.shouldContinue()) {
            System.out.println("⏹️  Processing stopped before step: " + stepName);
            return;
        }

        if (context.shouldSkipStep(stepName)) {
            System.out.println("⏭️  Skipping step: " + stepName + " for flow: " + context.getFlowType());
            processNext(context);
            return;
        }

        try {
            System.out.println("▶️  Executing step: " + stepName + " for entity: " + context.getRequest().getEntityName());
            long startTime = System.currentTimeMillis();

            executeStep(context);

            long duration = System.currentTimeMillis() - startTime;
            System.out.println("✅ Successfully completed step: " + stepName + " (" + duration + "ms)");
            processNext(context);
        } catch (Exception e) {
            System.err.println("❌ Error in step: " + stepName + " for entity: " + context.getRequest().getEntityName());
            System.err.println("   Error: " + e.getMessage());
            handleStepError(context, e);
        }
    }

    protected void processNext(FlowContext context) {
        if (nextHandler != null && context.shouldContinue()) {
            nextHandler.handle(context);
        }
    }

    protected void handleStepError(FlowContext context, Exception e) {
        context.getAuditRequest().markAsFailed("Error in step " + getStepName() + ": " + e.getMessage());
        context.stopProcessing();
        throw new RuntimeException("Step " + getStepName() + " failed", e);
    }

    protected abstract String getStepName();
    protected abstract void executeStep(FlowContext context) throws Exception;
}

// 4. Concrete Step Handlers
class ReadInstructionHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "READ_INSTRUCTION";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📖 Reading instruction file from S3 for entity: " + context.getRequest().getEntityName());

        String instructionFile = readInstructionFileFromS3(context);
        context.addContextData("instructionFile", instructionFile);

        System.out.println("    📄 Instruction file content loaded");
        Thread.sleep(100); // Simulate processing time
    }

    private String readInstructionFileFromS3(FlowContext context) {
        String entityName = context.getRequest().getEntityName();
        return String.format("{\"entity\":\"%s\",\"instructions\":[\"process\",\"validate\"]}", entityName);
    }
}

class PrehookHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "PREHOOK";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔧 Executing prehook operations for entity: " + context.getRequest().getEntityName());

        String instructionFile = context.getContextData("instructionFile", String.class);
        Object genericRequest = Map.of("converted", true, "source", instructionFile);
        context.addContextData("genericRequest", genericRequest);

        System.out.println("    📦 Package header entry created in Databricks");
        System.out.println("    📨 Prehook notification sent");

        Thread.sleep(150);
    }
}

class ValidateHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "VALIDATE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔍 Executing validation for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Performing MR validation");
        context.addContextData("mrValidationResult", "PASSED");

        System.out.println("      - Performing HCR validation (3 types)");
        context.addContextData("hcrValidationResult", "PASSED");

        System.out.println("    ✅ All validations passed");
        Thread.sleep(200);
    }
}

class DeriveHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "DERIVE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📊 Executing derive operations for entity: " + context.getRequest().getEntityName());

        context.addContextData("deriveResult", "COMPLETED");
        System.out.println("    🧮 Data derivation completed");

        Thread.sleep(120);
    }
}

class CreateContextIdHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "CREATE_CONTEXT_ID";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🆔 Creating context ID for entity: " + context.getRequest().getEntityName());

        String contextId = UUID.randomUUID().toString().substring(0, 8);
        context.addContextData("contextId", contextId);

        System.out.println("    🎯 Context ID created: " + contextId);
        Thread.sleep(50);
    }
}

class CreateFileHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "CREATE_FILE";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📁 Creating files for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Creating adjust file");
        context.addContextData("adjustFile", "adjust_file_created");

        System.out.println("      - Creating key file");
        context.addContextData("keyFile", "key_created");

        System.out.println("      - Creating base adjust file");
        context.addContextData("baseAdjustFile", "base_adjust_file_created");

        context.addContextData("baseFile", "base_file_created");
        System.out.println("    💾 All files created successfully");

        Thread.sleep(180);
    }
}

class PerformAdjustmentHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "PERFORM_ADJUSTMENT";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    ⚙️ Performing comprehensive adjustment operations for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Executing adjustment algorithms");
        System.out.println("      - Processing data transformations");
        context.addContextData("adjustmentResult", "COMPLETED");

        System.out.println("    🔄 Adjustment processing completed");
        Thread.sleep(300); // Longer processing time
    }
}

class SendNotificationHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "SEND_NOTIFICATION";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    📧 Sending notification for entity: " + context.getRequest().getEntityName());

        String message = String.format("Processing completed for entity: %s", context.getRequest().getEntityName());
        context.addContextData("notificationSent", true);

        System.out.println("    📤 Notification sent: " + message);
        Thread.sleep(80);
    }
}

class PostHookHandler extends AbstractFlowHandler {

    @Override
    protected String getStepName() {
        return "POST_HOOK";
    }

    @Override
    protected void executeStep(FlowContext context) throws Exception {
        System.out.println("    🔚 Executing post-hook operations for entity: " + context.getRequest().getEntityName());

        System.out.println("      - Converting generic request back to instruction");
        context.addContextData("finalInstruction", "instruction_converted");

        System.out.println("      - Creating final package entry");
        context.addContextData("packageEntry", "package_entry_created");

        System.out.println("      - Sending final notification");
        context.addContextData("finalNotificationSent", true);

        System.out.println("    🏁 Post-hook operations completed");
        Thread.sleep(100);
    }
}

// 5. Flow Configuration Strategy
class FlowConfigurationStrategy {

    private static final Map<FlowStatus, Set<String>> FLOW_SKIP_CONFIGURATION = Map.of(
        FlowStatus.FLOW_ONE, Set.of("DERIVE", "PERFORM_ADJUSTMENT"), // Skip 2 steps
        FlowStatus.FLOW_TWO, Set.of("VALIDATE"), // Skip 1 step
        FlowStatus.UNKNOWN, Set.of() // Execute all steps
    );

    public Set<String> getStepsToSkip(FlowStatus flowStatus) {
        return FLOW_SKIP_CONFIGURATION.getOrDefault(flowStatus, Set.of());
    }
}

// 6. Chain Builder
class FlowChainBuilder {

    public AbstractFlowHandler buildChain() {
        // Create all handlers
        ReadInstructionHandler readInstructionHandler = new ReadInstructionHandler();
        PrehookHandler prehookHandler = new PrehookHandler();
        ValidateHandler validateHandler = new ValidateHandler();
        DeriveHandler deriveHandler = new DeriveHandler();
        CreateContextIdHandler createContextIdHandler = new CreateContextIdHandler();
        CreateFileHandler createFileHandler = new CreateFileHandler();
        PerformAdjustmentHandler performAdjustmentHandler = new PerformAdjustmentHandler();
        SendNotificationHandler sendNotificationHandler = new SendNotificationHandler();
        PostHookHandler postHookHandler = new PostHookHandler();

        // Build the complete chain
        readInstructionHandler.setNext(prehookHandler);
        prehookHandler.setNext(validateHandler);
        validateHandler.setNext(deriveHandler);
        deriveHandler.setNext(createContextIdHandler);
        createContextIdHandler.setNext(createFileHandler);
        createFileHandler.setNext(performAdjustmentHandler);
        performAdjustmentHandler.setNext(sendNotificationHandler);
        sendNotificationHandler.setNext(postHookHandler);

        return readInstructionHandler; // Return first handler in chain
    }
}

// 7. Common Service Caller
class CommonServiceCaller {

    private final FlowChainBuilder chainBuilder;
    private final FlowConfigurationStrategy configStrategy;

    public CommonServiceCaller(FlowChainBuilder chainBuilder, FlowConfigurationStrategy configStrategy) {
        this.chainBuilder = chainBuilder;
        this.configStrategy = configStrategy;
    }

    public void processFlow(AbinitioRequest request, AuditRequest auditRequest) {
        long totalStartTime = System.currentTimeMillis();

        System.out.println("🚀 Starting flow processing for entity: " + request.getEntityName() +
                          " with flow status: " + request.getFlowStatus());

        try {
            // Get steps to skip based on flow type
            Set<String> stepsToSkip = configStrategy.getStepsToSkip(request.getFlowStatus());

            System.out.println("⚙️  Flow configuration - Steps to skip: " + stepsToSkip + " for flow: " + request.getFlowStatus());
            System.out.println("📋 Executing flow steps:\n");

            // Create flow context
            FlowContext context = new FlowContext(request, auditRequest, stepsToSkip);

            // Build and execute chain
            AbstractFlowHandler chain = chainBuilder.buildChain();
            chain.handle(context);

            // Mark audit as completed if processing finished successfully
            if (context.shouldContinue()) {
                auditRequest.markAsCompleted();
                long totalDuration = System.currentTimeMillis() - totalStartTime;

                System.out.println("\n🎉 Flow processing completed successfully for entity: " + request.getEntityName());
                System.out.println("⏱️  Total execution time: " + totalDuration + "ms");
                System.out.println("📊 Context data entries: " + context.getContextData().size());
                System.out.println("🎯 Final audit status: " + auditRequest.getStatus());

                // Show context data summary
                System.out.println("📦 Context Data Summary:");
                context.getContextData().forEach((key, value) ->
                    System.out.println("   " + key + ": " + value)
                );
            }

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            long totalDuration = System.currentTimeMillis() - totalStartTime;

            System.err.println("\n💥 Flow processing failed for entity: " + request.getEntityName());
            System.err.println("⏱️  Execution time before failure: " + totalDuration + "ms");
            System.err.println("🔥 Error: " + e.getMessage());
            throw new RuntimeException("Flow processing failed: " + e.getMessage(), e);
        }
    }
}

// 8. Main Test Class
public class ChainOfResponsibilityFlowTest {

    public static void main(String[] args) {
        System.out.println("=".repeat(100));
        System.out.println("🔬 ABINITIO FLOW PROCESSING TEST - CHAIN OF RESPONSIBILITY PATTERN");
        System.out.println("=".repeat(100));

        // Initialize components
        FlowChainBuilder chainBuilder = new FlowChainBuilder();
        FlowConfigurationStrategy configStrategy = new FlowConfigurationStrategy();
        CommonServiceCaller serviceCaller = new CommonServiceCaller(chainBuilder, configStrategy);

        // Test Case 1: FLOW_ONE (Skips DERIVE and PERFORM_ADJUSTMENT)
        testFlowOne(serviceCaller);

        System.out.println("\n" + "=".repeat(100) + "\n");

        // Test Case 2: FLOW_TWO (Skips VALIDATE)
        testFlowTwo(serviceCaller);

        System.out.println("\n" + "=".repeat(100) + "\n");

        // Test Case 3: UNKNOWN (Executes all steps)
        testUnknownFlow(serviceCaller);

        System.out.println("\n" + "=".repeat(100));
        System.out.println("🏆 ALL TESTS COMPLETED SUCCESSFULLY!");
        System.out.println("📈 Chain of Responsibility Pattern demonstrated with conditional step execution");
        System.out.println("=".repeat(100));
    }

    private static void testFlowOne(CommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 1: FLOW_ONE");
        System.out.println("📋 Expected: Skip DERIVE and PERFORM_ADJUSTMENT steps");
        System.out.println("🎯 Should execute: READ_INSTRUCTION → PREHOOK → VALIDATE → CREATE_CONTEXT_ID → CREATE_FILE → SEND_NOTIFICATION → POST_HOOK");
        System.out.println("-".repeat(80));

        try {
            // Create request for Flow One
            AbinitioRequest request = new AbinitioRequest("CustomerEntity", FlowStatus.FLOW_ONE);
            request.setRequestId("REQ-FLOW-001");

            // Create audit request
            AuditRequest auditRequest = AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-FLOW-001");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ FLOW_ONE test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ FLOW_ONE test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void testFlowTwo(CommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 2: FLOW_TWO");
        System.out.println("📋 Expected: Skip VALIDATE step");
        System.out.println("🎯 Should execute: READ_INSTRUCTION → PREHOOK → DERIVE → CREATE_CONTEXT_ID → CREATE_FILE → PERFORM_ADJUSTMENT → SEND_NOTIFICATION → POST_HOOK");
        System.out.println("-".repeat(80));

        try {
            // Create request for Flow Two
            AbinitioRequest request = new AbinitioRequest("ProductEntity", FlowStatus.FLOW_TWO);
            request.setRequestId("REQ-FLOW-002");

            // Create audit request
            AuditRequest auditRequest = AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-FLOW-002");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ FLOW_TWO test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ FLOW_TWO test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void testUnknownFlow(CommonServiceCaller serviceCaller) {
        System.out.println("🧪 TEST CASE 3: UNKNOWN FLOW");
        System.out.println("📋 Expected: Execute all steps (no skipping)");
        System.out.println("🎯 Should execute: ALL 9 STEPS in sequence");
        System.out.println("-".repeat(80));

        try {
            // Create request for Unknown Flow
            AbinitioRequest request = new AbinitioRequest("OrderEntity", FlowStatus.UNKNOWN);
            request.setRequestId("REQ-FLOW-003");

            // Create audit request
            AuditRequest auditRequest = AuditRequest.fromAbinitioRequest(request);
            auditRequest.setAuditId("AUDIT-FLOW-003");

            // Process flow
            serviceCaller.processFlow(request, auditRequest);

            System.out.println("✅ UNKNOWN FLOW test completed successfully!");

        } catch (Exception e) {
            System.err.println("❌ UNKNOWN FLOW test failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
}