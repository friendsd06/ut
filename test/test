// pom.xml dependencies (add these to your pom.xml)
/*
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-stream</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-logging</artifactId>
    </dependency>
</dependencies>
*/

// 1. Entity/DTO Classes
package com.example.abinitio.dto;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;

public class AbinitioRequest {
    @NotBlank(message = "Entity name is required")
    private String entityName;

    @NotNull(message = "Flow status is required")
    private FlowStatus flowStatus;

    private String requestId;
    private LocalDateTime receivedTime;
    private String source;
    private String correlationId;

    // Constructors
    public AbinitioRequest() {
        this.receivedTime = LocalDateTime.now();
    }

    public AbinitioRequest(String entityName, FlowStatus flowStatus) {
        this();
        this.entityName = entityName;
        this.flowStatus = flowStatus;
    }

    // Getters and Setters
    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public LocalDateTime getReceivedTime() { return receivedTime; }
    public void setReceivedTime(LocalDateTime receivedTime) { this.receivedTime = receivedTime; }

    public String getSource() { return source; }
    public void setSource(String source) { this.source = source; }

    public String getCorrelationId() { return correlationId; }
    public void setCorrelationId(String correlationId) { this.correlationId = correlationId; }
}

// 2. Audit Request DTO
package com.example.abinitio.dto;

import java.time.LocalDateTime;

public class AuditRequest {
    private String auditId;
    private String requestId;
    private String entityName;
    private FlowStatus flowStatus;
    private String operation;
    private String status;
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private String errorMessage;
    private String userId;
    private String source;
    private String correlationId;

    // Constructors
    public AuditRequest() {
        this.startTime = LocalDateTime.now();
    }

    public AuditRequest(AbinitioRequest abinitioRequest) {
        this();
        this.requestId = abinitioRequest.getRequestId();
        this.entityName = abinitioRequest.getEntityName();
        this.flowStatus = abinitioRequest.getFlowStatus();
        this.source = abinitioRequest.getSource() != null ? abinitioRequest.getSource() : "SQS_LISTENER";
        this.correlationId = abinitioRequest.getCorrelationId();
        this.operation = "FLOW_PROCESSING";
        this.status = "IN_PROGRESS";
    }

    // Factory method to create audit request from abinitio request
    public static AuditRequest fromAbinitioRequest(AbinitioRequest abinitioRequest) {
        return new AuditRequest(abinitioRequest);
    }

    // Getters and Setters
    public String getAuditId() { return auditId; }
    public void setAuditId(String auditId) { this.auditId = auditId; }

    public String getRequestId() { return requestId; }
    public void setRequestId(String requestId) { this.requestId = requestId; }

    public String getEntityName() { return entityName; }
    public void setEntityName(String entityName) { this.entityName = entityName; }

    public FlowStatus getFlowStatus() { return flowStatus; }
    public void setFlowStatus(FlowStatus flowStatus) { this.flowStatus = flowStatus; }

    public String getOperation() { return operation; }
    public void setOperation(String operation) { this.operation = operation; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public LocalDateTime getStartTime() { return startTime; }
    public void setStartTime(LocalDateTime startTime) { this.startTime = startTime; }

    public LocalDateTime getEndTime() { return endTime; }
    public void setEndTime(LocalDateTime endTime) { this.endTime = endTime; }

    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }

    public String getUserId() { return userId; }
    public void setUserId(String userId) { this.userId = userId; }

    public String getSource() { return source; }
    public void setSource(String source) { this.source = source; }

    public String getCorrelationId() { return correlationId; }
    public void setCorrelationId(String correlationId) { this.correlationId = correlationId; }

    // Helper methods
    public void markAsCompleted() {
        this.status = "COMPLETED";
        this.endTime = LocalDateTime.now();
    }

    public void markAsFailed(String errorMessage) {
        this.status = "FAILED";
        this.endTime = LocalDateTime.now();
        this.errorMessage = errorMessage;
    }
}

// 3. Flow Status Enum
package com.example.abinitio.enums;

public enum FlowStatus {
    FLOW_ONE("FLOW_ONE"),
    FLOW_TWO("FLOW_TWO"),
    UNKNOWN("UNKNOWN");

    private final String value;

    FlowStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public static FlowStatus fromString(String status) {
        if (status == null) {
            return UNKNOWN;
        }

        for (FlowStatus flowStatus : FlowStatus.values()) {
            if (flowStatus.value.equalsIgnoreCase(status.trim())) {
                return flowStatus;
            }
        }
        return UNKNOWN;
    }
}

// 4. Common Service Caller
package com.example.abinitio.service;

import com.example.abinitio.dto.AbinitioRequest;
import com.example.abinitio.dto.AuditRequest;
import com.example.abinitio.enums.FlowStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class CommonServiceCaller {

    private static final Logger logger = LoggerFactory.getLogger(CommonServiceCaller.class);

    public void processFlowOne(AbinitioRequest request, AuditRequest auditRequest) {
        logger.info("Processing Flow One for entity: {} with audit ID: {}",
                   request.getEntityName(), auditRequest.getAuditId());

        try {
            // Flow One specific operations
            performFlowOneOperations(request, auditRequest);

            auditRequest.markAsCompleted();
            logger.info("Flow One processing completed successfully for entity: {}",
                       request.getEntityName());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Flow One for entity: {}",
                        request.getEntityName(), e);
            throw new RuntimeException("Flow One processing failed: " + e.getMessage(), e);
        }
    }

    public void processFlowTwo(AbinitioRequest request, AuditRequest auditRequest) {
        logger.info("Processing Flow Two for entity: {} with audit ID: {}",
                   request.getEntityName(), auditRequest.getAuditId());

        try {
            // Flow Two specific operations
            performFlowTwoOperations(request, auditRequest);

            auditRequest.markAsCompleted();
            logger.info("Flow Two processing completed successfully for entity: {}",
                       request.getEntityName());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Flow Two for entity: {}",
                        request.getEntityName(), e);
            throw new RuntimeException("Flow Two processing failed: " + e.getMessage(), e);
        }
    }

    private void performFlowOneOperations(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Executing Flow One operations for entity: {} with audit: {}",
                    request.getEntityName(), auditRequest.getAuditId());

        // Flow One specific business logic
        // - Data validation for Flow One
        // - Database operations specific to Flow One
        // - External API calls for Flow One
        // - File processing for Flow One

        auditRequest.setOperation("FLOW_ONE_PROCESSING");

        // Simulate processing time
        simulateProcessing(1000);

        logger.debug("Flow One operations completed for entity: {}", request.getEntityName());
    }

    private void performFlowTwoOperations(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Executing Flow Two operations for entity: {} with audit: {}",
                    request.getEntityName(), auditRequest.getAuditId());

        // Flow Two specific business logic
        // - Data validation for Flow Two
        // - Database operations specific to Flow Two
        // - External API calls for Flow Two
        // - File processing for Flow Two

        auditRequest.setOperation("FLOW_TWO_PROCESSING");

        // Simulate processing time
        simulateProcessing(1500);

        logger.debug("Flow Two operations completed for entity: {}", request.getEntityName());
    }

    private void simulateProcessing(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Processing interrupted", e);
        }
    }
}

// 5. SQS Listener with Flow Router Logic
package com.example.abinitio.listener;

import com.example.abinitio.dto.AbinitioRequest;
import com.example.abinitio.dto.AuditRequest;
import com.example.abinitio.enums.FlowStatus;
import com.example.abinitio.service.CommonServiceCaller;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import java.util.Set;
import java.util.UUID;

@Component
@EnableBinding(Sink.class)
public class SQSListener {

    private static final Logger logger = LoggerFactory.getLogger(SQSListener.class);

    private final CommonServiceCaller commonServiceCaller;
    private final Validator validator;

    public SQSListener(CommonServiceCaller commonServiceCaller, Validator validator) {
        this.commonServiceCaller = commonServiceCaller;
        this.validator = validator;
    }

    @StreamListener(Sink.INPUT)
    public void handleAbinitioRequest(@Payload AbinitioRequest request) {
        String requestId = UUID.randomUUID().toString();
        request.setRequestId(requestId);

        logger.info("Received Abinitio request with ID: {} for entity: {} with flow status: {}",
                   requestId, request.getEntityName(), request.getFlowStatus());

        // Create audit request from abinitio request
        AuditRequest auditRequest = AuditRequest.fromAbinitioRequest(request);
        auditRequest.setAuditId(UUID.randomUUID().toString());

        try {
            // Validate the incoming request
            validateRequest(request);

            logger.info("Starting flow processing for request ID: {} with audit ID: {}",
                       requestId, auditRequest.getAuditId());

            // Flow Router Logic using Switch Case
            routeFlowAndProcess(request, auditRequest);

            logger.info("Successfully processed request ID: {} with final audit status: {}",
                       requestId, auditRequest.getStatus());

        } catch (Exception e) {
            auditRequest.markAsFailed(e.getMessage());
            logger.error("Error processing Abinitio request ID: {} with audit ID: {}",
                        requestId, auditRequest.getAuditId(), e);

            // Handle processing error
            handleProcessingError(request, auditRequest, e);
        } finally {
            // Log final audit information
            logAuditInformation(auditRequest);
        }
    }

    /**
     * Flow Router Logic - Switch Case Implementation
     */
    private void routeFlowAndProcess(AbinitioRequest request, AuditRequest auditRequest) {
        logger.debug("Routing flow for entity: {} with status: {}",
                    request.getEntityName(), request.getFlowStatus());

        switch (request.getFlowStatus()) {
            case FLOW_ONE:
                logger.info("Routing to Flow One for entity: {}", request.getEntityName());
                auditRequest.setOperation("FLOW_ONE_ROUTING");
                commonServiceCaller.processFlowOne(request, auditRequest);
                break;

            case FLOW_TWO:
                logger.info("Routing to Flow Two for entity: {}", request.getEntityName());
                auditRequest.setOperation("FLOW_TWO_ROUTING");
                commonServiceCaller.processFlowTwo(request, auditRequest);
                break;

            case UNKNOWN:
            default:
                String errorMessage = String.format("Unsupported flow status: %s for entity: %s",
                                                   request.getFlowStatus(), request.getEntityName());
                logger.warn(errorMessage);
                auditRequest.setOperation("UNKNOWN_FLOW_ROUTING");
                throw new IllegalArgumentException(errorMessage);
        }
    }

    private void validateRequest(AbinitioRequest request) {
        Set<ConstraintViolation<AbinitioRequest>> violations = validator.validate(request);
        if (!violations.isEmpty()) {
            StringBuilder sb = new StringBuilder("Validation errors: ");
            for (ConstraintViolation<AbinitioRequest> violation : violations) {
                sb.append(violation.getMessage()).append("; ");
            }
            throw new IllegalArgumentException(sb.toString());
        }

        // Additional business validation
        if (request.getEntityName() != null && request.getEntityName().trim().isEmpty()) {
            throw new IllegalArgumentException("Entity name cannot be empty");
        }
    }

    private void handleProcessingError(AbinitioRequest request, AuditRequest auditRequest, Exception e) {
        logger.error("Processing failed for request ID: {} - Entity: {} - Flow: {}",
                    request.getRequestId(), request.getEntityName(), request.getFlowStatus());

        // Error handling strategies:
        // 1. Send to dead letter queue
        // 2. Store error details in database
        // 3. Send notification alerts
        // 4. Implement retry mechanism

        // For now, just log the error details
        logErrorDetails(request, auditRequest, e);
    }

    private void logErrorDetails(AbinitioRequest request, AuditRequest auditRequest, Exception e) {
        logger.error("=== ERROR DETAILS ===");
        logger.error("Request ID: {}", request.getRequestId());
        logger.error("Audit ID: {}", auditRequest.getAuditId());
        logger.error("Entity Name: {}", request.getEntityName());
        logger.error("Flow Status: {}", request.getFlowStatus());
        logger.error("Error Message: {}", e.getMessage());
        logger.error("Exception Type: {}", e.getClass().getSimpleName());
        logger.error("=== END ERROR DETAILS ===");
    }

    private void logAuditInformation(AuditRequest auditRequest) {
        logger.info("=== AUDIT SUMMARY ===");
        logger.info("Audit ID: {}", auditRequest.getAuditId());
        logger.info("Request ID: {}", auditRequest.getRequestId());
        logger.info("Entity Name: {}", auditRequest.getEntityName());
        logger.info("Flow Status: {}", auditRequest.getFlowStatus());
        logger.info("Operation: {}", auditRequest.getOperation());
        logger.info("Final Status: {}", auditRequest.getStatus());
        logger.info("Start Time: {}", auditRequest.getStartTime());
        logger.info("End Time: {}", auditRequest.getEndTime());
        if (auditRequest.getErrorMessage() != null) {
            logger.info("Error Message: {}", auditRequest.getErrorMessage());
        }
        logger.info("=== END AUDIT SUMMARY ===");
    }
}

// 6. Configuration Class
package com.example.abinitio.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategies;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

@Configuration
@EnableBinding(Sink.class)
public class AbinitioConfig {

    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);
        mapper.registerModule(new JavaTimeModule());
        return mapper;
    }

    @Bean
    public Validator validator() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        return factory.getValidator();
    }
}

// 7. Main Application Class
package com.example.abinitio;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AbinitioFlowApplication {

    public static void main(String[] args) {
        SpringApplication.run(AbinitioFlowApplication.class, args);
    }
}

// 8. Application Properties (application.yml)
/*
spring:
  application:
    name: abinitio-flow-service
  cloud:
    stream:
      bindings:
        input:
          destination: abinitio-requests
          group: abinitio-flow-group
          consumer:
            max-attempts: 3
            back-off-initial-interval: 1000
            back-off-max-interval: 10000
      rabbit:
        bindings:
          input:
            consumer:
              auto-bind-dlq: true
              republish-to-dlq: true

logging:
  level:
    com.example.abinitio: DEBUG
    org.springframework.cloud.stream: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/abinitio-flow.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
*/