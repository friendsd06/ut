# 🏦 MCR Validation Service - Method Flow Diagrams

## 🎯 Method 1: validatePositionCode()

### 📊 Flow Diagram
```
┌─────────────────────────────────────────────────────────────────────────┐
│                          📥 INPUT DATA                                  │
├─────────────────────────────────────────────────────────────────────────┤
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "SAVINGS-001",                                       │
│   "BALANCE": "1000.00",                                                 │
│   "CURRENCY": "USD"                                                     │
│ }                                                                       │
│                                                                         │
│ ncrValidationMetadata = {                                               │
│   positionTableKeyAttr: "POSITION_CODE"                                 │
│ }                                                                       │
│                                                                         │
│ positionChildClassCodeMap = {                                           │
│   "SAVINGS-001": BalanceAttributeData{classCode: "ASSET", ...},         │
│   "CHECKING-001": BalanceAttributeData{classCode: "ASSET", ...},        │
│   "LOAN-001": BalanceAttributeData{classCode: "LIABILITY", ...}         │
│ }                                                                       │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                        🔍 PROCESSING STEPS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Step 1: Extract Field Name                                              │
│   positionCodeFieldName = "POSITION_CODE"                              │
│                                                                         │
│ Step 2: Get Position Code Value                                         │
│   positionCodeValue = attributeRecord.get("POSITION_CODE")             │
│   positionCodeValue = "SAVINGS-001"                                     │
│                                                                         │
│ Step 3: Check if Position Code Exists                                   │
│   isValid = positionChildClassCodeMap.containsKey("SAVINGS-001")        │
│   isValid = true ✅                                                     │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          🎯 DECISION POINT                              │
├─────────────────────────────────────────────────────────────────────────┤
│                    Is Position Code Valid?                              │
│                                                                         │
│                    ✅ YES              ❌ NO                            │
│                     │                  │                               │
│                     ▼                  ▼                               │
│              ┌─────────────┐    ┌─────────────────┐                     │
│              │ Return true │    │ Add error &     │                     │
│              │ No changes  │    │ Return false    │                     │
│              └─────────────┘    └─────────────────┘                     │
└─────────────────────────────────────────────────────────────────────────┘
                    ⬇️                            ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          📤 OUTPUT RESULTS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ SUCCESS CASE (Position Code Found):                                     │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "SAVINGS-001",      // ✅ Unchanged                  │
│   "BALANCE": "1000.00",                                                 │
│   "CURRENCY": "USD"                                                     │
│ }                                                                       │
│                                                                         │
│ FAILURE CASE (Position Code "INVALID-999" Not Found):                  │
│ Return: false                                                           │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "INVALID-999|MCR_VALIDATION_ERROR", // ❌ Error added│
│   "BALANCE": "1000.00",                                                 │
│   "CURRENCY": "USD"                                                     │
│ }                                                                       │
└─────────────────────────────────────────────────────────────────────────┘
```

### 🔄 Data Transformation Example
```
INPUT VALUE:    "SAVINGS-001"
                      ⬇️
LOOKUP PROCESS: Check in {
                  "SAVINGS-001": ✅ EXISTS,
                  "CHECKING-001": ✅ EXISTS,
                  "LOAN-001": ✅ EXISTS
                }
                      ⬇️
RESULT:         FOUND = Valid
                      ⬇️
OUTPUT VALUE:   "SAVINGS-001" (unchanged)
```

---

## 👨‍👩‍👧‍👦 Method 2: validateBalanceParentClassCode()

### 📊 Flow Diagram
```
┌─────────────────────────────────────────────────────────────────────────┐
│                          📥 INPUT DATA                                  │
├─────────────────────────────────────────────────────────────────────────┤
│ Scenario A - Regular Validation:                                       │
│ attributeRecord = {                                                     │
│   "CLASS_CODE": "ASSET",                                               │
│   "PARENT_CLASS_CODE": "ASSET",                                        │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│ subProduct = "REGULAR"                                                  │
│                                                                         │
│ Scenario B - Special DF_LOAN:                                          │
│ attributeRecord = {                                                     │
│   "CLASS_CODE": "908",                                                 │
│   "STREAM_CODE": "MORTGAGE-STREAM",                                    │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│ subProduct = "DF_LOAN"                                                  │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                        🔍 PROCESSING STEPS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Step 1: Check if Position Map is Empty                                 │
│   if (positionClassCodeMap.isEmpty()) return false                     │
│                                                                         │
│ Step 2: Extract Values from Record                                      │
│   recordClassCode = attributeRecord.get("CLASS_CODE")                  │
│   positionCodeValue = attributeRecord.get("POSITION_CODE")             │
│                                                                         │
│ Step 3: Determine Validation Type                                       │
│   isSpecialCase = (subProduct == "DF_LOAN" && classCode == "908")      │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          🎯 DECISION TREE                               │
├─────────────────────────────────────────────────────────────────────────┤
│                    Is this DF_LOAN + 908?                              │
│                                                                         │
│              ✅ YES                        ❌ NO                        │
│               │                            │                           │
│               ▼                            ▼                           │
│    ┌─────────────────────┐        ┌─────────────────────┐              │
│    │ 🏦 SPECIAL LOGIC    │        │ 👨‍👩‍👧‍👦 REGULAR LOGIC  │              │
│    │                     │        │                     │              │
│    │ 1. Get stream code  │        │ 1. Get position's   │              │
│    │ 2. Check in stream  │        │    class code       │              │
│    │    code map         │        │ 2. Compare with     │              │
│    │ 3. Valid if found   │        │    parent class     │              │
│    └─────────────────────┘        └─────────────────────┘              │
│               │                            │                           │
│               ▼                            ▼                           │
│    ┌─────────────────────┐        ┌─────────────────────┐              │
│    │ Stream Code Valid?  │        │ Class Codes Match?  │              │
│    │ "MORTGAGE-STREAM"   │        │ "ASSET" == "ASSET"  │              │
│    │ Found in map? ✅    │        │ Match? ✅           │              │
│    └─────────────────────┘        └─────────────────────┘              │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          📤 OUTPUT RESULTS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ SCENARIO A - Regular Success:                                           │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "CLASS_CODE": "ASSET",                                               │
│   "PARENT_CLASS_CODE": "ASSET",        // ✅ Matches position's class   │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│                                                                         │
│ SCENARIO B - Special DF_LOAN Success:                                  │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "CLASS_CODE": "908",                                                 │
│   "STREAM_CODE": "MORTGAGE-STREAM",     // ✅ Valid stream code         │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│                                                                         │
│ FAILURE CASE - Invalid Stream Code:                                    │
│ Return: false                                                           │
│ attributeRecord = {                                                     │
│   "CLASS_CODE": "908",                                                 │
│   "STREAM_CODE": "INVALID-STREAM|908_VALIDATION_ERROR", // ❌ Error     │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
└─────────────────────────────────────────────────────────────────────────┘
```

### 🔄 Data Transformation Examples

#### Regular Validation Flow:
```
INPUT:    Position "POS-001" → Class Code "ASSET"
          Parent Class in Record → "ASSET"
                      ⬇️
COMPARE:  "ASSET" == "ASSET" ?
                      ⬇️
RESULT:   ✅ MATCH = Valid
                      ⬇️
OUTPUT:   No changes to record
```

#### Special DF_LOAN Flow:
```
INPUT:    Stream Code "MORTGAGE-STREAM"
                      ⬇️
LOOKUP:   Check in streamCodeMap {
            "MORTGAGE-STREAM": ✅ EXISTS,
            "PERSONAL-STREAM": ✅ EXISTS
          }
                      ⬇️
RESULT:   FOUND = Valid
                      ⬇️
OUTPUT:   No changes to record
```

---

## 🔍 Method 3: validateDuplication()

### 📊 Flow Diagram
```
┌─────────────────────────────────────────────────────────────────────────┐
│                          📥 INPUT DATA                                  │
├─────────────────────────────────────────────────────────────────────────┤
│ Single Field Check:                                                     │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-123",                                             │
│   "BALANCE": "1000.00"                                                 │
│ }                                                                       │
│ dupCheckAttrName = "ACCOUNT_ID"                                         │
│                                                                         │
│ Multiple Field Check:                                                   │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-123",                                             │
│   "CURRENCY": "USD",                                                   │
│   "BRANCH_CODE": "BR-001"                                              │
│ }                                                                       │
│ dupCheckAttrName = "ACCOUNT_ID|CURRENCY|BRANCH_CODE"                   │
│                                                                         │
│ logicalRecordAndCdMap = {                                               │
│   "BRANCH-NYC": ["ACC-111", "ACC-222", "ACC-333"],                     │
│   "BRANCH-LA": ["ACC-444", "ACC-555"]                                  │
│ }                                                                       │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                        🔍 PROCESSING STEPS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Step 1: Check if Logical Record Map is Empty                           │
│   if (logicalRecordAndCdMap.isEmpty()) return true                     │
│                                                                         │
│ Step 2: Determine Logical Group                                         │
│   positionCode = "POS-001"                                             │
│   logicalRecordID = positionMap.get("POS-001").getLogicalRecordID()    │
│   logicalRecordID = "BRANCH-NYC"                                       │
│                                                                         │
│ Step 3: Determine Check Type                                            │
│   isMultipleField = dupCheckAttrName.contains("|")                     │
│   Single: "ACCOUNT_ID" → false                                         │
│   Multiple: "ACCOUNT_ID|CURRENCY|BRANCH_CODE" → true                   │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          🎯 DECISION TREE                               │
├─────────────────────────────────────────────────────────────────────────┤
│                    Multiple Field Check?                                │
│                                                                         │
│              ❌ NO (Single)              ✅ YES (Multiple)              │
│               │                            │                           │
│               ▼                            ▼                           │
│    ┌─────────────────────┐        ┌─────────────────────┐              │
│    │ 🔍 SINGLE FIELD     │        │ 🧩 MULTIPLE FIELDS  │              │
│    │                     │        │                     │              │
│    │ 1. Get field value  │        │ 1. Split field names│              │
│    │    "ACC-123"        │        │    by "|"           │              │
│    │                     │        │ 2. Build value map  │              │
│    │ 2. Check in group   │        │ 3. Combine values   │              │
│    │    ["ACC-111",      │        │    "ACC-123~USD~   │              │
│    │     "ACC-222",      │        │     BR-001"         │              │
│    │     "ACC-333"]      │        │ 4. Check in group   │              │
│    │                     │        │                     │              │
│    │ 3. Found? NO ✅     │        │ 5. Found? NO ✅     │              │
│    └─────────────────────┘        └─────────────────────┘              │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                      🔄 DUPLICATE CHECK PROCESS                         │
├─────────────────────────────────────────────────────────────────────────┤
│ Single Field Process:                                                   │
│   Value: "ACC-123"                                                      │
│   Existing: ["ACC-111", "ACC-222", "ACC-333"]                          │
│   Contains "ACC-123"? NO ✅                                             │
│                                                                         │
│ Multiple Field Process:                                                 │
│   Fields: ["ACCOUNT_ID", "CURRENCY", "BRANCH_CODE"]                    │
│   Values: ["ACC-123", "USD", "BR-001"]                                 │
│   Combined: "ACC-123~USD~BR-001"                                       │
│   Existing: ["ACC-111~USD~BR-001", "ACC-222~EUR~BR-002"]               │
│   Contains "ACC-123~USD~BR-001"? NO ✅                                  │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          📤 OUTPUT RESULTS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ SUCCESS CASE - Single Field (No Duplicate):                            │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-123",              // ✅ Not in existing list      │
│   "BALANCE": "1000.00"                                                 │
│ }                                                                       │
│                                                                         │
│ SUCCESS CASE - Multiple Fields (No Duplicate):                         │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-123",              // ✅ Combination not found     │
│   "CURRENCY": "USD",                                                   │
│   "BRANCH_CODE": "BR-001"                                              │
│ }                                                                       │
│                                                                         │
│ FAILURE CASE - Single Field (if "ACC-222" was used):                   │
│ Return: false                                                           │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-222|DUPLICATE_ERROR",  // ❌ Error added          │
│   "BALANCE": "1000.00"                                                 │
│ }                                                                       │
│                                                                         │
│ FAILURE CASE - Multiple Fields (if combination existed):               │
│ Return: false                                                           │
│ attributeRecord = {                                                     │
│   "POSITION_CODE": "POS-001",                                          │
│   "ACCOUNT_ID": "ACC-111|DUPLICATE_ERROR",     // ❌ All fields marked │
│   "CURRENCY": "USD|DUPLICATE_ERROR",                                   │
│   "BRANCH_CODE": "BR-001|DUPLICATE_ERROR"                              │
│ }                                                                       │
└─────────────────────────────────────────────────────────────────────────┘
```

### 🔄 Data Transformation Examples

#### Single Field Check:
```
INPUT:       "ACC-123"
                ⬇️
LOGICAL GROUP: "BRANCH-NYC" → ["ACC-111", "ACC-222", "ACC-333"]
                ⬇️
CHECK:       "ACC-123" in list?
                ⬇️
RESULT:      NOT FOUND = Valid
                ⬇️
OUTPUT:      "ACC-123" (unchanged)
```

#### Multiple Field Check:
```
INPUT:       ["ACC-123", "USD", "BR-001"]
                ⬇️
COMBINE:     "ACC-123" + "~" + "USD" + "~" + "BR-001"
                ⬇️
RESULT:      "ACC-123~USD~BR-001"
                ⬇️
CHECK:       In ["ACC-111~USD~BR-001", "ACC-222~EUR~BR-002"]?
                ⬇️
RESULT:      NOT FOUND = Valid
                ⬇️
OUTPUT:      All fields unchanged
```

---

## 🧩 Method 4: checkDuplicateForMultipleAttributes() - Helper Method

### 📊 Flow Diagram
```
┌─────────────────────────────────────────────────────────────────────────┐
│                          📥 INPUT DATA                                  │
├─────────────────────────────────────────────────────────────────────────┤
│ attributeRecord = {                                                     │
│   "ACCOUNT_ID": "ACC-123",                                             │
│   "CURRENCY": "USD",                                                   │
│   "BRANCH_CODE": "BR-001",                                             │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│                                                                         │
│ multipleFieldNames = "ACCOUNT_ID|CURRENCY|BRANCH_CODE"                 │
│                                                                         │
│ logicalRecordAndCdMap = {                                               │
│   "BRANCH-NYC": [                                                      │
│     "ACC-111~USD~BR-001",                                              │
│     "ACC-222~EUR~BR-002",                                              │
│     "ACC-333~USD~BR-003"                                               │
│   ]                                                                     │
│ }                                                                       │
│                                                                         │
│ logicalRecordID = "BRANCH-NYC"                                         │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                        🔍 PROCESSING STEPS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ Step 1: Split Field Names                                               │
│   "ACCOUNT_ID|CURRENCY|BRANCH_CODE".split("\\|")                       │
│   Result: ["ACCOUNT_ID", "CURRENCY", "BRANCH_CODE"]                    │
│                                                                         │
│ Step 2: Build Field-Value Map                                           │
│   for each fieldName in fieldNames:                                    │
│     fieldValueMap.put(fieldName, attributeRecord.get(fieldName))       │
│   Result: {                                                             │
│     "ACCOUNT_ID": "ACC-123",                                           │
│     "CURRENCY": "USD",                                                 │
│     "BRANCH_CODE": "BR-001"                                            │
│   }                                                                     │
│                                                                         │
│ Step 3: Build Combined Value                                            │
│   combinedValue = buildCombinedValue(fieldValueMap, fieldNames)        │
│   Process: "ACC-123" + "~" + "USD" + "~" + "BR-001"                    │
│   Result: "ACC-123~USD~BR-001"                                         │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                      🔄 COMBINATION BUILDING PROCESS                    │
├─────────────────────────────────────────────────────────────────────────┤
│ Field Processing Loop:                                                  │
│                                                                         │
│ i=0: fieldNames[0] = "ACCOUNT_ID"                                       │
│      fieldValue = "ACC-123"                                            │
│      combinedValue = "ACC-123"                                         │
│      Add separator? YES (i < length-1)                                 │
│      combinedValue = "ACC-123~"                                        │
│                                                                         │
│ i=1: fieldNames[1] = "CURRENCY"                                         │
│      fieldValue = "USD"                                                │
│      combinedValue = "ACC-123~USD"                                     │
│      Add separator? YES (i < length-1)                                 │
│      combinedValue = "ACC-123~USD~"                                    │
│                                                                         │
│ i=2: fieldNames[2] = "BRANCH_CODE"                                      │
│      fieldValue = "BR-001"                                             │
│      combinedValue = "ACC-123~USD~BR-001"                              │
│      Add separator? NO (i == length-1)                                 │
│      Final: "ACC-123~USD~BR-001"                                       │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          🎯 DUPLICATE CHECK                             │
├─────────────────────────────────────────────────────────────────────────┤
│ Check Process:                                                          │
│   combinedValue = "ACC-123~USD~BR-001"                                 │
│                                                                         │
│   existingCombinations = [                                             │
│     "ACC-111~USD~BR-001",     ← Different account                      │
│     "ACC-222~EUR~BR-002",     ← Different currency & branch            │
│     "ACC-333~USD~BR-003"      ← Different branch                       │
│   ]                                                                     │
│                                                                         │
│   Contains "ACC-123~USD~BR-001"? NO ✅                                  │
│                                                                         │
│   Decision: NO DUPLICATE FOUND                                         │
└─────────────────────────────────────────────────────────────────────────┘
                                    ⬇️
┌─────────────────────────────────────────────────────────────────────────┐
│                          📤 OUTPUT RESULTS                              │
├─────────────────────────────────────────────────────────────────────────┤
│ SUCCESS CASE (No Duplicate Found):                                     │
│ Return: true                                                            │
│ attributeRecord = {                                                     │
│   "ACCOUNT_ID": "ACC-123",              // ✅ Unchanged                 │
│   "CURRENCY": "USD",                    // ✅ Unchanged                 │
│   "BRANCH_CODE": "BR-001",              // ✅ Unchanged                 │
│   "POSITION_CODE": "POS-001"                                           │
│ }                                                                       │
│                                                                         │
│ FAILURE CASE (if combined value was "ACC-111~USD~BR-001"):             │
│ Return: false                                                           │
│ attributeRecord = {                                                     │
│   "ACCOUNT_ID": "ACC-111|DUPLICATE_ERROR",     // ❌ Error added        │
│   "CURRENCY": "USD|DUPLICATE_ERROR",           // ❌ Error added        │
│   "BRANCH_CODE": "BR-001|DUPLICATE_ERROR",     // ❌ Error added        │
│   "POSITION_CODE": "POS-001"            // ✅ Not checked, unchanged    │
│ }                                                                       │
│                                                                         │
│ Error Addition Process:                                                 │
│   For each field in ["ACCOUNT_ID", "CURRENCY", "BRANCH_CODE"]:         │
│     originalValue = attributeRecord.get(field)                         │
│     errorValue = originalValue + "|" + "DUPLICATE_ERROR"                │
│     attributeRecord.put(field, errorValue)                             │
└─────────────────────────────────────────────────────────────────────────┘
```

### 🔄 Complete Data Transformation Flow
```
STEP 1 - INPUT FIELDS:
["ACCOUNT_ID", "CURRENCY", "BRANCH_CODE"]
                ⬇️
STEP 2 - EXTRACT VALUES:
{"ACCOUNT_ID": "ACC-123", "CURRENCY": "USD", "BRANCH_CODE": "BR-001"}
                ⬇️
STEP 3 - COMBINE WITH SEPARATORS:
"ACC-123" + "~" + "USD" + "~" + "BR-001"
                ⬇️
STEP 4 - FINAL COMBINED VALUE:
"ACC-123~USD~BR-001"
                ⬇️
STEP 5 - CHECK AGAINST EXISTING:
["ACC-111~USD~BR-001", "ACC-222~EUR~BR-002", "ACC-333~USD~BR-003"]
                ⬇️
STEP 6 - RESULT:
NOT FOUND = Valid (no duplicate)
                ⬇️
STEP 7 - OUTPUT:
Return true, no changes to attributeRecord
```

---

## 📋 Summary of All Method Flows

| Method | Input Type | Key Process | Output Type |
|--------|------------|-------------|-------------|
| `validatePositionCode()` | Single position code | Lookup in valid codes map | boolean + modified record |
| `validateBalanceParentClassCode()` | Class codes + product type | Conditional validation logic | boolean + modified record |
| `validateDuplication()` | Field name(s) + logical groups | Single/multiple field duplicate check | boolean + modified record |
| `checkDuplicateForMultipleAttributes()` | Multiple field names | Combine values + duplicate check | boolean + modified record |

## 🔑 Key Patterns Across All Methods

1. **Input Validation** - Check for empty/null inputs
2. **Data Extraction** - Get required values from input maps/records
3. **Business Logic** - Apply specific validation rules
4. **Error Handling** - Add error messages to failed fields
5. **Return Result** - Boolean success/failure + modified record

Each method follows this consistent pattern while implementing different business rules for financial record validation!