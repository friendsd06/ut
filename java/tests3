class S3Error(Exception):
    pass

class S3Writer:
    def __init__(self, base_path: str):
        if not base_path.startswith('s3a://'):
            raise S3Error("Base path must start with s3a://")
        self.base_path = base_path
        logger.info(f"[S3] Initialized with base path: {base_path}")

    def _get_full_path(self, relative_path: str) -> str:
        try:
            base_clean = self.base_path.rstrip('/')
            rel_clean = relative_path.strip('/')
            return f"{base_clean}/{rel_clean}"
        except Exception as e:
            raise S3Error(f"Failed to build S3 path: {str(e)}")

    def write_dataframe(
        self,
        df: DataFrame,
        relative_path: str,
        format: str = "parquet",
        mode: str = "overwrite",
        options: Optional[Dict[str, Any]] = None
    ) -> None:
        try:
            full_path = self._get_full_path(relative_path)
            logger.info(f"[S3] Writing {format} data to: {full_path}")

            writer = df.write.format(format).mode(mode)
            if options:
                writer = writer.options(**options)

            writer.save(full_path)
            logger.info(f"[S3] Write completed: {full_path}")
        except Exception as e:
            raise S3Error(f"Write failed: {str(e)}")