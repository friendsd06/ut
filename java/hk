package com.example.s3demo.models;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Sample data structure based on the requested format
 * List<Object> where each Object is a pair of (entityName, List<String> data)
 */
public class EntityDataSample {

    /**
     * Creates a sample List<Object> structure where each Object contains:
     * - entityName (String)
     * - data (List<String>)
     *
     * The keys file has 5 records, and each of the 6 loan types has 3 records.
     *
     * @return List<Object> containing the sample data structure
     */
    public static List<Object> createSampleData() {
        List<Object> dataList = new ArrayList<>();

        // Add keys file data for Entity1
        Object entity1Keys = new Object[] {
            "Entity1_keys",
            Arrays.asList(
                "key_id,name,account_type,registration_date,status",
                "1001,John Smith,Personal,2023-01-15,Active",
                "1002,Acme Corporation,Business,2022-11-22,Active",
                "1003,Sarah Johnson,Personal,2023-03-05,Inactive",
                "1004,Tech Solutions LLC,Business,2022-08-17,Active",
                "1005,Michael Brown,Personal,2023-05-30,Pending"
            )
        };
        dataList.add(entity1Keys);

        // Add loan data for Entity1 - personal loans
        Object entity1PersonalLoans = new Object[] {
            "Entity1_loan_personal",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate",
                "P1001,1001,15000,36,5.25",
                "P1002,1003,8500,24,4.75",
                "P1003,1005,12000,48,5.50"
            )
        };
        dataList.add(entity1PersonalLoans);

        // Add loan data for Entity1 - business loans
        Object entity1BusinessLoans = new Object[] {
            "Entity1_loan_business",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,business_type",
                "B1001,1002,75000,60,6.25,Corporation",
                "B1002,1004,125000,84,5.75,LLC",
                "B1003,1002,50000,36,6.50,Corporation"
            )
        };
        dataList.add(entity1BusinessLoans);

        // Add loan data for Entity1 - mortgage loans
        Object entity1MortgageLoans = new Object[] {
            "Entity1_loan_mortgage",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,property_value,property_address",
                "M1001,1001,250000,360,3.25,325000,123 Main St, Anytown, USA",
                "M1002,1003,320000,360,3.50,400000,456 Oak Ave, Somewhere, USA",
                "M1003,1005,180000,240,3.75,220000,789 Pine Rd, Nowhere, USA"
            )
        };
        dataList.add(entity1MortgageLoans);

        // Add loan data for Entity1 - auto loans
        Object entity1AutoLoans = new Object[] {
            "Entity1_loan_auto",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,vehicle_make,vehicle_model,vehicle_year",
                "A1001,1001,28000,60,4.25,Toyota,Camry,2023",
                "A1002,1003,35000,72,4.50,Honda,Pilot,2022",
                "A1003,1005,22000,48,4.75,Ford,Escape,2023"
            )
        };
        dataList.add(entity1AutoLoans);

        // Add loan data for Entity1 - education loans
        Object entity1EducationLoans = new Object[] {
            "Entity1_loan_education",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,institution,degree_program",
                "E1001,1001,45000,120,4.00,State University,MBA",
                "E1002,1003,30000,180,3.75,College of Arts,Fine Arts",
                "E1003,1005,22000,120,4.25,Technical Institute,Computer Science"
            )
        };
        dataList.add(entity1EducationLoans);

        // Add loan data for Entity1 - credit
        Object entity1CreditLoans = new Object[] {
            "Entity1_loan_credit",
            Arrays.asList(
                "loan_id,customer_id,credit_limit,apr,issue_date",
                "C1001,1001,10000,18.99,2023-02-01",
                "C1002,1002,25000,16.50,2022-12-15",
                "C1003,1003,7500,19.99,2023-04-10"
            )
        };
        dataList.add(entity1CreditLoans);

        // Repeat the pattern for Entity2

        // Add keys file data for Entity2
        Object entity2Keys = new Object[] {
            "Entity2_keys",
            Arrays.asList(
                "key_id,name,account_type,registration_date,status",
                "2001,Emily Davis,Personal,2023-02-10,Active",
                "2002,Global Innovations Inc,Business,2022-10-05,Active",
                "2003,Robert Wilson,Personal,2023-01-22,Active",
                "2004,Digital Solutions Corp,Business,2022-09-30,Inactive",
                "2005,Jennifer Adams,Personal,2023-04-18,Active"
            )
        };
        dataList.add(entity2Keys);

        // Add loan data for Entity2 (following same pattern as Entity1)
        // Personal loans
        Object entity2PersonalLoans = new Object[] {
            "Entity2_loan_personal",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate",
                "P2001,2001,18000,36,5.15",
                "P2002,2003,9500,24,4.85",
                "P2003,2005,14000,48,5.35"
            )
        };
        dataList.add(entity2PersonalLoans);

        // Business loans
        Object entity2BusinessLoans = new Object[] {
            "Entity2_loan_business",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,business_type",
                "B2001,2002,90000,60,6.15,Corporation",
                "B2002,2004,110000,84,5.85,LLC",
                "B2003,2002,65000,36,6.40,Corporation"
            )
        };
        dataList.add(entity2BusinessLoans);

        // Mortgage loans
        Object entity2MortgageLoans = new Object[] {
            "Entity2_loan_mortgage",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,property_value,property_address",
                "M2001,2001,275000,360,3.15,350000,234 Maple Ave, Anytown, USA",
                "M2002,2003,340000,360,3.45,425000,567 Elm St, Somewhere, USA",
                "M2003,2005,195000,240,3.65,245000,890 Cedar Ln, Nowhere, USA"
            )
        };
        dataList.add(entity2MortgageLoans);

        // Auto loans
        Object entity2AutoLoans = new Object[] {
            "Entity2_loan_auto",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,vehicle_make,vehicle_model,vehicle_year",
                "A2001,2001,32000,60,4.15,Nissan,Altima,2023",
                "A2002,2003,38000,72,4.45,Chevrolet,Equinox,2022",
                "A2003,2005,25000,48,4.65,Hyundai,Tucson,2023"
            )
        };
        dataList.add(entity2AutoLoans);

        // Education loans
        Object entity2EducationLoans = new Object[] {
            "Entity2_loan_education",
            Arrays.asList(
                "loan_id,customer_id,amount,term_months,interest_rate,institution,degree_program",
                "E2001,2001,50000,120,3.95,National University,PhD",
                "E2002,2003,32000,180,3.70,Metropolitan College,Masters",
                "E2003,2005,26000,120,4.15,Tech Academy,Software Engineering"
            )
        };
        dataList.add(entity2EducationLoans);

        // Credit lines
        Object entity2CreditLoans = new Object[] {
            "Entity2_loan_credit",
            Arrays.asList(
                "loan_id,customer_id,credit_limit,apr,issue_date",
                "C2001,2001,12000,18.50,2023-03-01",
                "C2002,2002,30000,16.25,2022-11-15",
                "C2003,2003,8500,19.75,2023-05-05"
            )
        };
        dataList.add(entity2CreditLoans);

        return dataList;
    }

    /**
     * Example usage of the sample data structure
     */
    public static void main(String[] args) {
        List<Object> dataList = createSampleData();

        System.out.println("Total data objects: " + dataList.size());

        for (Object dataObj : dataList) {
            Object[] dataArr = (Object[]) dataObj;
            String entityName = (String) dataArr[0];
            @SuppressWarnings("unchecked")
            List<String> data = (List<String>) dataArr[1];

            System.out.println("\nEntity: " + entityName);
            System.out.println("Data records: " + data.size());

            // Print first 2 records (header + 1 data row)
            System.out.println("Sample data:");
            for (int i = 0; i < Math.min(2, data.size()); i++) {
                System.out.println("  " + data.get(i));
            }
        }
    }
}

=================

  // Process each data object and upload it
        for (Object dataObj : dataList) {
            Object[] dataArr = (Object[]) dataObj;
            String entityName = (String) dataArr[0];
            @SuppressWarnings("unchecked")
            List<String> data = (List<String>) dataArr[1];

            // Create file and upload asynchronously
            CompletableFuture<UploadStatus> future = createFileAndUploadAsync(
                    bucketName, basePath, entityName, data);
            futures.add(future);
        }

 private CompletableFuture<UploadStatus> createFileAndUploadAsync(
            String bucketName, String basePath, String entityName, List<String> data) {

        return CompletableFuture.supplyAsync(() -> {
            String filename = entityName + ".csv";
            String s3Key = basePath + filename;
            File tempFile = null;

            try {
                // Update status to CREATING_FILE
                UploadStatus status = new UploadStatus(filename, s3Key, "CREATING_FILE");
                uploadStatusMap.put(s3Key, status);

                // Create temporary file
                tempFile = createTempFile(entityName, data);
                status.setStatus("FILE_CREATED");
                status.setFileSize(tempFile.length());
                uploadStatusMap.put(s3Key, status);

                // Upload to S3
                status.setStatus("UPLOADING");
                uploadStatusMap.put(s3Key, status);

                // Check if the file is large enough for multipart upload
                if (tempFile.length() > MULTIPART_THRESHOLD) {
                    status = uploadLargeFileMultipart(bucketName, s3Key, tempFile, status);
                } else {
                    status = uploadSmallFile(bucketName, s3Key, tempFile, status);
                }

                return status;
            } catch (Exception e) {
                logger.error("Error uploading file {}: {}", entityName, e.getMessage(), e);
                UploadStatus errorStatus = new UploadStatus(filename, s3Key, "ERROR");
                errorStatus.setErrorMessage(e.getMessage());
                uploadStatusMap.put(s3Key, errorStatus);
                return errorStatus;
            } finally {
                // Clean up temporary file
                if (tempFile != null && tempFile.exists()) {
                    try {
                        Files.delete(tempFile.toPath());
                    } catch (IOException e) {
                        logger.warn("Failed to delete temporary file: {}", tempFile.getAbsolutePath());
                    }
                }
            }
        }, executorService);
    }

    /**
     * Creates a temporary file with the given data
     *
     * @param entityName The entity name (used for the filename)
     * @param data The data to write to the file
     * @return The created temporary file
     * @throws IOException If there's an error creating the file
     */
    private File createTempFile(String entityName, List<String> data) throws IOException {
        Path tempFilePath = Files.createTempFile(
                Path.of(TEMP_DIR), entityName + "_", ".csv");
        File tempFile = tempFilePath.toFile();

        try (FileWriter writer = new FileWriter(tempFile)) {
            for (String line : data) {
                writer.write(line + "\n");
            }
        }

        return tempFile;
    }


    //

    package com.example.s3demo.controller;

    import com.example.s3demo.models.UploadStatus;
    import com.example.s3demo.service.S3AsyncUploadService;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.beans.factory.annotation.Value;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.List;
    import java.util.concurrent.CompletableFuture;
    import java.util.concurrent.ExecutionException;

    /**
     * REST controller for S3 upload operations
     */
    @RestController
    @RequestMapping("/api/upload")
    public class S3UploadController {

        private static final Logger logger = LoggerFactory.getLogger(S3UploadController.class);

        @Autowired
        private S3AsyncUploadService uploadService;

        @Value("${aws.s3.bucket}")
        private String bucketName;

        /**
         * Trigger the upload of all entity data to S3
         *
         * @param basePath Optional base path in the S3 bucket
         * @return CompletableFuture with the upload results
         */
        @PostMapping("/start")
        public CompletableFuture<ResponseEntity<List<UploadStatus>>> startUpload(
                @RequestParam(name = "basePath", defaultValue = "data/") String basePath) {

            logger.info("Starting upload of all data to S3 bucket: {}, path: {}", bucketName, basePath);

            return uploadService.uploadAllDataToS3Async(bucketName, basePath)
                    .thenApply(statuses -> {
                        logger.info("Completed all uploads. Total files: {}", statuses.size());
                        return ResponseEntity.ok(statuses);
                    })
                    .exceptionally(ex -> {
                        logger.error("Error during upload process", ex);
                        return ResponseEntity.internalServerError().build();
                    });
        }

        /**
         * Get the status of all uploads
         *
         * @return List of all upload statuses
         */
        @GetMapping("/status")
        public ResponseEntity<List<UploadStatus>> getAllStatuses() {
            List<UploadStatus> statuses = uploadService.getAllUploadStatuses();
            return ResponseEntity.ok(statuses);
        }

        /**
         * Get the status of a specific upload
         *
         * @param s3Key The S3 object key
         * @return The upload status
         */
        @GetMapping("/status/{s3Key}")
        public ResponseEntity<UploadStatus> getStatus(@PathVariable String s3Key) {
            UploadStatus status = uploadService.getUploadStatus(s3Key);

            if (status == null) {
                return ResponseEntity.notFound().build();
            }

            return ResponseEntity.ok(status);
        }

        /**
         * Trigger a synchronous upload and wait for results
         * Used for testing with smaller datasets
         *
         * @param basePath Optional base path in the S3 bucket
         * @return The upload results
         */
        @PostMapping("/sync")
        public ResponseEntity<List<UploadStatus>> startSyncUpload(
                @RequestParam(name = "basePath", defaultValue = "data/") String basePath) {

            logger.info("Starting synchronous upload to S3 bucket: {}, path: {}", bucketName, basePath);

            try {
                List<UploadStatus> result = uploadService.uploadAllDataToS3Async(bucketName, basePath).get();
                logger.info("Completed all uploads. Total files: {}", result.size());
                return ResponseEntity.ok(result);
            } catch (InterruptedException | ExecutionException e) {
                logger.error("Error during synchronous upload", e);
                Thread.currentThread().interrupt();
                return ResponseEntity.internalServerError().build();
            }
        }
    }