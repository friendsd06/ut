Below is a very beginner-friendly, step-by-step guide on how to create a Guided Decision Table in KIE Workbench (or Red Hat Process Automation Manager). We’ll walk through each step in detail, from creating a project to running your rule.

To keep it simple, we’ll use a loan approval scenario where we have:

An Applicant (with a credit score and income)
A Loan (with a requested amount)
A LoanDecision (to store whether it’s approved or denied)
Table of Contents
Step 1: Create a New Project
Step 2: Create the Data Model (Data Objects)
Step 3: Create a Guided Decision Table
3.1 Add Condition Columns (WHEN)
3.2 Add Action Columns (THEN)
3.3 Add Rows to the Table (the Rules)
Step 4: Save and Check the Generated DRL
Step 5: Build and Deploy
Step 6: Test with a Simple Java Main Class
<a id="step1"></a>

1. Step 1: Create a New Project
Log in to your KIE Workbench or Red Hat Process Automation Manager console.
At the top menu, go to Design → Projects (depending on the version, the naming might vary).
Click the New Project (or Create Project) button.
Fill in the project details:
Group ID: com.mybank
Artifact ID: loan-approval
Version: 1.0.0-SNAPSHOT
Click Create & Import.
You now have an empty project called “loan-approval” in your workspace.

<a id="step2"></a>

2. Step 2: Create the Data Model (Data Objects)
We’ll create three simple data objects (basically Java classes) inside the loan-approval project:

2.1 Applicant
In the loan-approval project, click Add Asset → Data Object.
Name it Applicant (no spaces).
Click OK or Save.
In the Data Object Editor, add these fields:
name: String
creditScore: Integer
income: Integer
Click Save.
Under the hood KIE Workbench generates Applicant.java:

java
Copy
package com.mybank;

public class Applicant {
    private String name;
    private Integer creditScore;
    private Integer income;

    // Getters & setters, plus empty constructor
    // ...
}
2.2 Loan
Again, click Add Asset → Data Object.
Name it Loan.
In the editor, add:
amount: Integer
Click Save.
It creates Loan.java:

java
Copy
package com.mybank;

public class Loan {
    private Integer amount;

    // Getters & setters, plus empty constructor
    // ...
}
2.3 LoanDecision
Click Add Asset → Data Object once more.
Name it LoanDecision.
Add a single field:
decision: String
Click Save.
It creates LoanDecision.java:

java
Copy
package com.mybank;

public class LoanDecision {
    private String decision;

    // e.g. "APPROVED", "DENIED"
    // Getters & setters, plus empty constructor
    // ...
}
That’s it for the data model. We have:

Applicant
Loan
LoanDecision
<a id="step3"></a>

3. Step 3: Create a Guided Decision Table
Now we define the actual rules using a Guided Decision Table. Let’s name it LoanApprovalTable.gdst.

In the loan-approval project, click Add Asset → Guided Decision Table.
Type LoanApprovalTable as the file name.
Choose the type “Guided Decision Table (Spreadsheet-like)” (the name might be slightly different, but pick the usual option).
Click OK.
You’ll see an empty decision table with columns for conditions (WHEN) and actions (THEN). Let’s add them.

<a id="step31"></a>

3.1 Add Condition Columns (WHEN)
We want to check:

If the applicant’s creditScore is at least some number.
If the applicant’s income is at least some number.
If the loan’s amount is at or below some number.
How to add a condition (for Applicant.creditScore ≥ x):

Look for a button like Insert Column or Add Column → Select “Condition” or “Condition Column.”
A dialog opens.
Fact Type: pick Applicant (this is the class you created).
Binding (optional): something like $applicant.
Field: choose creditScore.
Operator: pick “>=” (greater than or equal).
Click OK or Finish.
Repeat the above steps for:

Applicant.income ≥ (some integer)
Loan.amount ≤ (some integer)
At the end, you should have three Condition columns in your table:

Applicant( creditScore >= ? )
Applicant( income >= ? )
Loan( amount <= ? )
<a id="step32"></a>

3.2 Add Action Columns (THEN)
We want to set the decision field of LoanDecision.

Click Insert Column → “Action” (or “Action Column”).
A dialog appears:
Fact Type: select LoanDecision.
Optionally set a binding name, like $decision.
Field: pick decision.
We will set that field to a string value in each row (e.g., "APPROVED", "DENIED").
Click OK or Finish.
Now we have a Condition part (3 columns) and an Action part (1 column).

<a id="step33"></a>

3.3 Add Rows to the Table (the Rules)
Think of each row as one IF-THEN rule. For example:

Row 1: If creditScore ≥ 700, income ≥ 50000, and loan amount ≤ 200000 → decision = "APPROVED"
Row 2: If creditScore ≥ 600, income ≥ 30000, and loan amount ≤ 100000 → decision = "CONDITIONAL"
Row 3: (no conditions or any leftover scenario) → decision = "DENIED"
In the table, you’ll see something like:

Condition (creditScore ≥)	Condition (income ≥)	Condition (amount ≤)	Action (decision)
700	50000	200000	"APPROVED"
600	30000	100000	"CONDITIONAL"
(blank)	(blank)	(blank)	"DENIED"
For Row 1: type 700 in the creditScore ≥ column, type 50000 in income ≥, type 200000 in amount ≤, and "APPROVED" in decision.
For Row 2: type 600, 30000, 100000, "CONDITIONAL".
For Row 3: leave the first three columns blank (meaning no constraint), and type "DENIED" in the action column.
When finished, Save the table (usually in the top-right corner).

<a id="step4"></a>

4. Step 4: Save and Check the Generated DRL
After saving, you can often click a Source or View Source tab in the Decision Table editor. That shows the raw DRL that Drools uses behind the scenes. It might look like:

java
Copy
rule "Row 1 LoanApprovalTable"
  when
    $applicant : Applicant( creditScore >= 700, income >= 50000 )
    $loan : Loan( amount <= 200000 )
    $decision : LoanDecision()
  then
    $decision.setDecision("APPROVED");
end

rule "Row 2 LoanApprovalTable"
  when
    $applicant : Applicant( creditScore >= 600, income >= 30000 )
    $loan : Loan( amount <= 100000 )
    $decision : LoanDecision()
  then
    $decision.setDecision("CONDITIONAL");
end

rule "Row 3 LoanApprovalTable"
  when
    $applicant : Applicant()
    $loan : Loan()
    $decision : LoanDecision()
  then
    $decision.setDecision("DENIED");
end
You don’t have to modify the DRL manually; KIE Workbench keeps it in sync with the Decision Table’s rows and columns.

<a id="step5"></a>

5. Step 5: Build and Deploy
Go back to the Project Editor screen (where you see your project details).
Click Build & Deploy (the button might be in the top-right or top-left, depending on your version).
Wait until you see a success message.
Your rules (and data model) are now packaged as a KJAR (knowledge JAR) and can be used by Test Scenarios in the Workbench or by an external Java app.

<a id="step6"></a>

6. Step 6: Test with a Simple Java Main Class
While you can also create a Test Scenario in the Workbench, it’s often helpful to run a quick Java test to see the rules in action. For that:

In an external Java project (or in the same Workbench if you prefer), add a Maven dependency on your newly built KJAR. For example (in your pom.xml):

xml
Copy
<dependency>
  <groupId>com.mybank</groupId>
  <artifactId>loan-approval</artifactId>
  <version>1.0.0-SNAPSHOT</version>
</dependency>
Write a simple main method that:

Creates a KieSession
Inserts Applicant, Loan, and LoanDecision objects
Fires the rules
Prints out the LoanDecision.decision
Here’s a sample Java code:

java
Copy
package com.mybank.test;

import com.mybank.Applicant;
import com.mybank.Loan;
import com.mybank.LoanDecision;
import org.kie.api.KieServices;
import org.kie.api.runtime.KieContainer;
import org.kie.api.runtime.KieSession;

public class LoanApprovalTest {

    public static void main(String[] args) {
        // 1) Get KieServices and KieContainer
        KieServices ks = KieServices.Factory.get();
        KieContainer kContainer = ks.newKieContainer(
            ks.newReleaseId("com.mybank", "loan-approval", "1.0.0-SNAPSHOT")
        );

        // 2) Create a new KieSession
        KieSession kSession = kContainer.newKieSession();

        // 3) Create the objects we'll insert
        Applicant applicant = new Applicant();
        applicant.setName("John Doe");
        applicant.setCreditScore(750);
        applicant.setIncome(60000);

        Loan loan = new Loan();
        loan.setAmount(150000);

        LoanDecision decision = new LoanDecision();

        // 4) Insert facts into session
        kSession.insert(applicant);
        kSession.insert(loan);
        kSession.insert(decision);

        // 5) Fire rules
        int firedCount = kSession.fireAllRules();
        kSession.dispose();

        // 6) Show what happened
        System.out.println("Number of rules fired: " + firedCount);
        System.out.println("Loan decision = " + decision.getDecision());
    }
}
Because our example table says:

If creditScore ≥ 700, income ≥ 50000, and loan amount ≤ 200000 => decision is "APPROVED",
we expect:

java
Copy
Number of rules fired: 1
Loan decision = APPROVED
Final Recap
Create a Project in KIE Workbench.
Add Data Objects (Applicant, Loan, LoanDecision) to define your inputs and outputs.
Create a Guided Decision Table:
Condition Columns for the “if” part.
Action Columns for the “then” part.
Fill in the rows with specific values (the rules).
Save and Build & Deploy.
Test by inserting facts (Applicant, Loan, LoanDecision) and checking the results.
That’s it! You’ve now built your first Guided Decision Table like a novice—step by step. Once you’re comfortable, you can add more complexity, but the basics remain the same:

Condition columns match fields in your data objects.
Action columns set or modify fields in your data objects.
Rows combine the condition constraints with the resulting actions.
This approach makes it easy for business users and developers to collaborate on logic without diving directly into DRL code.