# Add this new strategy class:
class StructStrategy(FlatteningStrategy):
    """Strategy for flattening struct columns (without arrays)"""
    def flatten(self, df: DataFrame, column: str) -> DataFrame:
        logger.info(f"Applying struct strategy to column: {column}")

        # Get struct fields
        field = [f for f in df.schema.fields if f.name == column][0]
        if not isinstance(field.dataType, StructType):
            raise ValueError(f"Column {column} is not a struct type")

        struct_fields = field.dataType.fields
        result_df = df

        # Create individual columns for each struct field
        for struct_field in struct_fields:
            new_col = f"{column}_{struct_field.name}"
            result_df = result_df.withColumn(
                new_col,
                col(f"{column}.{struct_field.name}")
            )

        # Drop original struct column
        return result_df.drop(column)

# Update StrategyFactory to include the new strategy:
class StrategyFactory:
    """Factory for creating appropriate flattening strategy"""
    @staticmethod
    def get_strategy(df: DataFrame, column: str, strategy_type: Optional[str] = None) -> FlatteningStrategy:
        if strategy_type:
            strategies = {
                'simple': SimpleArrayStrategy(),
                'nested': NestedArrayStrategy(),
                'struct': ArrayStructStrategy(),
                'preserving': PreservingArrayStrategy(),
                'struct_only': StructStrategy()  # Add new strategy
            }
            return strategies.get(strategy_type, SimpleArrayStrategy())

        # Auto-detect strategy based on column type
        field = [f for f in df.schema.fields if f.name == column][0]

        if isinstance(field.dataType, StructType):
            return StructStrategy()
        elif isinstance(field.dataType, ArrayType):
            element_type = field.dataType.elementType
            if isinstance(element_type, ArrayType):
                return NestedArrayStrategy()
            elif isinstance(element_type, StructType):
                return ArrayStructStrategy()
            else:
                return SimpleArrayStrategy()
        else:
            raise ValueError(f"Column {column} is not a struct or array type")