# src/reference_data_loader/warehouse/reader.py

from typing import Dict
from pyspark.sql import SparkSession, DataFrame
import logging
from ..auth.token_service import TokenService

logger = logging.getLogger(__name__)

class WarehouseError(Exception):
    pass

class WarehouseReader:
    # 1. Manages Databricks JDBC connections
    # 2. Executes queries with authentication
    # 3. Returns query results as DataFrames

    def __init__(
        self,
        config: Dict[str, str],
        token_service: TokenService
    ):
        self.config = config
        self.token_service = token_service
        self.jdbc_url = self._build_jdbc_url()

    def _build_jdbc_url(self) -> str:
        # 1. Creates JDBC URL from configuration
        base = f"jdbc:databricks://{self.config['hostname']}:{self.config['port']}"

        params = []
        for key, value in self.config.items():
            if key not in {'hostname', 'port'} and value:
                params.append(f"{key}={value}")

        return f"{base};{';'.join(params)}"

    def execute_query(
        self,
        spark: SparkSession,
        query: str
    ) -> DataFrame:
        # 1. Gets authentication token
        # 2. Executes query via JDBC
        # 3. Returns result DataFrame
        try:
            token = self.token_service.get_token()

            return (spark.read.format("jdbc")
                   .option("url", self.jdbc_url)
                   .option("Auth_AccessToken", token)
                   .option("driver", "com.databricks.client.jdbc.Driver")
                   .option("query", query)
                   .load())

        except Exception as e:
            raise WarehouseError(f"Query failed: {str(e)}")