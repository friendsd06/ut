import pytest
from unittest.mock import mock_open, patch
from config.config_manager import (
    Environment, 
    DatabricksConnection,
    S3Storage,
    TableConfig,
    ConfigurationManager
)

# Test Data
VALID_WAREHOUSE_CONFIG = """
databricks:
  dev:
    hostname: "dev-host"
    port: 443
    transportMode: "http"
    ssl: "1"
    ConnCatalog: "catalog"
    AuthMech: "3"
    UseProxy: "1"
    UseNativeQuery: "1"
    ProxyHost: "proxy"
    ProxyPort: "8080"
    httpPath: "/path"
  prod:
    hostname: "prod-host"
    port: 443
    transportMode: "http"
    ssl: "1"
    ConnCatalog: "catalog"
    AuthMech: "3"
    UseProxy: "1"
    UseNativeQuery: "1"
    ProxyHost: "proxy"
    ProxyPort: "8080"
    httpPath: "/path"
"""

VALID_ETL_CONFIG = """
s3_settings:
  dev:
    base_path: "s3a://bucket/dev/"
  prod:
    base_path: "s3a://bucket/prod/"
tables:
  test_table:
    query: "SELECT * FROM test"
    s3_path: "test/path"
    format: "parquet"
    mode: "overwrite"
    read_options:
      fetchsize: 1000
    write_options:
      compression: "snappy"
"""

def test_environment_from_string():
    """Test Environment enum string conversion"""
    assert Environment.from_string("dev") == Environment.DEV
    with pytest.raises(ValueError):
        Environment.from_string("invalid")

class TestDatabricksConnection:
    """Test DatabricksConnection class"""
    
    @pytest.fixture
    def connection(self):
        return DatabricksConnection(
            hostname="test-host",
            port=443,
            transportMode="http",
            ssl="1",
            ConnCatalog="catalog",
            AuthMech="3",
            UseProxy="1",
            UseNativeQuery="1",
            ProxyHost="proxy",
            ProxyPort="8080",
            httpPath="/path"
        )

    def test_get_connection_params(self, connection):
        """Test connection parameters formatting"""
        params = connection.get_connection_params()
        assert params["host"] == "test-host"
        assert params["ssl"] is True
        assert params["auth_mechanism"] == 3
        assert params["use_proxy"] is True

class TestS3Storage:
    """Test S3Storage class"""

    def test_get_destination_path(self):
        """Test S3 path construction"""
        storage = S3Storage(base_path="s3a://bucket/base/")
        path = storage.get_destination_path("/test/path")
        assert path == "s3a://bucket/base/test/path"

class TestTableConfig:
    """Test TableConfig class"""

    @pytest.fixture
    def config(self):
        return TableConfig(
            source_query="SELECT *",
            destination_path="test/path",
            file_format="parquet",
            write_mode="overwrite"
        )

    def test_validate_valid_config(self, config):
        """Test validation with valid config"""
        config.validate()  # Should not raise

    def test_validate_invalid_format(self, config):
        """Test validation with invalid format"""
        config.file_format = "invalid"
        with pytest.raises(ValueError):
            config.validate()

    def test_get_reader_config(self, config):
        """Test reader config generation"""
        reader_config = config.get_reader_config()
        assert reader_config["format"] == "parquet"

class TestConfigurationManager:
    """Test ConfigurationManager class"""

    @pytest.fixture
    def config_manager(self):
        with patch("builtins.open", mock_open(read_data=VALID_WAREHOUSE_CONFIG)):
            with patch("builtins.open", mock_open(read_data=VALID_ETL_CONFIG)):
                return ConfigurationManager("warehouse.yaml", "etl.yaml")

    def test_get_warehouse_connection(self, config_manager):
        """Test warehouse connection retrieval"""
        connection = config_manager.get_warehouse_connection("dev")
        assert isinstance(connection, DatabricksConnection)
        assert connection.hostname == "dev-host"

    def test_get_storage_config(self, config_manager):
        """Test storage config retrieval"""
        storage = config_manager.get_storage_config("dev")
        assert isinstance(storage, S3Storage)
        assert storage.base_path == "s3a://bucket/dev/"

    def test_get_table_config(self, config_manager):
        """Test table config retrieval"""
        table = config_manager.get_table_config("test_table")
        assert isinstance(table, TableConfig)
        assert table.file_format == "parquet"
        assert table.write_mode == "overwrite"

    def test_list_tables(self, config_manager):
        """Test table listing"""
        tables = config_manager.list_tables()
        assert "test_table" in tables

    def test_invalid_environment(self, config_manager):
        """Test invalid environment handling"""
        with pytest.raises(ValueError):
            config_manager.get_warehouse_connection("invalid")