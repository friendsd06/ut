# test_flattening_strategies.py
from pyspark.sql.types import *
from pyspark.sql.functions import array, struct, col

# 1. Create schemas for different test cases
# Simple Array Schema
simple_array_schema = StructType([
    StructField("id", StringType(), False),
    StructField("customer_name", StringType(), False),
    StructField("tags", ArrayType(StringType()), True),
    StructField("order_date", DateType(), False)
])

# Nested Array Schema
nested_array_schema = StructType([
    StructField("id", StringType(), False),
    StructField("product_name", StringType(), False),
    StructField("categories", ArrayType(ArrayType(StringType())), True)
])

# Array of Structs Schema
array_struct_schema = StructType([
    StructField("order_id", StringType(), False),
    StructField("customer_id", StringType(), False),
    StructField("items", ArrayType(
        StructType([
            StructField("item_id", StringType(), False),
            StructField("product_name", StringType(), False),
            StructField("quantity", IntegerType(), False),
            StructField("price", DoubleType(), False)
        ])
    ), False)
])

# Preserving Array Schema (with nulls)
preserving_array_schema = StructType([
    StructField("id", StringType(), False),
    StructField("product_name", StringType(), False),
    StructField("reviews", ArrayType(StringType()), True)
])

# 2. Create SQL for external tables
create_tables_sql = """
-- Simple Array Table
CREATE TABLE IF NOT EXISTS customer_tags (
    id STRING,
    customer_name STRING,
    tags ARRAY<STRING>,
    order_date DATE
)
USING DELTA
LOCATION '/path/to/customer_tags';

-- Nested Array Table
CREATE TABLE IF NOT EXISTS product_categories (
    id STRING,
    product_name STRING,
    categories ARRAY<ARRAY<STRING>>
)
USING DELTA
LOCATION '/path/to/product_categories';

-- Array of Structs Table
CREATE TABLE IF NOT EXISTS order_items (
    order_id STRING,
    customer_id STRING,
    items ARRAY<STRUCT
        item_id: STRING,
        product_name: STRING,
        quantity: INT,
        price: DOUBLE
    >>
)
USING DELTA
LOCATION '/path/to/order_items';

-- Preserving Array Table
CREATE TABLE IF NOT EXISTS product_reviews (
    id STRING,
    product_name STRING,
    reviews ARRAY<STRING>
)
USING DELTA
LOCATION '/path/to/product_reviews';
"""

# 3. Create sample data and test each strategy
def test_flattening_strategies():
    # Create sample data for Simple Array
    simple_array_data = [
        ("1", "John Doe", ["electronics", "smartphones", "accessories"], "2024-01-01"),
        ("2", "Jane Smith", ["clothing", "shoes"], "2024-01-02"),
        ("3", "Bob Wilson", ["books", "ebooks", "magazines"], "2024-01-03")
    ]

    # Create sample data for Nested Array
    nested_array_data = [
        ("1", "Laptop", [["electronics", "computers"], ["gaming", "hardware"]]),
        ("2", "Shirt", [["clothing", "casual"], ["summer", "fashion"]]),
        ("3", "Book", [["books", "fiction"], ["bestseller"]])
    ]

    # Create sample data for Array of Structs
    array_struct_data = [
        ("ORD001", "CUST001", [
            {"item_id": "I1", "product_name": "Laptop", "quantity": 1, "price": 999.99},
            {"item_id": "I2", "product_name": "Mouse", "quantity": 2, "price": 29.99}
        ]),
        ("ORD002", "CUST002", [
            {"item_id": "I3", "product_name": "Keyboard", "quantity": 1, "price": 49.99}
        ])
    ]

    # Create sample data for Preserving Array (with nulls)
    preserving_array_data = [
        ("1", "Laptop", ["Great product", "Good value"]),
        ("2", "Mouse", None),
        ("3", "Keyboard", ["Excellent"])
    ]

    # Create DataFrames
    simple_df = spark.createDataFrame(simple_array_data, simple_array_schema)
    nested_df = spark.createDataFrame(nested_array_data, nested_array_schema)
    struct_df = spark.createDataFrame(array_struct_data, array_struct_schema)
    preserving_df = spark.createDataFrame(preserving_array_data, preserving_array_schema)

    # Write to Delta tables
    tables_info = [
        (simple_df, "customer_tags"),
        (nested_df, "product_categories"),
        (struct_df, "order_items"),
        (preserving_df, "product_reviews")
    ]

    for df, table_name in tables_info:
        df.write \
            .format("delta") \
            .mode("overwrite") \
            .option("mergeSchema", "true") \
            .save(f"/path/to/{table_name}")

    # Test each flattening strategy

    # 1. Simple Array Strategy
    flattened_simple = simple_df \
        .withColumn("tag", explode(col("tags"))) \
        .drop("tags")

    # 2. Nested Array Strategy
    flattened_nested = nested_df \
        .withColumn("category", flatten(col("categories"))) \
        .withColumn("category", explode(col("category"))) \
        .drop("categories")

    # 3. Array Struct Strategy
    flattened_struct = struct_df \
        .withColumn("item", explode(col("items"))) \
        .select(
            "order_id",
            "customer_id",
            col("item.item_id"),
            col("item.product_name"),
            col("item.quantity"),
            col("item.price")
        )

    # 4. Preserving Array Strategy
    flattened_preserving = preserving_df \
        .withColumn("review", explode_outer(col("reviews"))) \
        .drop("reviews")

    # Show results
    print("Simple Array Flattening Result:")
    flattened_simple.show()

    print("\nNested Array Flattening Result:")
    flattened_nested.show()

    print("\nArray of Structs Flattening Result:")
    flattened_struct.show()

    print("\nPreserving Array Flattening Result:")
    flattened_preserving.show()

# Run the test
test_flattening_strategies()

# Query examples for verification
verification_queries = """
-- Simple Array Query
SELECT * FROM customer_tags
LATERAL VIEW explode(tags) t AS tag;

-- Nested Array Query
SELECT id, product_name, category
FROM product_categories
LATERAL VIEW explode(flatten(categories)) c AS category;

-- Array of Structs Query
SELECT
    order_id,
    customer_id,
    item.item_id,
    item.product_name,
    item.quantity,
    item.price
FROM order_items
LATERAL VIEW explode(items) i AS item;

-- Preserving Array Query
SELECT
    id,
    product_name,
    review
FROM product_reviews
LATERAL VIEW OUTER explode(reviews) r AS review;
"""

# Expected outputs after flattening:

# 1. Simple Array Result:
# +---+-------------+--------+----------+
# |id |customer_name|tag     |order_date|
# +---+-------------+--------+----------+
# |1  |John Doe     |electronics|2024-01-01|
# |1  |John Doe     |smartphones|2024-01-01|
# |1  |John Doe     |accessories|2024-01-01|
# |2  |Jane Smith   |clothing|2024-01-02|
# |2  |Jane Smith   |shoes   |2024-01-02|
# ...

# 2. Nested Array Result:
# +---+------------+----------+
# |id |product_name|category  |
# +---+------------+----------+
# |1  |Laptop      |electronics|
# |1  |Laptop      |computers |
# |1  |Laptop      |gaming    |
# |1  |Laptop      |hardware  |
# ...

# 3. Array of Structs Result:
# +-------+----------+-------+------------+--------+------+
# |order_id|customer_id|item_id|product_name|quantity|price|
# +-------+----------+-------+------------+--------+------+
# |ORD001 |CUST001   |I1     |Laptop      |1       |999.99|
# |ORD001 |CUST001   |I2     |Mouse       |2       |29.99 |
# |ORD002 |CUST002   |I3     |Keyboard    |1       |49.99 |
# ...

# 4. Preserving Array Result:
# +---+------------+-------+
# |id |product_name|review |
# +---+------------+-------+
# |1  |Laptop      |Great product|
# |1  |Laptop      |Good value  |
# |2  |Mouse       |null   |
# |3  |Keyboard    |Excellent|
# ...

# Create external tables
for query in create_tables_sql.split(';'):
    if query.strip():
        spark.sql(query)

# Run flattening tests
test_flattening_strategies()


# Verify results with SQL
for query in verification_queries.split(';'):
    if query.strip():
        print("\nExecuting query:")
        print(query)
        spark.sql(query).show()