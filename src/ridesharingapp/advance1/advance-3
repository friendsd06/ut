
Edited
I've added advanced features such as ride history, driver feedback,
fare calculation, and enhanced driver details. Let me know if you need any more enhancements or further customization!

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

class RideSharingApp {
    public static void main(String[] args) {
        RideSharingService rideSharingService = new RideSharingService();

        // Adding drivers
        rideSharingService.addDriver("John Doe", "Car-1234", 4.8, "Sedan");
        rideSharingService.addDriver("Jane Smith", "Car-5678", 4.9, "SUV");
        rideSharingService.addDriver("Mike Johnson", "Car-9101", 4.5, "Hatchback");

        // Rider requesting ride
        String riderId = UUID.randomUUID().toString();
        rideSharingService.requestRide(riderId, "Pickup Location", "Dropoff Location", "SUV");

        // Viewing ride history
        rideSharingService.viewRideHistory(riderId);

        // Adding feedback for the ride
        rideSharingService.addFeedback(riderId, 5.0, "Great ride!");

        // Viewing driver details
        rideSharingService.viewDriverDetails();
    }
}

class Driver {
    String id;
    String name;
    String vehicleInfo;
    boolean isAvailable;
    double rating;
    String vehicleType;
    int totalRides;
    double totalRating;

    public Driver(String name, String vehicleInfo, double rating, String vehicleType) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.vehicleInfo = vehicleInfo;
        this.isAvailable = true;
        this.rating = rating;
        this.vehicleType = vehicleType;
        this.totalRides = 0;
        this.totalRating = rating;
    }

    public void setAvailable(boolean available) {
        this.isAvailable = available;
    }

    public void updateRating(double newRating) {
        this.totalRides++;
        this.totalRating += newRating;
        this.rating = totalRating / totalRides;
    }
}

class Rider {
    String id;
    String pickupLocation;
    String dropoffLocation;
    String preferredVehicleType;

    public Rider(String id, String pickupLocation, String dropoffLocation, String preferredVehicleType) {
        this.id = id;
        this.pickupLocation = pickupLocation;
        this.dropoffLocation = dropoffLocation;
        this.preferredVehicleType = preferredVehicleType;
    }
}

class Ride {
    String rideId;
    String riderId;
    String driverId;
    String pickupLocation;
    String dropoffLocation;
    LocalDateTime rideStartTime;
    LocalDateTime rideEndTime;
    double fare;

    public Ride(String riderId, String driverId, String pickupLocation, String dropoffLocation) {
        this.rideId = UUID.randomUUID().toString();
        this.riderId = riderId;
        this.driverId = driverId;
        this.pickupLocation = pickupLocation;
        this.dropoffLocation = dropoffLocation;
        this.rideStartTime = LocalDateTime.now();
    }

    public void endRide() {
        this.rideEndTime = LocalDateTime.now();
        this.fare = calculateFare();
    }

    private double calculateFare() {
        // Simple fare calculation logic (can be enhanced)
        return 50.0 + Math.random() * 100;
    }
}

class RideSharingService {
    private List<Driver> drivers;
    private List<Rider> riders;
    private Map<String, Ride> rideHistory;

    public RideSharingService() {
        this.drivers = new ArrayList<>();
        this.riders = new ArrayList<>();
        this.rideHistory = new HashMap<>();
    }

    public void addDriver(String name, String vehicleInfo, double rating, String vehicleType) {
        Driver driver = new Driver(name, vehicleInfo, rating, vehicleType);
        drivers.add(driver);
        System.out.println("Driver added: " + name + " with vehicle " + vehicleInfo + " (" + vehicleType + ") and rating " + rating);
    }

    public void requestRide(String riderId, String pickupLocation, String dropoffLocation, String preferredVehicleType) {
        Rider rider = new Rider(riderId, pickupLocation, dropoffLocation, preferredVehicleType);
        riders.add(rider);

        Optional<Driver> availableDriver = findAvailableDriver(preferredVehicleType);
        if (availableDriver.isPresent()) {
            Driver driver = availableDriver.get();
            driver.setAvailable(false);
            Ride ride = new Ride(riderId, driver.id, pickupLocation, dropoffLocation);
            ride.endRide();
            rideHistory.put(riderId, ride);
            driver.setAvailable(true);
            driver.updateRating(5.0);  // Update driver rating after ride (default rating for simplicity)
            System.out.println("Ride confirmed: Driver " + driver.name + " assigned to Rider " + rider.id);
            System.out.println("Ride fare: " + ride.fare);
        } else {
            System.out.println("No drivers available at the moment. Please try again later.");
        }
    }

    private Optional<Driver> findAvailableDriver(String preferredVehicleType) {
        return drivers.stream()
                .filter(driver -> driver.isAvailable && driver.vehicleType.equalsIgnoreCase(preferredVehicleType))
                .sorted(Comparator.comparingDouble(driver -> -driver.rating))
                .findFirst();
    }

    public void viewRideHistory(String riderId) {
        Ride ride = rideHistory.get(riderId);
        if (ride != null) {
            System.out.println("Ride History for Rider " + riderId + ":");
            System.out.println("Driver ID: " + ride.driverId);
            System.out.println("Pickup Location: " + ride.pickupLocation);
            System.out.println("Dropoff Location: " + ride.dropoffLocation);
            System.out.println("Ride Start Time: " + ride.rideStartTime);
            System.out.println("Ride End Time: " + ride.rideEndTime);
            System.out.println("Fare: " + ride.fare);
        } else {
            System.out.println("No ride history available for Rider " + riderId);
        }
    }

    public void addFeedback(String riderId, double rating, String comments) {
        Ride ride = rideHistory.get(riderId);
        if (ride != null) {
            Optional<Driver> driver = drivers.stream().filter(d -> d.id.equals(ride.driverId)).findFirst();
            driver.ifPresent(d -> d.updateRating(rating));
            System.out.println("Feedback added for Driver " + ride.driverId + ": Rating = " + rating + ", Comments = " + comments);
        } else {
            System.out.println("No ride history available for Rider " + riderId + " to add feedback.");
        }
    }

    public void viewDriverDetails() {
        System.out.println("Driver Details:");
        for (Driver driver : drivers) {
            System.out.println("Driver ID: " + driver.id);
            System.out.println("Name: " + driver.name);
            System.out.println("Vehicle Info: " + driver.vehicleInfo);
            System.out.println("Rating: " + driver.rating);
            System.out.println("Total Rides: " + driver.totalRides);
            System.out.println("Available: " + driver.isAvailable);
            System.out.println();
        }
    }

    public List<Driver> getAvailableDrivers() {
        return drivers.stream().filter(driver -> driver.isAvailable).collect(Collectors.toList());
    }
}
