This is a basic Core Java implementation of a ride-sharing app. It allows for adding drivers, requesting rides, and matching available drivers to riders.
It uses simple classes like Driver, Rider, and RideSharingService. Let me know if you need more functionality or a detailed explanation of any part.


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

class RideSharingApp {
    public static void main(String[] args) {
        RideSharingService rideSharingService = new RideSharingService();

        // Adding drivers
        rideSharingService.addDriver("John Doe", "Car-1234");
        rideSharingService.addDriver("Jane Smith", "Car-5678");

        // Rider requesting ride
        String riderId = UUID.randomUUID().toString();
        rideSharingService.requestRide(riderId, "Pickup Location", "Dropoff Location");
    }
}

class Driver {
    String id;
    String name;
    String vehicleInfo;
    boolean isAvailable;

    public Driver(String name, String vehicleInfo) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.vehicleInfo = vehicleInfo;
        this.isAvailable = true;
    }

    public void setAvailable(boolean available) {
        this.isAvailable = available;
    }
}

class Rider {
    String id;
    String pickupLocation;
    String dropoffLocation;

    public Rider(String id, String pickupLocation, String dropoffLocation) {
        this.id = id;
        this.pickupLocation = pickupLocation;
        this.dropoffLocation = dropoffLocation;
    }
}

class RideSharingService {
    private List<Driver> drivers;
    private List<Rider> riders;

    public RideSharingService() {
        this.drivers = new ArrayList<>();
        this.riders = new ArrayList<>();
    }

    public void addDriver(String name, String vehicleInfo) {
        Driver driver = new Driver(name, vehicleInfo);
        drivers.add(driver);
        System.out.println("Driver added: " + name + " with vehicle " + vehicleInfo);
    }

    public void requestRide(String riderId, String pickupLocation, String dropoffLocation) {
        Rider rider = new Rider(riderId, pickupLocation, dropoffLocation);
        riders.add(rider);

        Optional<Driver> availableDriver = findAvailableDriver();
        if (availableDriver.isPresent()) {
            Driver driver = availableDriver.get();
            driver.setAvailable(false);
            System.out.println("Ride confirmed: Driver " + driver.name + " assigned to Rider " + rider.id);
        } else {
            System.out.println("No drivers available at the moment. Please try again later.");
        }
    }

    private Optional<Driver> findAvailableDriver() {
        return drivers.stream().filter(driver -> driver.isAvailable).findFirst();
    }
}