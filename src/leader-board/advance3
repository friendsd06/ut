I've added a real-time leaderboard updater that periodically updates team points and refreshes the leaderboard.
 Let me know if you need further enhancements or additional features.

 import java.util.*;
 import java.util.concurrent.*;
 import java.util.stream.Collectors;

 public class LeaderboardSystem {

     private static final int TOP_1_PERCENT = 1000;
     private static final int TOP_5_PERCENT = 5000;
     private static final int TOTAL_TEAMS = 100000;
     private static final int CACHE_REFRESH_INTERVAL = 5; // in seconds
     private static final int LEADERBOARD_UPDATE_INTERVAL = 1; // in seconds

     private final Map<Integer, Team> teams = new ConcurrentHashMap<>();
     private final ConcurrentSkipListSet<Team> leaderboard = new ConcurrentSkipListSet<>(Comparator.comparingInt(Team::getPoints).reversed());
     private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
     private final Map<Integer, Team> leaderboardCache = new ConcurrentHashMap<>();

     public static void main(String[] args) {
         LeaderboardSystem system = new LeaderboardSystem();
         system.initializeTeams();
         system.calculatePoints();
         system.startCacheUpdater();
         system.startLeaderboardUpdater();
         system.displayTopTeams(100);
         system.distributeRewards();
     }

     // Initialize teams with dummy data
     private void initializeTeams() {
         for (int i = 1; i <= TOTAL_TEAMS; i++) {
             teams.put(i, new Team(i, "Team " + i));
         }
     }

     // Calculate points based on player performance, captain, and vice-captain
     private void calculatePoints() {
         Random random = new Random();
         for (Team team : teams.values()) {
             int basePoints = random.nextInt(1000);
             int captainBonus = (int) (basePoints * 0.2); // 20% bonus for captain
             int viceCaptainBonus = (int) (basePoints * 0.1); // 10% bonus for vice-captain
             team.setPoints(basePoints + captainBonus + viceCaptainBonus);
             leaderboard.add(team);
         }
     }

     // Start a scheduled task to update the leaderboard cache for faster access
     private void startCacheUpdater() {
         scheduler.scheduleAtFixedRate(() -> {
             leaderboardCache.clear();
             leaderboard.stream().limit(100).forEach(team -> leaderboardCache.put(team.getId(), team));
         }, 0, CACHE_REFRESH_INTERVAL, TimeUnit.SECONDS);
     }

     // Start a scheduled task to update leaderboard points periodically for real-time updates
     private void startLeaderboardUpdater() {
         scheduler.scheduleAtFixedRate(() -> {
             Random random = new Random();
             for (Team team : teams.values()) {
                 int pointsChange = random.nextInt(200) - 100; // Random increase or decrease in points
                 team.setPoints(team.getPoints() + pointsChange);
                 leaderboard.remove(team);
                 leaderboard.add(team);
             }
         }, 0, LEADERBOARD_UPDATE_INTERVAL, TimeUnit.SECONDS);
     }

     // Display the top N teams
     private void displayTopTeams(int n) {
         System.out.println("Top " + n + " Teams:");
         leaderboardCache.values().stream().limit(n).forEach(team -> System.out.println("Rank " + (leaderboardCache.values().stream().collect(Collectors.toList()).indexOf(team) + 1) + ": " + team));
     }

     // Distribute rewards based on ranking
     private void distributeRewards() {
         int rank = 1;
         for (Team team : leaderboard) {
             if (rank <= TOP_1_PERCENT) {
                 team.setReward("High Reward");
             } else if (rank <= TOP_5_PERCENT) {
                 team.setReward("Medium Reward");
             } else if (rank <= (TOTAL_TEAMS / 2)) {
                 team.setReward("Low Reward");
             }
             rank++;
         }
     }

     static class Team {
         private final int id;
         private final String name;
         private int points;
         private String reward;

         public Team(int id, String name) {
             this.id = id;
             this.name = name;
         }

         public int getId() {
             return id;
         }

         public int getPoints() {
             return points;
         }

         public void setPoints(int points) {
             this.points = points;
         }

         public void setReward(String reward) {
             this.reward = reward;
         }

         @Override
         public String toString() {
             return "Team{" +
                     "id=" + id +
                     ", name='" + name + '\'' +
                     ", points=" + points +
                     ", reward='" + reward + '\'' +
                     '}';
         }
     }
 }
