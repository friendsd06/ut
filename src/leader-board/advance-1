Here's a basic implementation in Core Java that captures the high-level requirements for a Dream11-like leaderboard system. This implementation will focus on core elements such as player rankings, point calculations, reward distribution, and user visibility, with an emphasis on scalability and caching:

Leaderboard System Design
This implementation provides a simple leaderboard system where:

Teams are assigned points based on a base score, captain bonus, and vice-captain bonus.
Teams are ranked, and rewards are distributed according to their ranking.
A priority queue (leaderboard) is used to keep track of team rankings in real-time.
Considerations for scalability, caching, and real-time updates would require more sophisticated tools like distributed databases,
caching layers (e.g., Redis), and more robust concurrency handling, which are not covered in this simple example.

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class LeaderboardSystem {

    private static final int TOP_1_PERCENT = 1000;
    private static final int TOP_5_PERCENT = 5000;
    private static final int TOTAL_TEAMS = 100000;

    private final Map<Integer, Team> teams = new ConcurrentHashMap<>();
    private final PriorityQueue<Team> leaderboard = new PriorityQueue<>(Comparator.comparingInt(Team::getPoints).reversed());

    public static void main(String[] args) {
        LeaderboardSystem system = new LeaderboardSystem();
        system.initializeTeams();
        system.calculatePoints();
        system.displayTopTeams(100);
        system.distributeRewards();
    }

    // Initialize teams with dummy data
    private void initializeTeams() {
        for (int i = 1; i <= TOTAL_TEAMS; i++) {
            teams.put(i, new Team(i, "Team " + i));
        }
    }

    // Calculate points based on player performance, captain, and vice-captain
    private void calculatePoints() {
        Random random = new Random();
        for (Team team : teams.values()) {
            int basePoints = random.nextInt(1000);
            int captainBonus = (int) (basePoints * 0.2); // 20% bonus for captain
            int viceCaptainBonus = (int) (basePoints * 0.1); // 10% bonus for vice-captain
            team.setPoints(basePoints + captainBonus + viceCaptainBonus);
            leaderboard.add(team);
        }
    }

    // Display the top N teams
    private void displayTopTeams(int n) {
        Iterator<Team> iterator = leaderboard.iterator();
        int count = 0;
        System.out.println("Top " + n + " Teams:");
        while (iterator.hasNext() && count < n) {
            Team team = iterator.next();
            System.out.println("Rank " + (count + 1) + ": " + team);
            count++;
        }
    }

    // Distribute rewards based on ranking
    private void distributeRewards() {
        int rank = 1;
        for (Team team : leaderboard) {
            if (rank <= TOP_1_PERCENT) {
                team.setReward("High Reward");
            } else if (rank <= TOP_5_PERCENT) {
                team.setReward("Medium Reward");
            } else if (rank <= (TOTAL_TEAMS / 2)) {
                team.setReward("Low Reward");
            }
            rank++;
        }
    }

    static class Team {
        private final int id;
        private final String name;
        private int points;
        private String reward;

        public Team(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getPoints() {
            return points;
        }

        public void setPoints(int points) {
            this.points = points;
        }

        public void setReward(String reward) {
            this.reward = reward;
        }

        @Override
        public String toString() {
            return "Team{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", points=" + points +
                    ", reward='" + reward + '\'' +
                    '}';
        }
    }
}
