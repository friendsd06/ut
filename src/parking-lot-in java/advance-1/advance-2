
Edited
I've made the parking lot app more advanced by adding the following features:

Track and display the time each car was parked.
Prevent duplicate car numbers from being parked.
Added the ability to find a car by its number.
Display a list of all parked cars.
Let me know if you'd like any further modifications or additional features!

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

class ParkingLot {
    private final int capacity;
    private final Map<Integer, String> parkedCars;
    private final Map<String, LocalDateTime> parkingTimes;
    private final Set<String> carNumbers;

    public ParkingLot(int capacity) {
        this.capacity = capacity;
        this.parkedCars = new HashMap<>();
        this.parkingTimes = new HashMap<>();
        this.carNumbers = new HashSet<>();
    }

    // Park a car in the parking lot
    public boolean parkCar(int slot, String carNumber) {
        if (slot < 1 || slot > capacity) {
            System.out.println("Invalid slot number. Choose a slot between 1 and " + capacity);
            return false;
        }
        if (parkedCars.containsKey(slot)) {
            System.out.println("Slot " + slot + " is already occupied.");
            return false;
        }
        if (carNumbers.contains(carNumber)) {
            System.out.println("Car " + carNumber + " is already parked in the lot.");
            return false;
        }
        parkedCars.put(slot, carNumber);
        parkingTimes.put(carNumber, LocalDateTime.now());
        carNumbers.add(carNumber);
        System.out.println("Car " + carNumber + " parked at slot " + slot);
        return true;
    }

    // Remove a car from the parking lot
    public boolean removeCar(int slot) {
        if (!parkedCars.containsKey(slot)) {
            System.out.println("No car found at slot " + slot);
            return false;
        }
        String carNumber = parkedCars.remove(slot);
        LocalDateTime parkedTime = parkingTimes.remove(carNumber);
        carNumbers.remove(carNumber);
        LocalDateTime currentTime = LocalDateTime.now();
        long parkedDuration = java.time.Duration.between(parkedTime, currentTime).toMinutes();
        System.out.println("Car " + carNumber + " removed from slot " + slot);
        System.out.println("Total parked time: " + parkedDuration + " minutes");
        return true;
    }

    // Find a car by its number
    public void findCar(String carNumber) {
        if (!carNumbers.contains(carNumber)) {
            System.out.println("Car " + carNumber + " is not parked in the lot.");
            return;
        }
        for (Map.Entry<Integer, String> entry : parkedCars.entrySet()) {
            if (entry.getValue().equals(carNumber)) {
                System.out.println("Car " + carNumber + " is parked at slot " + entry.getKey());
                return;
            }
        }
    }

    // Display current parking status
    public void displayStatus() {
        System.out.println("Current Parking Status:");
        for (int i = 1; i <= capacity; i++) {
            if (parkedCars.containsKey(i)) {
                String carNumber = parkedCars.get(i);
                LocalDateTime parkedTime = parkingTimes.get(carNumber);
                String formattedTime = parkedTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                System.out.println("Slot " + i + ": " + carNumber + " (Parked at: " + formattedTime + ")");
            } else {
                System.out.println("Slot " + i + ": Empty");
            }
        }
    }

    // Display all parked cars
    public void displayAllParkedCars() {
        System.out.println("List of all parked cars:");
        if (carNumbers.isEmpty()) {
            System.out.println("No cars are currently parked.");
        } else {
            for (String carNumber : carNumbers) {
                System.out.println("Car Number: " + carNumber);
            }
        }
    }
}

public class ParkingLotApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the capacity of the parking lot: ");
        int capacity = scanner.nextInt();

        ParkingLot parkingLot = new ParkingLot(capacity);
        while (true) {
            System.out.println("\nChoose an action:");
            System.out.println("1. Park a car");
            System.out.println("2. Remove a car");
            System.out.println("3. Display parking lot status");
            System.out.println("4. Find a car by number");
            System.out.println("5. Display all parked cars");
            System.out.println("6. Exit");
            System.out.print("Your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter slot number to park the car: ");
                    int slotToPark = scanner.nextInt();
                    System.out.print("Enter car number: ");
                    String carNumber = scanner.next();
                    parkingLot.parkCar(slotToPark, carNumber);
                    break;
                case 2:
                    System.out.print("Enter slot number to remove the car: ");
                    int slotToRemove = scanner.nextInt();
                    parkingLot.removeCar(slotToRemove);
                    break;
                case 3:
                    parkingLot.displayStatus();
                    break;
                case 4:
                    System.out.print("Enter car number to find: ");
                    String carToFind = scanner.next();
                    parkingLot.findCar(carToFind);
                    break;
                case 5:
                    parkingLot.displayAllParkedCars();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please choose a valid action.");
            }
        }
    }
}