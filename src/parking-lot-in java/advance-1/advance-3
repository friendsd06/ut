I've made the parking lot app more advanced by implementing the following features:

Added an automatic slot allocation system using a priority queue for efficient slot assignment.
Updated the parking logic to assign the next available slot automatically.
Added the ability to display available slots.
Removed the need to manually specify the slot number while parking a car, simplifying the user experience.
Let me know if you need further modifications or additional features!


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.PriorityQueue;
import java.util.Comparator;

class ParkingLot {
    private final int capacity;
    private final Map<Integer, String> parkedCars;
    private final Map<String, LocalDateTime> parkingTimes;
    private final Set<String> carNumbers;
    private final PriorityQueue<Integer> availableSlots;
    private final Map<String, Integer> carSlotMapping;

    public ParkingLot(int capacity) {
        this.capacity = capacity;
        this.parkedCars = new HashMap<>();
        this.parkingTimes = new HashMap<>();
        this.carNumbers = new HashSet<>();
        this.availableSlots = new PriorityQueue<>();
        this.carSlotMapping = new HashMap<>();
        for (int i = 1; i <= capacity; i++) {
            availableSlots.add(i);
        }
    }

    // Park a car in the parking lot
    public boolean parkCar(String carNumber) {
        if (carNumbers.contains(carNumber)) {
            System.out.println("Car " + carNumber + " is already parked in the lot.");
            return false;
        }
        if (availableSlots.isEmpty()) {
            System.out.println("No available slots. The parking lot is full.");
            return false;
        }
        int slot = availableSlots.poll();
        parkedCars.put(slot, carNumber);
        parkingTimes.put(carNumber, LocalDateTime.now());
        carNumbers.add(carNumber);
        carSlotMapping.put(carNumber, slot);
        System.out.println("Car " + carNumber + " parked at slot " + slot);
        return true;
    }

    // Remove a car from the parking lot
    public boolean removeCar(String carNumber) {
        if (!carNumbers.contains(carNumber)) {
            System.out.println("Car " + carNumber + " is not parked in the lot.");
            return false;
        }
        int slot = carSlotMapping.remove(carNumber);
        parkedCars.remove(slot);
        LocalDateTime parkedTime = parkingTimes.remove(carNumber);
        carNumbers.remove(carNumber);
        availableSlots.add(slot);
        LocalDateTime currentTime = LocalDateTime.now();
        long parkedDuration = java.time.Duration.between(parkedTime, currentTime).toMinutes();
        System.out.println("Car " + carNumber + " removed from slot " + slot);
        System.out.println("Total parked time: " + parkedDuration + " minutes");
        return true;
    }

    // Find a car by its number
    public void findCar(String carNumber) {
        if (!carNumbers.contains(carNumber)) {
            System.out.println("Car " + carNumber + " is not parked in the lot.");
            return;
        }
        int slot = carSlotMapping.get(carNumber);
        System.out.println("Car " + carNumber + " is parked at slot " + slot);
    }

    // Display current parking status
    public void displayStatus() {
        System.out.println("Current Parking Status:");
        for (int i = 1; i <= capacity; i++) {
            if (parkedCars.containsKey(i)) {
                String carNumber = parkedCars.get(i);
                LocalDateTime parkedTime = parkingTimes.get(carNumber);
                String formattedTime = parkedTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                System.out.println("Slot " + i + ": " + carNumber + " (Parked at: " + formattedTime + ")");
            } else {
                System.out.println("Slot " + i + ": Empty");
            }
        }
    }

    // Display all parked cars
    public void displayAllParkedCars() {
        System.out.println("List of all parked cars:");
        if (carNumbers.isEmpty()) {
            System.out.println("No cars are currently parked.");
        } else {
            for (String carNumber : carNumbers) {
                System.out.println("Car Number: " + carNumber);
            }
        }
    }

    // Display available slots
    public void displayAvailableSlots() {
        System.out.println("Available Slots:");
        if (availableSlots.isEmpty()) {
            System.out.println("No available slots. The parking lot is full.");
        } else {
            for (int slot : availableSlots) {
                System.out.println("Slot: " + slot);
            }
        }
    }
}

public class ParkingLotApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the capacity of the parking lot: ");
        int capacity = scanner.nextInt();

        ParkingLot parkingLot = new ParkingLot(capacity);
        while (true) {
            System.out.println("\nChoose an action:");
            System.out.println("1. Park a car");
            System.out.println("2. Remove a car");
            System.out.println("3. Display parking lot status");
            System.out.println("4. Find a car by number");
            System.out.println("5. Display all parked cars");
            System.out.println("6. Display available slots");
            System.out.println("7. Exit");
            System.out.print("Your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter car number: ");
                    String carNumber = scanner.next();
                    parkingLot.parkCar(carNumber);
                    break;
                case 2:
                    System.out.print("Enter car number to remove: ");
                    String carToRemove = scanner.next();
                    parkingLot.removeCar(carToRemove);
                    break;
                case 3:
                    parkingLot.displayStatus();
                    break;
                case 4:
                    System.out.print("Enter car number to find: ");
                    String carToFind = scanner.next();
                    parkingLot.findCar(carToFind);
                    break;
                case 5:
                    parkingLot.displayAllParkedCars();
                    break;
                case 6:
                    parkingLot.displayAvailableSlots();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please choose a valid action.");
            }
        }
    }
}