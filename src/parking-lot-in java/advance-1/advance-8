I've refactored the code to make it more loosely coupled, optimized, production-ready, and robust. Here are the key improvements:

Separation of concerns: Created separate classes for different responsibilities (ParkingLotSystem, ParkingLotImpl, Car, ParkingLotFactory, ParkingLotController).
Interface-based design: Introduced IParkingLot interface for loose coupling.
Factory pattern: Used ParkingLotFactory for creating ParkingLot instances.
Improved exception handling: Added custom ParkingException and wrapped operations in try-catch blocks.
Immutable Car class: Made Car class immutable for thread-safety.
Use of concurrent collections: Utilized ConcurrentHashMap and CopyOnWriteArrayList for thread-safety.
Executor Service: Used ExecutorService for managing asynchronous tasks.
Input validation: Added input validation and proper parsing of user inputs.
Proper resource management: Used try-with-resources for Scanner and implemented shutdown method.
Consistent error messaging: Standardized error messages and exception handling.

This refactored version is more maintainable, scalable, and robust.
It follows SOLID principles and uses design patterns to improve the overall structure of the application.

package com.parkinglot;

import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;

public class ParkingLotSystem {
    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("Enter the capacity of the parking lot: ");
            int capacity = Integer.parseInt(scanner.nextLine());
            System.out.print("Enter the hourly rate for parking: ");
            double hourlyRate = Double.parseDouble(scanner.nextLine());

            ParkingLotFactory factory = new ParkingLotFactory();
            IParkingLot parkingLot = factory.createParkingLot(capacity, hourlyRate);
            ParkingLotController controller = new ParkingLotController(parkingLot);

            while (true) {
                try {
                    System.out.println("\nChoose an action:");
                    System.out.println("1. Park a car");
                    System.out.println("2. Remove a car");
                    System.out.println("3. Display parking lot status");
                    System.out.println("4. Find a car by number");
                    System.out.println("5. Monitor parking duration");
                    System.out.println("6. Exit");
                    System.out.print("Your choice: ");
                    int choice = Integer.parseInt(scanner.nextLine());

                    switch (choice) {
                        case 1:
                            controller.parkCar(scanner);
                            break;
                        case 2:
                            controller.removeCar(scanner);
                            break;
                        case 3:
                            controller.displayStatus();
                            break;
                        case 4:
                            controller.findCar(scanner);
                            break;
                        case 5:
                            controller.monitorParkingDuration(scanner);
                            break;
                        case 6:
                            System.out.println("Exiting...");
                            parkingLot.shutdown();
                            return;
                        default:
                            System.out.println("Invalid choice. Please choose a valid action.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a number.");
                } catch (Exception e) {
                    System.out.println("An error occurred: " + e.getMessage());
                }
            }
        }
    }
}

interface IParkingLot {
    boolean parkCar(Car car) throws ParkingException;
    boolean removeCar(String carNumber) throws ParkingException;
    void findCar(String carNumber);
    void displayStatus();
    void monitorParkingDuration(long limitMinutes);
    void shutdown();
}

class ParkingLotImpl implements IParkingLot {
    private final int capacity;
    private final ConcurrentMap<Integer, Car> parkedCars;
    private final ConcurrentMap<String, LocalDateTime> parkingTimes;
    private final Set<String> carNumbers;
    private final PriorityQueue<Integer> availableSlots;
    private final ConcurrentMap<String, Integer> carSlotMapping;
    private final List<String> carHistory;
    private final AtomicInteger availableSlotCount;
    private final double hourlyRate;
    private final ExecutorService executor;

    public ParkingLotImpl(int capacity, double hourlyRate) {
        this.capacity = capacity;
        this.hourlyRate = hourlyRate;
        this.parkedCars = new ConcurrentHashMap<>();
        this.parkingTimes = new ConcurrentHashMap<>();
        this.carNumbers = ConcurrentHashMap.newKeySet();
        this.availableSlots = new PriorityQueue<>();
        this.carSlotMapping = new ConcurrentHashMap<>();
        this.carHistory = new CopyOnWriteArrayList<>();
        this.availableSlotCount = new AtomicInteger(capacity);
        this.executor = Executors.newCachedThreadPool();

        for (int i = 1; i <= capacity; i++) {
            availableSlots.add(i);
        }
    }

    @Override
    public boolean parkCar(Car car) throws ParkingException {
        if (carNumbers.contains(car.getCarNumber())) {
            throw new ParkingException("Car " + car.getCarNumber() + " is already parked in the lot.");
        }
        if (availableSlotCount.get() == 0) {
            throw new ParkingException("No available slots. The parking lot is full.");
        }
        int slot;
        synchronized (availableSlots) {
            slot = availableSlots.poll();
        }
        if (slot == 0) {
            throw new ParkingException("No available slots. The parking lot is full.");
        }
        parkedCars.put(slot, car);
        parkingTimes.put(car.getCarNumber(), LocalDateTime.now());
        carNumbers.add(car.getCarNumber());
        carSlotMapping.put(car.getCarNumber(), slot);
        carHistory.add("Car " + car.getCarNumber() + " parked at slot " + slot + " on " + LocalDateTime.now());
        availableSlotCount.decrementAndGet();
        System.out.println("Car " + car.getCarNumber() + " parked at slot " + slot);
        return true;
    }

    @Override
    public boolean removeCar(String carNumber) throws ParkingException {
        if (!carNumbers.contains(carNumber)) {
            throw new ParkingException("Car " + carNumber + " is not parked in the lot.");
        }
        int slot = carSlotMapping.remove(carNumber);
        Car car = parkedCars.remove(slot);
        LocalDateTime parkedTime = parkingTimes.remove(carNumber);
        carNumbers.remove(carNumber);
        synchronized (availableSlots) {
            availableSlots.add(slot);
        }
        availableSlotCount.incrementAndGet();
        LocalDateTime currentTime = LocalDateTime.now();
        long parkedDuration = ChronoUnit.MINUTES.between(parkedTime, currentTime);
        double fee = calculateFee(parkedDuration);
        carHistory.add("Car " + carNumber + " removed from slot " + slot + " on " + currentTime + " after " + parkedDuration + " minutes");
        System.out.println("Car " + carNumber + " removed from slot " + slot);
        System.out.println("Total parked time: " + parkedDuration + " minutes");
        System.out.println("Parking fee: $" + fee);
        return true;
    }

    private double calculateFee(long parkedDuration) {
        return Math.ceil(parkedDuration / 60.0) * hourlyRate;
    }

    @Override
    public void findCar(String carNumber) {
        executor.execute(() -> {
            if (!carNumbers.contains(carNumber)) {
                System.out.println("Car " + carNumber + " is not parked in the lot.");
                return;
            }
            int slot = carSlotMapping.get(carNumber);
            System.out.println("Car " + carNumber + " is parked at slot " + slot);
        });
    }

    @Override
    public void displayStatus() {
        executor.execute(() -> {
            System.out.println("Current Parking Status:");
            for (int i = 1; i <= capacity; i++) {
                if (parkedCars.containsKey(i)) {
                    Car car = parkedCars.get(i);
                    LocalDateTime parkedTime = parkingTimes.get(car.getCarNumber());
                    String formattedTime = parkedTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                    System.out.println("Slot " + i + ": " + car.getCarNumber() + " (Parked at: " + formattedTime + ")");
                } else {
                    System.out.println("Slot " + i + ": Empty");
                }
            }
        });
    }

    @Override
    public void monitorParkingDuration(long limitMinutes) {
        executor.execute(() -> {
            System.out.println("Monitoring cars exceeding parking duration limit of " + limitMinutes + " minutes...");
            for (String carNumber : carNumbers) {
                LocalDateTime parkedTime = parkingTimes.get(carNumber);
                long parkedDuration = ChronoUnit.MINUTES.between(parkedTime, LocalDateTime.now());
                if (parkedDuration > limitMinutes) {
                    System.out.println("Alert: Car " + carNumber + " has exceeded the parking limit. Parked duration: " + parkedDuration + " minutes");
                }
            }
        });
    }

    @Override
    public void shutdown() {
        executor.shutdown();
        try {
            if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}

class Car {
    private final String carNumber;
    private final String ownerDetails;
    private final String carType;
    private final String carColor;

    public Car(String carNumber, String ownerDetails, String carType, String carColor) {
        this.carNumber = carNumber;
        this.ownerDetails = ownerDetails;
        this.carType = carType;
        this.carColor = carColor;
    }

    public String getCarNumber() {
        return carNumber;
    }

    // Add getters for other fields if needed
}

class ParkingLotFactory {
    public IParkingLot createParkingLot(int capacity, double hourlyRate) {
        return new ParkingLotImpl(capacity, hourlyRate);
    }
}

class ParkingLotController {
    private final IParkingLot parkingLot;

    public ParkingLotController(IParkingLot parkingLot) {
        this.parkingLot = parkingLot;
    }

    public void parkCar(Scanner scanner) {
        try {
            System.out.print("Enter car number: ");
            String carNumber = scanner.nextLine();
            System.out.print("Enter owner details: ");
            String ownerDetails = scanner.nextLine();
            System.out.print("Enter car type: ");
            String carType = scanner.nextLine();
            System.out.print("Enter car color: ");
            String carColor = scanner.nextLine();
            Car car = new Car(carNumber, ownerDetails, carType, carColor);
            parkingLot.parkCar(car);
        } catch (ParkingException e) {
            System.out.println("Error parking car: " + e.getMessage());
        }
    }

    public void removeCar(Scanner scanner) {
        try {
            System.out.print("Enter car number to remove: ");
            String carToRemove = scanner.nextLine();
            parkingLot.removeCar(carToRemove);
        } catch (ParkingException e) {
            System.out.println("Error removing car: " + e.getMessage());
        }
    }

    public void displayStatus() {
        parkingLot.displayStatus();
    }

    public void findCar(Scanner scanner) {
        System.out.print("Enter car number to find: ");
        String carToFind = scanner.nextLine();
        parkingLot.findCar(carToFind);
    }

    public void monitorParkingDuration(Scanner scanner) {
        System.out.print("Enter parking duration limit (in minutes) to monitor: ");
        long limitMinutes = Long.parseLong(scanner.nextLine());
        parkingLot.monitorParkingDuration(limitMinutes);
    }
}

class ParkingException extends Exception {
    public ParkingException(String message) {
        super(message);
    }
}