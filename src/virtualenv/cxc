# Windows Python Project Setup Script with Error Handling
param(
    [string]$projectName = "dag_generator",
    [string]$pythonVersion = "3.9"
)

function Write-Step {
    param([string]$message)
    Write-Host "`n=== $message ===" -ForegroundColor Cyan
}

function Test-CommandExists {
    param([string]$command)
    $oldPreference = $ErrorActionPreference
    $ErrorActionPreference = 'stop'
    try {
        if (Get-Command $command) { return $true }
    } catch {
        return $false
    } finally {
        $ErrorActionPreference = $oldPreference
    }
}

function Find-Python {
    # Check common Python installation paths
    $pythonPaths = @(
        "C:\Python39\python.exe",
        "C:\Python310\python.exe",
        "C:\Users\$env:USERNAME\AppData\Local\Programs\Python\Python39\python.exe",
        "C:\Users\$env:USERNAME\AppData\Local\Programs\Python\Python310\python.exe",
        "${env:ProgramFiles}\Python39\python.exe",
        "${env:ProgramFiles}\Python310\python.exe",
        "${env:ProgramFiles(x86)}\Python39\python.exe",
        "${env:ProgramFiles(x86)}\Python310\python.exe"
    )

    foreach ($path in $pythonPaths) {
        if (Test-Path $path) {
            return $path
        }
    }

    # Check if Python is in PATH
    if (Test-CommandExists "python") {
        return "python"
    }
    if (Test-CommandExists "py") {
        return "py"
    }

    return $null
}

function Create-PyFile {
    param(
        [string]$path,
        [string]$content = ""
    )
    if (-not (Test-Path $path)) {
        New-Item -ItemType File -Path $path -Force
        if ($content) {
            Set-Content -Path $path -Value $content -Encoding UTF8
        }
    }
}

# Check for Python installation
Write-Step "Checking Python installation"
$pythonCmd = Find-Python
if ($null -eq $pythonCmd) {
    Write-Host "Python not found! Please install Python 3.8 or later from python.org" -ForegroundColor Red
    Write-Host "After installing Python:"
    Write-Host "1. Make sure to check 'Add Python to PATH' during installation"
    Write-Host "2. Restart PowerShell"
    Write-Host "3. Run this script again"
    exit 1
}

# Verify Python version
$pythonVersion = & $pythonCmd --version 2>&1
Write-Host "Found Python: $pythonVersion"

# Project structure definition
$structure = @(
    "application/services/__init__.py",
    "application/services/generator.py",
    "application/__init__.py",
    "core/domain/__init__.py",
    "core/domain/exceptions.py",
    "core/domain/models.py",
    "core/ports/__init__.py",
    "core/examples/sql/__init__.py",
    "core/examples/sql/init_db.sql",
    "core/examples/sql/sample_data.sql",
    "core/examples/templates/dag.pyj2",
    "core/examples/templates/python-operator.j2",
    "generated_dags/__init__.py",
    "infrastructure/persistence/__init__.py",
    "infrastructure/persistence/sqlite_repository.py",
    "infrastructure/storage/__init__.py",
    "infrastructure/storage/local_storage.py",
    "infrastructure/templating/__init__.py",
    "infrastructure/templating/jinja_engine.py",
    "infrastructure/__init__.py",
    "templates/python_operator.j2",
    "test-template/bashTest.py",
    "tests/__init__.py",
    "tests/unit/__init__.py",
    "tests/integration/__init__.py"
)

try {
    # Create project directory
    Write-Step "Creating project directory structure"
    New-Item -ItemType Directory -Path $projectName -Force
    Set-Location $projectName

    # Create directories and files
    foreach ($path in $structure) {
        $fullPath = Join-Path $PWD $path
        $directory = Split-Path -Parent $fullPath

        if (-not (Test-Path $directory)) {
            New-Item -ItemType Directory -Path $directory -Force
        }
        Create-PyFile -path $fullPath
    }

    # Create setup.py
    $setupPyContent = @"
from setuptools import setup, find_packages

setup(
    name='$projectName',
    version='0.1.0',
    packages=find_packages(),
    install_requires=[
        'pytest',
        'black',
        'flake8',
        'mypy',
        'jinja2'
    ],
    python_requires='>=3.8',
)
"@
    Create-PyFile -path "setup.py" -content $setupPyContent

    # Create requirements file
    Create-PyFile -path "requirements-dev.txt" -content @"
pytest>=7.0.0
pytest-cov>=4.0.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.0.0
jinja2>=3.0.0
"@

    # Create virtual environment
    Write-Step "Creating virtual environment"
    & $pythonCmd -m venv venv

    # Activate virtual environment
    Write-Step "Activating virtual environment"
    $activateScript = ".\venv\Scripts\Activate.ps1"
    if (Test-Path $activateScript) {
        & $activateScript
    } else {
        Write-Host "Virtual environment activation script not found at: $activateScript" -ForegroundColor Red
        exit 1
    }

    # Install dependencies
    Write-Step "Installing dependencies"
    $pipCmd = ".\venv\Scripts\pip.exe"
    if (Test-Path $pipCmd) {
        & $pipCmd install --upgrade pip
        & $pipCmd install -r requirements-dev.txt
        & $pipCmd install -e .
        & $pipCmd freeze > requirements.txt
    } else {
        Write-Host "pip not found in virtual environment" -ForegroundColor Red
        exit 1
    }

    # Add example code
    $generatorPyContent = @"
from typing import Dict, Any

class DagGenerator:
    def __init__(self):
        self.template_path = None

    def set_template(self, template_path: str) -> None:
        self.template_path = template_path

    def generate_dag(self, context: Dict[str, Any]) -> str:
        # Add your DAG generation logic here
        pass
"@
    Create-PyFile -path "application/services/generator.py" -content $generatorPyContent

    Write-Step "Project setup completed successfully!"
    Write-Host @"

Your project is ready! Here's what you need to know:

1. Your virtual environment is activated
   - You'll see '(venv)' in your prompt
   - To deactivate, run: 'deactivate'
   - To reactivate later, run: '.\venv\Scripts\Activate.ps1'

2. Start developing:
   - Open the project in your IDE
   - Run '.\venv\Scripts\pytest.exe tests/' for testing

3. Common issues:
   - If Python commands aren't recognized, restart PowerShell
   - Make sure Python is added to your PATH
   - Use '.\venv\Scripts\python.exe' for Python commands
   - Use '.\venv\Scripts\pip.exe' for pip commands

The project structure is ready for development!
"@ -ForegroundColor Green

} catch {
    Write-Host "An error occurred during setup: $_" -ForegroundColor Red
    Write-Host "Tips to resolve common issues:" -ForegroundColor Yellow
    Write-Host "1. Make sure Python is installed and added to PATH"
    Write-Host "2. Run PowerShell as Administrator"
    Write-Host "3. Try running 'Set-ExecutionPolicy RemoteSigned' in PowerShell as Administrator"
    Write-Host "4. Make sure you have write permissions in the current directory"
    exit 1
}