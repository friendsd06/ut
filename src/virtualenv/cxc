# Windows Python Project Setup Script with Code Implementation
param(
    [string]$projectName = "dag_generator",
    [string]$pythonVersion = "3.9"
)

function Write-Step {
    param([string]$message)
    Write-Host "`n=== $message ===" -ForegroundColor Cyan
}

function Create-PyFile {
    param(
        [string]$path,
        [string]$content = ""
    )
    if (-not (Test-Path $path)) {
        New-Item -ItemType File -Path $path -Force
        if ($content) {
            Set-Content -Path $path -Value $content -Encoding UTF8
        }
    }
}

# Python file contents
$applicationGeneratorContent = @"
from typing import Dict, Any, Optional
from core.domain.models import DagTemplate
from infrastructure.templating.jinja_engine import JinjaTemplateEngine

class DagGenerator:
    def __init__(self):
        self.template_engine = JinjaTemplateEngine()
        self.template: Optional[DagTemplate] = None

    def set_template(self, template: DagTemplate) -> None:
        self.template = template

    def generate_dag(self, context: Dict[str, Any]) -> str:
        if not self.template:
            raise ValueError("Template not set")
        return self.template_engine.render(self.template, context)
"@

$domainModelsContent = @"
from dataclasses import dataclass
from typing import Optional, List, Dict, Any

@dataclass
class DagTemplate:
    name: str
    content: str
    parameters: Optional[List[str]] = None

    def validate(self) -> bool:
        """Validate template basic requirements"""
        return bool(self.name and self.content)

    def get_parameter_defaults(self) -> Dict[str, Any]:
        """Get default parameters if any"""
        return {param: None for param in (self.parameters or [])}
"@

$domainExceptionsContent = @"
class DagGeneratorError(Exception):
    """Base exception for DAG generator errors"""
    pass

class TemplateNotFoundError(DagGeneratorError):
    """Raised when template is not found"""
    pass

class ValidationError(DagGeneratorError):
    """Raised when validation fails"""
    pass
"@

$jinjaEngineContent = @"
from typing import Dict, Any
from jinja2 import Template
from core.domain.models import DagTemplate
from core.domain.exceptions import ValidationError

class JinjaTemplateEngine:
    def render(self, template: DagTemplate, context: Dict[str, Any]) -> str:
        if not template.validate():
            raise ValidationError("Invalid template")

        jinja_template = Template(template.content)
        return jinja_template.render(**context)
"@

$localStorageContent = @"
import os
from typing import Optional
from core.domain.models import DagTemplate
from core.domain.exceptions import TemplateNotFoundError

class LocalStorage:
    def __init__(self, base_path: str = "templates"):
        self.base_path = base_path
        os.makedirs(base_path, exist_ok=True)

    def save_template(self, template: DagTemplate) -> None:
        file_path = os.path.join(self.base_path, f"{template.name}.j2")
        with open(file_path, 'w') as f:
            f.write(template.content)

    def load_template(self, template_name: str) -> DagTemplate:
        file_path = os.path.join(self.base_path, f"{template_name}.j2")
        if not os.path.exists(file_path):
            raise TemplateNotFoundError(f"Template {template_name} not found")

        with open(file_path, 'r') as f:
            content = f.read()
        return DagTemplate(name=template_name, content=content)
"@

$testModelsContent = @"
import pytest
from core.domain.models import DagTemplate

def test_dag_template_validation():
    # Valid template
    template = DagTemplate(
        name="test_dag",
        content="some content",
        parameters=["param1"]
    )
    assert template.validate() is True

    # Invalid template
    invalid_template = DagTemplate(
        name="",
        content="",
        parameters=[]
    )
    assert invalid_template.validate() is False

def test_template_parameter_defaults():
    template = DagTemplate(
        name="test_dag",
        content="content",
        parameters=["param1", "param2"]
    )
    defaults = template.get_parameter_defaults()
    assert defaults == {"param1": None, "param2": None}
"@

$testJinjaEngineContent = @"
import pytest
from infrastructure.templating.jinja_engine import JinjaTemplateEngine
from core.domain.models import DagTemplate
from core.domain.exceptions import ValidationError

def test_jinja_template_rendering():
    engine = JinjaTemplateEngine()
    template = DagTemplate(
        name="test",
        content="Hello {{ name }}!",
        parameters=["name"]
    )

    result = engine.render(template, {"name": "World"})
    assert result == "Hello World!"

def test_invalid_template_rendering():
    engine = JinjaTemplateEngine()
    template = DagTemplate(name="", content="")

    with pytest.raises(ValidationError):
        engine.render(template, {})
"@

$testIntegrationContent = @"
import pytest
from application.services.generator import DagGenerator
from core.domain.models import DagTemplate

def test_complete_dag_generation():
    # Setup
    generator = DagGenerator()
    template = DagTemplate(
        name="test_dag",
        content='''
        from airflow import DAG
        from datetime import datetime

        dag = DAG(
            '{{ dag_id }}',
            start_date=datetime({{ year }}, {{ month }}, {{ day }})
        )
        ''',
        parameters=["dag_id", "year", "month", "day"]
    )

    # Test
    generator.set_template(template)
    context = {
        "dag_id": "test_dag_1",
        "year": 2024,
        "month": 1,
        "day": 1
    }

    result = generator.generate_dag(context)
    assert "test_dag_1" in result
    assert "datetime(2024, 1, 1)" in result
"@

$confTestContent = @"
import pytest
import os
import tempfile

@pytest.fixture
def temp_dir():
    with tempfile.TemporaryDirectory() as tmpdirname:
        old_pwd = os.getcwd()
        os.chdir(tmpdirname)
        yield tmpdirname
        os.chdir(old_pwd)
"@

# Directory structure with content mapping
$contentMapping = @{
    "application/services/generator.py" = $applicationGeneratorContent
    "application/services/__init__.py" = ""
    "application/__init__.py" = ""
    "core/domain/models.py" = $domainModelsContent
    "core/domain/exceptions.py" = $domainExceptionsContent
    "core/domain/__init__.py" = ""
    "core/ports/__init__.py" = ""
    "core/__init__.py" = ""
    "infrastructure/templating/jinja_engine.py" = $jinjaEngineContent
    "infrastructure/templating/__init__.py" = ""
    "infrastructure/storage/local_storage.py" = $localStorageContent
    "infrastructure/storage/__init__.py" = ""
    "infrastructure/__init__.py" = ""
    "tests/unit/test_models.py" = $testModelsContent
    "tests/unit/test_jinja_engine.py" = $testJinjaEngineContent
    "tests/unit/__init__.py" = ""
    "tests/integration/test_dag_generation.py" = $testIntegrationContent
    "tests/integration/__init__.py" = ""
    "tests/conftest.py" = $confTestContent
    "tests/__init__.py" = ""
}

try {
    # Create project directory
    Write-Step "Creating project directory structure"
    New-Item -ItemType Directory -Path $projectName -Force
    Set-Location $projectName

    # Create files with content
    foreach ($filePath in $contentMapping.Keys) {
        $fullPath = Join-Path $PWD $filePath
        $directory = Split-Path -Parent $fullPath

        if (-not (Test-Path $directory)) {
            New-Item -ItemType Directory -Path $directory -Force
        }
        Create-PyFile -path $fullPath -content $contentMapping[$filePath]
    }

    # Create virtual environment
    Write-Step "Creating virtual environment"
    python -m venv venv

    # Activate virtual environment
    Write-Step "Activating virtual environment"
    & .\venv\Scripts\Activate.ps1

    # Create and update requirements.txt
    $requirementsContent = @"
pytest>=7.0.0
pytest-cov>=4.0.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.0.0
jinja2>=3.0.0
"@
    Create-PyFile -path "requirements.txt" -content $requirementsContent

    # Install dependencies
    Write-Step "Installing dependencies"
    & .\venv\Scripts\pip.exe install --upgrade pip
    & .\venv\Scripts\pip.exe install -r requirements.txt

    Write-Step "Project setup completed successfully!"
    Write-Host @"

Your project is ready! Here's what you can do:

1. Run the tests:
   .\venv\Scripts\pytest.exe tests\

2. Project structure created with:
   - Application layer (DagGenerator)
   - Core domain (models and exceptions)
   - Infrastructure (templating and storage)
   - Complete test suite

3. Virtual environment is activated
   - To deactivate: deactivate
   - To reactivate later: .\venv\Scripts\Activate.ps1

4. Dependencies installed:
   - pytest for testing
   - jinja2 for templating
   - Development tools (black, flake8, mypy)

The project is ready for development!
"@ -ForegroundColor Green

} catch {
    Write-Host "An error occurred: $_" -ForegroundColor Red
    exit 1
}