{% macro create_python_operator(task) %}
"""
Streamlined Python Operator Creator
Only includes features based on provided configuration
Uses smart defaults without unnecessary code bloat
"""

{# Basic validation #}
{% if not task.task_id or not task.python_callable %}
raise ValueError("task_id and python_callable are required")
{% endif %}

{# Core wrapper function - only created if advanced features are needed #}
{% if task.pre_execute_hook or task.post_execute_hook or task.error_handler %}
def enhanced_callable(python_callable, **context):
    try:
        {# Pre-execution hook if specified #}
        {% if task.pre_execute_hook %}
        {{ task.pre_execute_hook }}(context)
        {% endif %}

        {# Main execution #}
        result = python_callable(**context)

        {# Post-execution hook if specified #}
        {% if task.post_execute_hook %}
        result = {{ task.post_execute_hook }}(result, context)
        {% endif %}

        return result

    except Exception as e:
        {% if task.error_handler %}
        {{ task.error_handler }}(e, context)
        {% endif %}
        raise
{% endif %}

{# Create operator with only specified parameters #}
{{ task.task_id }} = PythonOperator(
    task_id='{{ task.task_id }}',
    {% if task.pre_execute_hook or task.post_execute_hook or task.error_handler %}
    python_callable=enhanced_callable,
    op_kwargs={
        'python_callable': {{ task.python_callable }},
        {% if task.op_kwargs %}
        **{{ task.op_kwargs }},
        {% endif %}
    },
    {% else %}
    python_callable={{ task.python_callable }},
    {% if task.op_kwargs %}
    op_kwargs={{ task.op_kwargs }},
    {% endif %}
    {% endif %}

    {# Only add retries if specified #}
    {% if task.retries is defined %}
    retries={{ task.retries }},
    {% if task.retry_delay %}
    retry_delay=timedelta(seconds={{ task.retry_delay }}),
    {% endif %}
    {% endif %}

    {# Only add pool if specified #}
    {% if task.pool %}
    pool='{{ task.pool }}',
    {% endif %}

    {# Only add priority if specified #}
    {% if task.priority_weight %}
    priority_weight={{ task.priority_weight }},
    {% endif %}

    {# Only add execution timeout if specified #}
    {% if task.execution_timeout %}
    execution_timeout=timedelta(seconds={{ task.execution_timeout }}),
    {% endif %}

    {# Only add trigger rule if it's not the default #}
    {% if task.trigger_rule and task.trigger_rule != 'all_success' %}
    trigger_rule='{{ task.trigger_rule }}',
    {% endif %}

    {# Only add email settings if specified #}
    {% if task.email_on_failure is defined %}
    email_on_failure={{ task.email_on_failure }},
    {% endif %}
    {% if task.email_on_retry is defined %}
    email_on_retry={{ task.email_on_retry }},
    {% endif %}

    {# Only add doc_md if description is provided #}
    {% if task.description %}
    doc_md="""{{ task.description }}""",
    {% endif %}
)
{% endmacro %}