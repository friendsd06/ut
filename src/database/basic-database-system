This implementation provides a simple file-based database with the following features:

Read: Retrieve a record by key.
Write: Add a new record.
Update: Modify an existing record.
Delete: Remove a record.
Indexing: Maintains an index for faster access.
The data is stored in a text file (database.txt),
and a separate index file (index.txt) keeps track of the position of each key for quick access.
 Let me know if you need more advanced features or want to extend this basic implementation!




 import java.io.*;
 import java.util.*;

 public class FileDatabase {
     private static final String DB_FILE = "database.txt";
     private static final String INDEX_FILE = "index.txt";
     private final Map<String, Long> indexMap = new HashMap<>();

     public FileDatabase() {
         loadIndex();
     }

     // Load the index from the file for quick access to records
     private void loadIndex() {
         try (BufferedReader reader = new BufferedReader(new FileReader(INDEX_FILE))) {
             String line;
             while ((line = reader.readLine()) != null) {
                 String[] parts = line.split(",");
                 indexMap.put(parts[0], Long.parseLong(parts[1]));
             }
         } catch (IOException e) {
             System.out.println("Index file not found, starting fresh.");
         }
     }

     // Save the index to a file
     private void saveIndex() {
         try (BufferedWriter writer = new BufferedWriter(new FileWriter(INDEX_FILE))) {
             for (Map.Entry<String, Long> entry : indexMap.entrySet()) {
                 writer.write(entry.getKey() + "," + entry.getValue());
                 writer.newLine();
             }
         } catch (IOException e) {
             e.printStackTrace();
         }
     }

     // Write a new record to the database
     public void write(String key, String value) {
         try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "rw")) {
             long filePointer = dbFile.length();
             dbFile.seek(filePointer);
             dbFile.writeBytes(key + "=" + value + "\n");
             indexMap.put(key, filePointer);
             saveIndex();
         } catch (IOException e) {
             e.printStackTrace();
         }
     }

     // Read a record by key
     public String read(String key) {
         Long filePointer = indexMap.get(key);
         if (filePointer == null) {
             return null;
         }
         try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r")) {
             dbFile.seek(filePointer);
             String line = dbFile.readLine();
             if (line != null && line.startsWith(key + "=")) {
                 return line.split("=", 2)[1];
             }
         } catch (IOException e) {
             e.printStackTrace();
         }
         return null;
     }

     // Update a record by key
     public void update(String key, String newValue) {
         if (indexMap.containsKey(key)) {
             write(key, newValue);
         } else {
             System.out.println("Key not found: " + key);
         }
     }

     // Delete a record by key
     public void delete(String key) {
         if (indexMap.containsKey(key)) {
             indexMap.remove(key);
             saveIndex();
             rewriteDatabase();
         } else {
             System.out.println("Key not found: " + key);
         }
     }

     // Rewrite the database file without deleted records
     private void rewriteDatabase() {
         try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r");
              BufferedWriter tempWriter = new BufferedWriter(new FileWriter("temp.txt"))) {
             String line;
             while ((line = dbFile.readLine()) != null) {
                 String key = line.split("=")[0];
                 if (indexMap.containsKey(key)) {
                     tempWriter.write(line);
                     tempWriter.newLine();
                 }
             }
         } catch (IOException e) {
             e.printStackTrace();
         }
         // Replace old database with the new one
         new File(DB_FILE).delete();
         new File("temp.txt").renameTo(new File(DB_FILE));
     }

     public static void main(String[] args) {
         FileDatabase db = new FileDatabase();

         // Write records
         db.write("1", "John Doe");
         db.write("2", "Jane Smith");

         // Read records
         System.out.println("Read key 1: " + db.read("1"));

         // Update record
         db.update("1", "Johnathan Doe");
         System.out.println("Updated key 1: " + db.read("1"));

         // Delete record
         db.delete("2");
         System.out.println("Read key 2 after deletion: " + db.read("2"));
     }
 }