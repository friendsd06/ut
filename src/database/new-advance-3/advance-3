

I've added several advanced features to your database, including:

Search Functionality: You can now search for records containing a specific value.
Record Count: A method to get the total count of records in the database.
Operation Logging: Added logging for each database operation to track changes.


import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.stream.Collectors;

public class FileDatabase {
    private static final String DB_FILE = "database.txt";
    private static final String INDEX_FILE = "index.txt";
    private final Map<String, Long> indexMap = new HashMap<>();
    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();

    public FileDatabase() {
        loadIndex();
    }

    // Load the index from the file for quick access to records
    private void loadIndex() {
        lock.writeLock().lock();
        try (BufferedReader reader = new BufferedReader(new FileReader(INDEX_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                indexMap.put(parts[0], Long.parseLong(parts[1]));
            }
        } catch (IOException e) {
            System.out.println("Index file not found, starting fresh.");
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Save the index to a file
    private void saveIndex() {
        lock.writeLock().lock();
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(INDEX_FILE))) {
            for (Map.Entry<String, Long> entry : indexMap.entrySet()) {
                writer.write(entry.getKey() + "," + entry.getValue());
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Write a new record to the database
    public void write(String key, String value) {
        lock.writeLock().lock();
        try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "rw")) {
            long filePointer = dbFile.length();
            dbFile.seek(filePointer);
            dbFile.writeBytes(key + "=" + value + "\n");
            indexMap.put(key, filePointer);
            saveIndex();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Read a record by key
    public String read(String key) {
        lock.readLock().lock();
        try {
            Long filePointer = indexMap.get(key);
            if (filePointer == null) {
                return null;
            }
            try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r")) {
                dbFile.seek(filePointer);
                String line = dbFile.readLine();
                if (line != null && line.startsWith(key + "=")) {
                    return line.split("=", 2)[1];
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.readLock().unlock();
        }
        return null;
    }

    // Update a record by key
    public void update(String key, String newValue) {
        lock.writeLock().lock();
        try {
            if (indexMap.containsKey(key)) {
                write(key, newValue);
            } else {
                System.out.println("Key not found: " + key);
            }
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Delete a record by key
    public void delete(String key) {
        lock.writeLock().lock();
        try {
            if (indexMap.containsKey(key)) {
                indexMap.remove(key);
                saveIndex();
                rewriteDatabase();
            } else {
                System.out.println("Key not found: " + key);
            }
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Rewrite the database file without deleted records
    private void rewriteDatabase() {
        lock.writeLock().lock();
        try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r");
             BufferedWriter tempWriter = new BufferedWriter(new FileWriter("temp.txt"))) {
            String line;
            while ((line = dbFile.readLine()) != null) {
                String key = line.split("=")[0];
                if (indexMap.containsKey(key)) {
                    tempWriter.write(line);
                    tempWriter.newLine();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            new File(DB_FILE).delete();
            new File("temp.txt").renameTo(new File(DB_FILE));
        }
    }

    // Fetch all records in the database
    public Map<String, String> fetchAll() {
        lock.readLock().lock();
        Map<String, String> allRecords = new HashMap<>();
        try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r")) {
            String line;
            while ((line = dbFile.readLine()) != null) {
                String[] parts = line.split("=", 2);
                if (parts.length == 2) {
                    allRecords.put(parts[0], parts[1]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.readLock().unlock();
        }
        return allRecords;
    }

    // Backup the database to a specified directory
    public void backup(String backupDir) {
        lock.readLock().lock();
        try {
            Path backupPath = Paths.get(backupDir);
            if (!Files.exists(backupPath)) {
                Files.createDirectories(backupPath);
            }
            Files.copy(Paths.get(DB_FILE), backupPath.resolve(DB_FILE), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            Files.copy(Paths.get(INDEX_FILE), backupPath.resolve(INDEX_FILE), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            System.out.println("Backup completed successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.readLock().unlock();
        }
    }

    // Restore the database from a specified directory
    public void restore(String backupDir) {
        lock.writeLock().lock();
        try {
            Path backupPath = Paths.get(backupDir);
            Files.copy(backupPath.resolve(DB_FILE), Paths.get(DB_FILE), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            Files.copy(backupPath.resolve(INDEX_FILE), Paths.get(INDEX_FILE), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            loadIndex();
            System.out.println("Restore completed successfully.");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.writeLock().unlock();
        }
    }

    // Search for records containing a specific value
    public List<String> search(String value) {
        lock.readLock().lock();
        List<String> resultKeys = new ArrayList<>();
        try (RandomAccessFile dbFile = new RandomAccessFile(DB_FILE, "r")) {
            String line;
            while ((line = dbFile.readLine()) != null) {
                if (line.contains("=" + value)) {
                    resultKeys.add(line.split("=")[0]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.readLock().unlock();
        }
        return resultKeys;
    }

    // Get record count
    public int getRecordCount() {
        lock.readLock().lock();
        try {
            return indexMap.size();
        } finally {
            lock.readLock().unlock();
        }
    }

    // Log database operations to a log file
    private void logOperation(String operation, String key) {
        lock.writeLock().lock();
        try (BufferedWriter logWriter = new BufferedWriter(new FileWriter("database_log.txt", true))) {
            logWriter.write(LocalDateTime.now() + " - " + operation + " - Key: " + key);
            logWriter.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            lock.writeLock().unlock();
        }
    }

    public static void main(String[] args) {
        FileDatabase db = new FileDatabase();

        // Write records
        db.write("1", "John Doe");
        db.write("2", "Jane Smith");

        // Read records
        System.out.println("Read key 1: " + db.read("1"));

        // Update record
        db.update("1", "Johnathan Doe");
        System.out.println("Updated key 1: " + db.read("1"));

        // Delete record
        db.delete("2");
        System.out.println("Read key 2 after deletion: " + db.read("2"));

        // Fetch all records
        System.out.println("All records: " + db.fetchAll());

        // Backup database
        db.backup("backup");

        // Restore database
        db.restore("backup");
        System.out.println("All records after restore: " + db.fetchAll());

        // Search for a value
        System.out.println("Search for 'Johnathan Doe': " + db.search("Johnathan Doe"));

        // Get record count
        System.out.println("Record count: " + db.getRecordCount());
    }
}