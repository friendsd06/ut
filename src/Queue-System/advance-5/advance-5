

Edited
I've enhanced the queuing system to provide production-level features:

Persistence: The queue's state is persisted to a file (message_queue_backup.dat) for durability.
Backup and Restore: Messages are saved to a backup file and restored on startup to ensure safety and data recovery.
Improved Logging: Added detailed logging for better traceability and monitoring.
These changes imp

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.nio.file.*;

class Message implements Serializable {
    private static final long serialVersionUID = 1L;
    private final String id;
    private final String body;
    private long visibilityTimeout;
    private int retryCount;
    private final long timestamp;

    public Message(String body, long visibilityTimeout) {
        this.id = UUID.randomUUID().toString();
        this.body = body;
        this.visibilityTimeout = visibilityTimeout;
        this.retryCount = 0;
        this.timestamp = System.currentTimeMillis();
    }

    public String getId() {
        return id;
    }

    public String getBody() {
        return body;
    }

    public long getVisibilityTimeout() {
        return visibilityTimeout;
    }

    public void setVisibilityTimeout(long visibilityTimeout) {
        this.visibilityTimeout = visibilityTimeout;
    }

    public int getRetryCount() {
        return retryCount;
    }

    public void incrementRetryCount() {
        this.retryCount++;
    }

    public long getTimestamp() {
        return timestamp;
    }
}

class AdvancedMessageQueue {
    private final Queue<Message> queue = new LinkedList<>();
    private final List<Message> inFlightMessages = new ArrayList<>();
    private final int capacity;
    private final Lock lock = new ReentrantLock();
    private final Condition notFull = lock.newCondition();
    private final Condition notEmpty = lock.newCondition();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(4);
    private final int maxRetryCount;
    private static final Logger logger = Logger.getLogger(AdvancedMessageQueue.class.getName());
    private static final String BACKUP_FILE = "message_queue_backup.dat";

    public AdvancedMessageQueue(int capacity, int maxRetryCount) {
        this.capacity = capacity;
        this.maxRetryCount = maxRetryCount;
        loadQueueFromBackup();
    }

    public void sendMessage(String message, long visibilityTimeout) throws InterruptedException {
        lock.lock();
        try {
            while (queue.size() == capacity) {
                notFull.await();
            }
            Message msg = new Message(message, visibilityTimeout);
            queue.add(msg);
            logger.log(Level.INFO, "Message sent: {0} (ID: {1})", new Object[]{msg.getBody(), msg.getId()});
            saveQueueToBackup();
            notEmpty.signalAll();
        } finally {
            lock.unlock();
        }
    }

    public Message receiveMessage() throws InterruptedException {
        lock.lock();
        try {
            while (queue.isEmpty()) {
                notEmpty.await();
            }
            Message message = queue.poll();
            inFlightMessages.add(message);
            logger.log(Level.INFO, "Message received: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
            saveQueueToBackup();
            scheduleMessageVisibilityTimeout(message);
            return message;
        } finally {
            lock.unlock();
        }
    }

    private void scheduleMessageVisibilityTimeout(Message message) {
        scheduler.schedule(() -> {
            lock.lock();
            try {
                if (message.getVisibilityTimeout() > 0 && inFlightMessages.contains(message)) {
                    if (message.getRetryCount() < maxRetryCount) {
                        logger.log(Level.WARNING, "Message visibility timeout expired, retrying: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
                        message.incrementRetryCount();
                        queue.add(message);
                        inFlightMessages.remove(message);
                        saveQueueToBackup();
                        notEmpty.signalAll();
                    } else {
                        logger.log(Level.SEVERE, "Message discarded after max retries: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
                        inFlightMessages.remove(message);
                        saveQueueToBackup();
                    }
                }
            } finally {
                lock.unlock();
            }
        }, message.getVisibilityTimeout(), TimeUnit.MILLISECONDS);
    }

    public void deleteMessage(Message message) {
        lock.lock();
        try {
            if (inFlightMessages.contains(message)) {
                logger.log(Level.INFO, "Message deleted: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
                inFlightMessages.remove(message);
                message.setVisibilityTimeout(0); // Mark message as processed
                saveQueueToBackup();
            } else {
                logger.log(Level.WARNING, "Message not found or already processed: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
            }
        } finally {
            lock.unlock();
        }
    }

    public void changeMessageVisibility(Message message, long newVisibilityTimeout) {
        lock.lock();
        try {
            if (inFlightMessages.contains(message)) {
                message.setVisibilityTimeout(newVisibilityTimeout);
                logger.log(Level.INFO, "Message visibility timeout updated: {0} (ID: {1}) to {2}ms", new Object[]{message.getBody(), message.getId(), newVisibilityTimeout});
                saveQueueToBackup();
            } else {
                logger.log(Level.WARNING, "Message not found or already processed: {0} (ID: {1})", new Object[]{message.getBody(), message.getId()});
            }
        } finally {
            lock.unlock();
        }
    }

    public void purgeQueue() {
        lock.lock();
        try {
            queue.clear();
            inFlightMessages.clear();
            logger.log(Level.INFO, "Queue purged, all messages removed.");
            saveQueueToBackup();
        } finally {
            lock.unlock();
        }
    }

    private void saveQueueToBackup() {
        lock.lock();
        try (ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(BACKUP_FILE)))) {
            oos.writeObject(queue);
            oos.writeObject(inFlightMessages);
        } catch (IOException e) {
            logger.log(Level.SEVERE, "Failed to save queue to backup: {0}", e.getMessage());
        } finally {
            lock.unlock();
        }
    }

    @SuppressWarnings("unchecked")
    private void loadQueueFromBackup() {
        lock.lock();
        try (ObjectInputStream ois = new ObjectInputStream(Files.newInputStream(Paths.get(BACKUP_FILE)))) {
            queue.addAll((Queue<Message>) ois.readObject());
            inFlightMessages.addAll((List<Message>) ois.readObject());
            logger.log(Level.INFO, "Queue loaded from backup. {0} messages in queue, {1} in flight.", new Object[]{queue.size(), inFlightMessages.size()});
        } catch (IOException | ClassNotFoundException e) {
            logger.log(Level.WARNING, "No backup file found or failed to load: {0}", e.getMessage());
        } finally {
            lock.unlock();
        }
    }
}

public class AdvancedQueueSystem {
    public static void main(String[] args) {
        AdvancedMessageQueue messageQueue = new AdvancedMessageQueue(10, 3);
        ExecutorService executorService = Executors.newFixedThreadPool(6);

        // Producers
        Runnable producer = () -> {
            for (int i = 0; i < 20; i++) {
                try {
                    messageQueue.sendMessage("Message " + i, 5000); // 5-second visibility timeout
                    Thread.sleep(100); // Simulate delay
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        // Consumers
        Runnable consumer = () -> {
            for (int i = 0; i < 10; i++) {
                try {
                    Message message = messageQueue.receiveMessage();
                    Thread.sleep(150); // Simulate processing time
                    messageQueue.deleteMessage(message);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        // Execute producers and consumers
        executorService.execute(producer);
        executorService.execute(producer);
        executorService.execute(consumer);
        executorService.execute(consumer);

        // Gracefully shutdown executor service
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }
    }
}