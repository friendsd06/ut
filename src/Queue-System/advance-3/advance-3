
Edited
I've added several advanced features to your queuing system:

Retry Mechanism: Messages have a retry count, and they will be retried a limited number of times (configurable) if not processed.
Visibility Timeout Update: Added the ability to change the visibility timeout of a message.
In-Flight Message Management: Improved management of messages being processed (in-flight messages).
Message Discarding: Messages are discarded after exceeding the maximum retry count.

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.UUID;

class Message {
    private final String id;
    private final String body;
    private long visibilityTimeout;
    private int retryCount;

    public Message(String body, long visibilityTimeout) {
        this.id = UUID.randomUUID().toString();
        this.body = body;
        this.visibilityTimeout = visibilityTimeout;
        this.retryCount = 0;
    }

    public String getId() {
        return id;
    }

    public String getBody() {
        return body;
    }

    public long getVisibilityTimeout() {
        return visibilityTimeout;
    }

    public void setVisibilityTimeout(long visibilityTimeout) {
        this.visibilityTimeout = visibilityTimeout;
    }

    public int getRetryCount() {
        return retryCount;
    }

    public void incrementRetryCount() {
        this.retryCount++;
    }
}

class AdvancedMessageQueue {
    private final Queue<Message> queue = new LinkedList<>();
    private final List<Message> inFlightMessages = new ArrayList<>();
    private final int capacity;
    private final Lock lock = new ReentrantLock();
    private final Condition notFull = lock.newCondition();
    private final Condition notEmpty = lock.newCondition();
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final int maxRetryCount;

    public AdvancedMessageQueue(int capacity, int maxRetryCount) {
        this.capacity = capacity;
        this.maxRetryCount = maxRetryCount;
    }

    public void sendMessage(String message, long visibilityTimeout) throws InterruptedException {
        lock.lock();
        try {
            while (queue.size() == capacity) {
                notFull.await();
            }
            Message msg = new Message(message, visibilityTimeout);
            queue.add(msg);
            System.out.println("Message sent: " + msg.getBody() + " (ID: " + msg.getId() + ")");
            notEmpty.signalAll();
        } finally {
            lock.unlock();
        }
    }

    public Message receiveMessage() throws InterruptedException {
        lock.lock();
        try {
            while (queue.isEmpty()) {
                notEmpty.await();
            }
            Message message = queue.poll();
            inFlightMessages.add(message);
            System.out.println("Message received: " + message.getBody() + " (ID: " + message.getId() + ")");
            scheduleMessageVisibilityTimeout(message);
            return message;
        } finally {
            lock.unlock();
        }
    }

    private void scheduleMessageVisibilityTimeout(Message message) {
        scheduler.schedule(() -> {
            lock.lock();
            try {
                if (message.getVisibilityTimeout() > 0 && inFlightMessages.contains(message)) {
                    if (message.getRetryCount() < maxRetryCount) {
                        System.out.println("Message visibility timeout expired, retrying: " + message.getBody() + " (ID: " + message.getId() + ")");
                        message.incrementRetryCount();
                        queue.add(message);
                        inFlightMessages.remove(message);
                        notEmpty.signalAll();
                    } else {
                        System.out.println("Message discarded after max retries: " + message.getBody() + " (ID: " + message.getId() + ")");
                        inFlightMessages.remove(message);
                    }
                }
            } finally {
                lock.unlock();
            }
        }, message.getVisibilityTimeout(), TimeUnit.MILLISECONDS);
    }

    public void deleteMessage(Message message) {
        lock.lock();
        try {
            if (inFlightMessages.contains(message)) {
                System.out.println("Message deleted: " + message.getBody() + " (ID: " + message.getId() + ")");
                inFlightMessages.remove(message);
                message.setVisibilityTimeout(0); // Mark message as processed
            } else {
                System.out.println("Message not found or already processed: " + message.getBody() + " (ID: " + message.getId() + ")");
            }
        } finally {
            lock.unlock();
        }
    }

    public void changeMessageVisibility(Message message, long newVisibilityTimeout) {
        lock.lock();
        try {
            if (inFlightMessages.contains(message)) {
                message.setVisibilityTimeout(newVisibilityTimeout);
                System.out.println("Message visibility timeout updated: " + message.getBody() + " (ID: " + message.getId() + ") to " + newVisibilityTimeout + "ms");
            } else {
                System.out.println("Message not found or already processed: " + message.getBody() + " (ID: " + message.getId() + ")");
            }
        } finally {
            lock.unlock();
        }
    }
}

public class AdvancedQueueSystem {
    public static void main(String[] args) {
        AdvancedMessageQueue messageQueue = new AdvancedMessageQueue(10, 3);
        ExecutorService executorService = Executors.newFixedThreadPool(4);

        // Producers
        Runnable producer = () -> {
            for (int i = 0; i < 20; i++) {
                try {
                    messageQueue.sendMessage("Message " + i, 5000); // 5-second visibility timeout
                    Thread.sleep(100); // Simulate delay
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        // Consumers
        Runnable consumer = () -> {
            for (int i = 0; i < 10; i++) {
                try {
                    Message message = messageQueue.receiveMessage();
                    Thread.sleep(150); // Simulate processing time
                    messageQueue.deleteMessage(message);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        // Execute producers and consumers
        executorService.execute(producer);
        executorService.execute(producer);
        executorService.execute(consumer);
        executorService.execute(consumer);

        executorService.shutdown();
    }
}