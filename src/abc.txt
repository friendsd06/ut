AspectSkew ScenarioResolution through SaltingScenario Not Solved by AQEData Distribution90% of loans belong to 1% of customersEvenly distribute skewed customer's data across multiple keysMultiple large-large joins with compound skewProblemOne partition processes majority of data, causing slowdown-Complex query with multiple stages of data expansion and aggregationData Size50 million loans, 1 million customersSame as skew scenario100 million orders, 10 million customers, 1 million productsJoin Conditioncustomer_idsalted_customer_idMultiple joins on customer_id, order_id, and product_idQuery OperationJoin and aggregation on customer loansJoin and aggregation on salted customer loansMulti-stage join, explode, and window functionsSkew CauseSingle customer with majority of loansResolved - data distributed across saltsCompounded skew from multiple large datasetsPerformance ImpactOne task runs significantly longer than othersTasks run with more even distributionMultiple stages with unpredictable data sizesAQE EffectivenessLimited - can't fully mitigate extreme skewImproved - AQE can better optimize with salted dataIneffective - too complex for runtime optimizationResolution ApproachApply salting techniqueAdd salt to skewed keys before joinRequires manual query rewrite and optimizationImplementation```scaladf.withColumn("skewed_key",when(col("customer_id") === lit(skewedId),