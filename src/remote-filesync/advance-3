I've made the following advanced improvements:

Increased Thread Pool Size: Enhanced the server's concurrency by increasing the thread pool to 300 threads.
Client Limitation with Semaphore: Introduced a semaphore to limit the number of clients to a maximum of 1000 concurrent connections.
Retry Mechanism Enhanced: Increased the retry attempts for the client to 5 for better reliability.
These changes should improve scalability and reliability for handling many concurrent file syncs. Let me know if you need further enhancements.


import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;
import java.util.concurrent.*;
import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class RemoteFileSync {

    // Server to handle incoming file sync requests with multi-threading and improved error handling
    static class FileSyncServer {
        private static final int PORT = 8080;
        private static final String SYNC_DIR = "server_sync_dir";
        private static final ExecutorService threadPool = Executors.newFixedThreadPool(300);
        private static final SecretKey secretKey = generateSecretKey();
        private static final ConcurrentHashMap<String, ReentrantLock> fileLocks = new ConcurrentHashMap<>();
        private static final long CHUNK_SIZE = 8192; // Support chunked transfer for large files
        private static final int MAX_CLIENTS = 1000;
        private static final Semaphore clientLimit = new Semaphore(MAX_CLIENTS, true);

        public static void main(String[] args) throws IOException, NoSuchAlgorithmException {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started. Waiting for connections...");
            Files.createDirectories(Paths.get(SYNC_DIR));

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected.");
                threadPool.execute(() -> {
                    try {
                        clientLimit.acquire();
                        handleClient(clientSocket);
                    } catch (IOException | NoSuchAlgorithmException | InterruptedException e) {
                        System.err.println("Error handling client: " + e.getMessage());
                    } finally {
                        clientLimit.release();
                    }
                });
            }
        }

        private static void handleClient(Socket clientSocket) throws IOException, NoSuchAlgorithmException {
            DataInputStream in = new DataInputStream(clientSocket.getInputStream());
            DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());

            try {
                String fileName = in.readUTF();
                long fileLength = in.readLong();
                String clientChecksum = in.readUTF();

                File file = new File(SYNC_DIR, fileName);
                fileLocks.putIfAbsent(fileName, new ReentrantLock());
                ReentrantLock fileLock = fileLocks.get(fileName);
                fileLock.lock();
                try {
                    if (file.exists()) {
                        String serverChecksum = calculateChecksum(file);
                        if (serverChecksum.equals(clientChecksum)) {
                            System.out.println("File already up to date: " + fileName);
                            out.writeUTF("UP_TO_DATE");
                            return;
                        }
                    }

                    out.writeUTF("SEND_FILE");
                    FileOutputStream fileOut = new FileOutputStream(file);
                    Cipher cipher = Cipher.getInstance("AES");
                    cipher.init(Cipher.DECRYPT_MODE, secretKey);
                    CipherOutputStream cipherOut = new CipherOutputStream(fileOut, cipher);

                    byte[] buffer = new byte[(int) CHUNK_SIZE];
                    long totalBytesRead = 0;
                    int bytesRead;
                    while (fileLength > 0 && (bytesRead = in.read(buffer, 0, (int) Math.min(buffer.length, fileLength))) != -1) {
                        cipherOut.write(buffer, 0, bytesRead);
                        fileLength -= bytesRead;
                        totalBytesRead += bytesRead;
                        showProgress(totalBytesRead, fileLength + totalBytesRead);
                    }
                    cipherOut.close();
                    System.out.println("File synchronized: " + fileName);
                } finally {
                    fileLock.unlock();
                }
            } finally {
                clientSocket.close();
            }
        }
    }

    // Client to sync files to the remote server with retry mechanism and improved error handling
    static class FileSyncClient {
        private static final String SERVER_ADDRESS = "localhost";
        private static final int PORT = 8080;
        private static final int MAX_RETRIES = 5;
        private static final SecretKey secretKey = generateSecretKey();
        private static final long CHUNK_SIZE = 8192; // Support chunked transfer for large files

        public static void main(String[] args) throws IOException, NoSuchAlgorithmException {
            if (args.length < 1) {
                System.out.println("Usage: java FileSyncClient <file-to-sync>");
                return;
            }

            File file = new File(args[0]);
            if (!file.exists()) {
                System.out.println("File does not exist: " + file.getAbsolutePath());
                return;
            }

            int attempts = 0;
            boolean success = false;
            while (attempts < MAX_RETRIES && !success) {
                try (Socket socket = new Socket(SERVER_ADDRESS, PORT);
                     DataOutputStream out = new DataOutputStream(socket.getOutputStream());
                     DataInputStream in = new DataInputStream(socket.getInputStream())) {

                    String checksum = calculateChecksum(file);

                    out.writeUTF(file.getName());
                    out.writeLong(file.length());
                    out.writeUTF(checksum);

                    String serverResponse = in.readUTF();
                    if ("UP_TO_DATE".equals(serverResponse)) {
                        System.out.println("File is already up to date on the server.");
                        success = true;
                        break;
                    }

                    FileInputStream fileIn = new FileInputStream(file);
                    Cipher cipher = Cipher.getInstance("AES");
                    cipher.init(Cipher.ENCRYPT_MODE, secretKey);
                    CipherInputStream cipherIn = new CipherInputStream(fileIn, cipher);

                    byte[] buffer = new byte[(int) CHUNK_SIZE];
                    long totalBytesRead = 0;
                    long fileLength = file.length();
                    int bytesRead;
                    while ((bytesRead = cipherIn.read(buffer)) != -1) {
                        out.write(buffer, 0, bytesRead);
                        totalBytesRead += bytesRead;
                        showProgress(totalBytesRead, fileLength);
                    }
                    cipherIn.close();
                    System.out.println("File synchronized successfully: " + file.getName());
                    success = true;
                } catch (IOException e) {
                    attempts++;
                    System.err.println("Error during synchronization attempt " + attempts + ": " + e.getMessage());
                    if (attempts >= MAX_RETRIES) {
                        System.err.println("Max retries reached. Failed to synchronize file: " + file.getName());
                    }
                }
            }
        }
    }

    // Utility function to calculate the checksum of a file
    private static String calculateChecksum(File file) throws IOException, NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        try (FileInputStream fis = new FileInputStream(file)) {
            byte[] byteArray = new byte[4096];
            int bytesRead;

            while ((bytesRead = fis.read(byteArray)) != -1) {
                digest.update(byteArray, 0, bytesRead);
            }
        }

        byte[] bytes = digest.digest();
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    // Utility function to generate a secret key for encryption
    private static SecretKey generateSecretKey() {
        try {
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(128);
            return keyGen.generateKey();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Error generating secret key: " + e.getMessage());
        }
    }

    // Utility function to show progress of file synchronization
    private static void showProgress(long bytesTransferred, long totalBytes) {
        int progress = (int) ((bytesTransferred * 100) / totalBytes);
        System.out.print("\rProgress: " + progress + "%");
        if (progress == 100) {
            System.out.println();
        }
    }

    // Logging utility to log sync events
    private static void logEvent(String message) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        System.out.println("[" + timestamp + "] " + message);
    }
}