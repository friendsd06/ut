I've improved the implementation by adding asynchronous saving to disk, enhancing client socket handling with proper closure, increasing the thread pool size for better concurrency,
 and adding shutdown save hooks to ensure data persistence. Let me know if you need further improvements or more features!


 import java.io.*;
 import java.net.*;
 import java.util.concurrent.*;
 import java.util.*;

 public class DistributedKVStore {

     private static ConcurrentHashMap<String, String> kvStore = new ConcurrentHashMap<>();
     private static List<String> nodes = new ArrayList<>();
     private static int port;
     private static final Object lock = new Object();
     private static final int REPLICATION_RETRIES = 3;
     private static final long TIMEOUT_MS = 5000;
     private static ScheduledExecutorService ttlScheduler = Executors.newScheduledThreadPool(1);
     private static ConcurrentHashMap<String, Long> keyExpiryMap = new ConcurrentHashMap<>();
     private static final String BACKUP_FILE = "kvstore_backup.dat";

     public static void main(String[] args) throws IOException {
         if (args.length < 1) {
             System.out.println("Usage: java DistributedKVStore <port>");
             return;
         }

         port = Integer.parseInt(args[0]);
         loadFromDisk();
         ServerSocket serverSocket = new ServerSocket(port);
         System.out.println("KV Store running on port: " + port);

         ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(20);

         // Initialize nodes list for a distributed environment
         nodes.add("localhost:5000");
         nodes.add("localhost:5001");
         nodes.add("localhost:5002");

         ttlScheduler.scheduleAtFixedRate(DistributedKVStore::removeExpiredKeys, 1, 1, TimeUnit.SECONDS);
         Runtime.getRuntime().addShutdownHook(new Thread(DistributedKVStore::saveOnShutdown));

         while (true) {
             Socket clientSocket = serverSocket.accept();
             executor.execute(new ClientHandler(clientSocket));
         }
     }

     static class ClientHandler implements Runnable {
         private Socket clientSocket;

         public ClientHandler(Socket socket) {
             this.clientSocket = socket;
         }

         @Override
         public void run() {
             try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                  PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true)) {

                 String inputLine;
                 while ((inputLine = in.readLine()) != null) {
                     String[] command = inputLine.split(" ", 5);
                     String action = command[0].toUpperCase();

                     switch (action) {
                         case "PUT":
                             handlePut(command, out);
                             break;
                         case "GET":
                             handleGet(command, out);
                             break;
                         case "DELETE":
                             handleDelete(command, out);
                             break;
                         case "KEYS":
                             handleKeys(out);
                             break;
                         case "SIZE":
                             handleSize(out);
                             break;
                         case "CLEAR":
                             handleClear(out);
                             break;
                         case "BACKUP":
                             handleBackup(out);
                             break;
                         case "LOAD":
                             handleLoad(out);
                             break;
                         case "EXISTS":
                             handleExists(command, out);
                             break;
                         case "EXPIRE":
                             handleExpire(command, out);
                             break;
                         case "TTL":
                             handleTTL(command, out);
                             break;
                         case "PING":
                             out.println("PONG");
                             break;
                         default:
                             out.println("ERROR: Unknown command");
                     }
                 }
             } catch (IOException e) {
                 System.err.println("Client communication error: " + e.getMessage());
             } finally {
                 try {
                     clientSocket.close();
                 } catch (IOException e) {
                     System.err.println("Error closing client socket: " + e.getMessage());
                 }
             }
         }

         private void handlePut(String[] command, PrintWriter out) {
             if (command.length < 3) {
                 out.println("ERROR: PUT command requires key and value");
                 return;
             }
             String key = command[1];
             String value = command[2];
             kvStore.put(key, value);
             keyExpiryMap.remove(key); // Remove any previous expiry
             replicateToNodes("PUT", key, value);
             saveToDiskAsync();
             out.println("OK");
         }

         private void handleGet(String[] command, PrintWriter out) {
             if (command.length < 2) {
                 out.println("ERROR: GET command requires key");
                 return;
             }
             String key = command[1];
             if (isKeyExpired(key)) {
                 kvStore.remove(key);
                 keyExpiryMap.remove(key);
                 saveToDiskAsync();
                 out.println("NOT_FOUND");
                 return;
             }
             String value = kvStore.get(key);
             out.println(value != null ? value : "NOT_FOUND");
         }

         private void handleDelete(String[] command, PrintWriter out) {
             if (command.length < 2) {
                 out.println("ERROR: DELETE command requires key");
                 return;
             }
             String key = command[1];
             kvStore.remove(key);
             keyExpiryMap.remove(key);
             replicateToNodes("DELETE", key, "");
             saveToDiskAsync();
             out.println("OK");
         }

         private void handleKeys(PrintWriter out) {
             out.println(String.join(",", kvStore.keySet()));
         }

         private void handleSize(PrintWriter out) {
             out.println(kvStore.size());
         }

         private void handleClear(PrintWriter out) {
             kvStore.clear();
             keyExpiryMap.clear();
             replicateToNodes("CLEAR", "", "");
             saveToDiskAsync();
             out.println("OK");
         }

         private void handleBackup(PrintWriter out) {
             synchronized (lock) {
                 try {
                     saveToDisk();
                     out.println("BACKUP_OK");
                 } catch (IOException e) {
                     out.println("ERROR: Backup failed - " + e.getMessage());
                 }
             }
         }

         private void handleLoad(PrintWriter out) {
             synchronized (lock) {
                 try {
                     loadFromDisk();
                     out.println("LOAD_OK");
                 } catch (IOException | ClassNotFoundException e) {
                     out.println("ERROR: Load failed - " + e.getMessage());
                 }
             }
         }

         private void handleExists(String[] command, PrintWriter out) {
             if (command.length < 2) {
                 out.println("ERROR: EXISTS command requires key");
                 return;
             }
             String key = command[1];
             out.println(kvStore.containsKey(key) ? "TRUE" : "FALSE");
         }

         private void handleExpire(String[] command, PrintWriter out) {
             if (command.length < 3) {
                 out.println("ERROR: EXPIRE command requires key and TTL");
                 return;
             }
             String key = command[1];
             long ttl;
             try {
                 ttl = Long.parseLong(command[2]);
             } catch (NumberFormatException e) {
                 out.println("ERROR: TTL must be a valid number");
                 return;
             }
             if (kvStore.containsKey(key)) {
                 keyExpiryMap.put(key, System.currentTimeMillis() + ttl * 1000);
                 saveToDiskAsync();
                 out.println("OK");
             } else {
                 out.println("NOT_FOUND");
             }
         }

         private void handleTTL(String[] command, PrintWriter out) {
             if (command.length < 2) {
                 out.println("ERROR: TTL command requires key");
                 return;
             }
             String key = command[1];
             if (!keyExpiryMap.containsKey(key)) {
                 out.println("-1");
                 return;
             }
             long ttl = keyExpiryMap.get(key) - System.currentTimeMillis();
             if (ttl <= 0) {
                 kvStore.remove(key);
                 keyExpiryMap.remove(key);
                 saveToDiskAsync();
                 out.println("-2"); // Key has expired
             } else {
                 out.println(ttl / 1000); // Return TTL in seconds
             }
         }

         private boolean isKeyExpired(String key) {
             if (!keyExpiryMap.containsKey(key)) {
                 return false;
             }
             long expiryTime = keyExpiryMap.get(key);
             return System.currentTimeMillis() > expiryTime;
         }

         private void replicateToNodes(String action, String key, String value) {
             for (String node : nodes) {
                 boolean replicated = false;
                 for (int i = 0; i < REPLICATION_RETRIES && !replicated; i++) {
                     try (Socket socket = new Socket()) {
                         socket.connect(new InetSocketAddress(node.split(":")[0], Integer.parseInt(node.split(":")[1])), (int) TIMEOUT_MS);
                         PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                         out.println(action + " " + key + " " + value);
                         replicated = true;
                     } catch (IOException e) {
                         System.err.println("Retry " + (i + 1) + " failed to replicate to node: " + node);
                     }
                 }
                 if (!replicated) {
                     System.err.println("Failed to replicate to node after retries: " + node);
                 }
             }
         }

         private static void saveToDisk() {
             synchronized (lock) {
                 try (FileOutputStream fos = new FileOutputStream(BACKUP_FILE);
                      ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                     oos.writeObject(kvStore);
                     oos.writeObject(keyExpiryMap);
                     System.out.println("Backup saved to disk.");
                 } catch (IOException e) {
                     System.err.println("Error saving to disk: " + e.getMessage());
                 }
             }
         }

         private static void saveToDiskAsync() {
             Executors.newSingleThreadExecutor().execute(DistributedKVStore::saveToDisk);
         }

         private static void loadFromDisk() {
             synchronized (lock) {
                 try (FileInputStream fis = new FileInputStream(BACKUP_FILE);
                      ObjectInputStream ois = new ObjectInputStream(fis)) {
                     kvStore = (ConcurrentHashMap<String, String>) ois.readObject();
                     keyExpiryMap = (ConcurrentHashMap<String, Long>) ois.readObject();
                     System.out.println("Backup loaded from disk.");
                 } catch (IOException | ClassNotFoundException e) {
                     System.err.println("Error loading from disk: " + e.getMessage());
                 }
             }
         }

         private static void saveOnShutdown() {
             System.out.println("Shutting down, saving state...");
             saveToDisk();
         }
     }

     private static void removeExpiredKeys() {
         for (String key : keyExpiryMap.keySet()) {
             if (isKeyExpired(key)) {
                 kvStore.remove(key);
                 keyExpiryMap.remove(key);
                 saveToDiskAsync();
             }
         }
     }

     private static boolean isKeyExpired(String key) {
         if (!keyExpiryMap.containsKey(key)) {
             return false;
         }
         long expiryTime = keyExpiryMap.get(key);
         return System.currentTimeMillis() > expiryTime;
     }
 }

 // Client Code to Test the KV Store
 class KVStoreClient {
     public static void main(String[] args) throws IOException {
         if (args.length < 3) {
             System.out.println("Usage: java KVStoreClient <host> <port> <command>");
             return;
         }

         String host = args[0];
         int port = Integer.parseInt(args[1]);
         String command = args[2];

         try (Socket socket = new Socket(host, port);
              PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
              BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

             out.println(command);
             String response = in.readLine();
             System.out.println("Response: " + response);
         }
     }
 }