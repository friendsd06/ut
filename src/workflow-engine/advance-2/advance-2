I've updated the workflow engine to use a Directed Acyclic Graph (DAG) structure, allowing for more complex dependencies between tasks.
 Let me know if you need further enhancements or explanations!


 import java.util.*;

 // Task Interface
 interface Task {
     String getName();
     void execute();
 }

 // Basic Implementation of a Task
 class SimpleTask implements Task {
     private final String name;

     public SimpleTask(String name) {
         this.name = name;
     }

     @Override
     public String getName() {
         return name;
     }

     @Override
     public void execute() {
         System.out.println("Executing Task: " + name);
     }
 }

 // Workflow Class using Directed Acyclic Graph (DAG)
 class Workflow {
     private final String name;
     private final Map<Task, List<Task>> taskGraph;
     private final Map<String, Boolean> taskStatus;
     private final Set<Task> visited;

     public Workflow(String name) {
         this.name = name;
         this.taskGraph = new HashMap<>();
         this.taskStatus = new HashMap<>();
         this.visited = new HashSet<>();
     }

     // Add Task to Workflow
     public void addTask(Task task) {
         taskGraph.putIfAbsent(task, new ArrayList<>());
         taskStatus.put(task.getName(), false);
     }

     // Add Dependency between Tasks
     public void addDependency(Task from, Task to) {
         if (!taskGraph.containsKey(from) || !taskGraph.containsKey(to)) {
             throw new IllegalArgumentException("Both tasks must be added to the workflow before adding a dependency.");
         }
         taskGraph.get(from).add(to);
     }

     // Execute the Workflow
     public void execute() {
         System.out.println("Starting Workflow: " + name);
         for (Task task : taskGraph.keySet()) {
             if (!visited.contains(task)) {
                 executeTask(task);
             }
         }
         System.out.println("Workflow " + name + " completed.");
     }

     // Execute Task and its Dependencies
     private void executeTask(Task task) {
         if (visited.contains(task)) {
             return;
         }

         visited.add(task);
         for (Task dependentTask : taskGraph.get(task)) {
             if (!visited.contains(dependentTask)) {
                 executeTask(dependentTask);
             }
         }

         if (!taskStatus.get(task.getName())) {
             task.execute();
             taskStatus.put(task.getName(), true);
         }
     }

     // Get Workflow Status
     public void getStatus() {
         System.out.println("Workflow Status for: " + name);
         for (Map.Entry<String, Boolean> entry : taskStatus.entrySet()) {
             System.out.println("Task: " + entry.getKey() + " - Status: " + (entry.getValue() ? "Completed" : "Pending"));
         }
     }
 }

 // Main Class to Run Workflow Engine
 public class WorkflowEngine {
     public static void main(String[] args) {
         // Create Workflow
         Workflow workflow = new Workflow("Data Processing Workflow");

         // Create Tasks
         Task extractData = new SimpleTask("Extract Data");
         Task transformData = new SimpleTask("Transform Data");
         Task loadData = new SimpleTask("Load Data");
         Task validateData = new SimpleTask("Validate Data");

         // Add Tasks to Workflow
         workflow.addTask(extractData);
         workflow.addTask(transformData);
         workflow.addTask(loadData);
         workflow.addTask(validateData);

         // Add Dependencies
         workflow.addDependency(extractData, transformData);
         workflow.addDependency(transformData, validateData);
         workflow.addDependency(validateData, loadData);

         // Execute Workflow
         workflow.execute();

         // Get Workflow Status
         workflow.getStatus();
     }
 }