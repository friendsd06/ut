import java.io.*;
import java.util.*;
import java.util.concurrent.*;

// Task Interface
interface Task extends Serializable {
    String getName();
    void execute();
}

// Basic Implementation of a Task
class SimpleTask implements Task {
    private final String name;

    public SimpleTask(String name) {
        this.name = name;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void execute() {
        System.out.println("Executing Task: " + name);
    }
}

// Workflow Class using Directed Acyclic Graph (DAG)
class Workflow implements Serializable {
    private final String name;
    private final Map<Task, List<Task>> taskGraph;
    private final Map<String, Boolean> taskStatus;
    private final Set<Task> visited;
    private final ExecutorService executor;
    private final Map<String, String> metadata;
    private final Queue<String> auditLog;
    private long startTime;
    private long endTime;

    public Workflow(String name) {
        this.name = name;
        this.taskGraph = new HashMap<>();
        this.taskStatus = new ConcurrentHashMap<>();
        this.visited = ConcurrentHashMap.newKeySet();
        this.executor = Executors.newFixedThreadPool(10);
        this.metadata = new ConcurrentHashMap<>();
        this.auditLog = new ConcurrentLinkedQueue<>();
    }

    // Add Task to Workflow
    public void addTask(Task task) {
        taskGraph.putIfAbsent(task, new ArrayList<>());
        taskStatus.put(task.getName(), false);
        metadata.put(task.getName(), "");
    }

    // Add Dependency between Tasks
    public void addDependency(Task from, Task to) {
        if (!taskGraph.containsKey(from) || !taskGraph.containsKey(to)) {
            throw new IllegalArgumentException("Both tasks must be added to the workflow before adding a dependency.");
        }
        taskGraph.get(from).add(to);
    }

    // Execute the Workflow
    public void execute() {
        System.out.println("Starting Workflow: " + name);
        startTime = System.currentTimeMillis();
        for (Task task : taskGraph.keySet()) {
            if (!visited.contains(task)) {
                executeTask(task);
            }
        }
        endTime = System.currentTimeMillis();
        System.out.println("Workflow " + name + " completed in " + (endTime - startTime) + " ms.");
        saveState();
    }

    // Execute Task and its Dependencies
    private void executeTask(Task task) {
        if (visited.contains(task)) {
            return;
        }

        visited.add(task);
        for (Task dependentTask : taskGraph.get(task)) {
            if (!visited.contains(dependentTask)) {
                executeTask(dependentTask);
            }
        }

        executor.submit(() -> {
            if (!taskStatus.get(task.getName())) {
                logAudit("Starting Task: " + task.getName());
                task.execute();
                taskStatus.put(task.getName(), true);
                logAudit("Completed Task: " + task.getName());
            }
        });
    }

    // Get Workflow Status
    public void getStatus() {
        System.out.println("Workflow Status for: " + name);
        for (Map.Entry<String, Boolean> entry : taskStatus.entrySet()) {
            System.out.println("Task: " + entry.getKey() + " - Status: " + (entry.getValue() ? "Completed" : "Pending"));
        }
    }

    // Save Workflow State to File
    public void saveState() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(name + "_state.ser"))) {
            oos.writeObject(this);
            System.out.println("Workflow state saved.");
        } catch (IOException e) {
            System.err.println("Failed to save workflow state: " + e.getMessage());
        }
    }

    // Load Workflow State from File
    public static Workflow loadState(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            Workflow workflow = (Workflow) ois.readObject();
            System.out.println("Workflow state loaded.");
            return workflow;
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("Failed to load workflow state: " + e.getMessage());
            return null;
        }
    }

    // Add Metadata to Task
    public void addMetadata(String taskName, String data) {
        if (metadata.containsKey(taskName)) {
            metadata.put(taskName, data);
        } else {
            throw new IllegalArgumentException("Task does not exist in workflow.");
        }
    }

    // Get Metadata for Task
    public String getMetadata(String taskName) {
        return metadata.getOrDefault(taskName, "");
    }

    // Log Audit Information
    private void logAudit(String message) {
        auditLog.add(new Date() + " - " + message);
    }

    // Print Audit Log
    public void printAuditLog() {
        System.out.println("Audit Log for Workflow: " + name);
        for (String log : auditLog) {
            System.out.println(log);
        }
    }

    // Shutdown Executor Service
    public void shutdown() {
        executor.shutdown();
        try {
            if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
                executor.shutdownNow();
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
        }
    }

    // Get Execution Time
    public long getExecutionTime() {
        return endTime - startTime;
    }
}

// Main Class to Run Workflow Engine
public class WorkflowEngine {
    public static void main(String[] args) {
        // Load Workflow State if Exists
        Workflow workflow = Workflow.loadState("Data Processing Workflow_state.ser");
        if (workflow == null) {
            // Create Workflow if no saved state
            workflow = new Workflow("Data Processing Workflow");

            // Create Tasks
            Task extractData = new SimpleTask("Extract Data");
            Task transformData = new SimpleTask("Transform Data");
            Task loadData = new SimpleTask("Load Data");
            Task validateData = new SimpleTask("Validate Data");

            // Add Tasks to Workflow
            workflow.addTask(extractData);
            workflow.addTask(transformData);
            workflow.addTask(loadData);
            workflow.addTask(validateData);

            // Add Dependencies
            workflow.addDependency(extractData, transformData);
            workflow.addDependency(transformData, validateData);
            workflow.addDependency(validateData, loadData);
        }

        // Execute Workflow
        workflow.execute();

        // Get Workflow Status
        workflow.getStatus();

        // Print Audit Log
        workflow.printAuditLog();

        // Get Execution Time
        System.out.println("Total Execution Time: " + workflow.getExecutionTime() + " ms");

        // Shutdown Executor Service
        workflow.shutdown();
    }
}