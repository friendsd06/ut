{# templates/base_dag.j2 #}
"""
DAG: {{ metadata.dag_config.dag_id }}
Description: {{ metadata.dag_config.description }}
Generated at: {{ now() }}
Owner: {{ metadata.dag_config.owner }}
"""

from airflow import DAG
from datetime import datetime, timedelta
{% block imports %}
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.empty import BranchPythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.sensors.external_task import ExternalTaskSensor
from airflow.operators.email import EmailOperator
from airflow.providers.http.operators.http import SimpleHttpOperator
from airflow.utils.task_group import TaskGroup

# Import user-defined Python callables
{% for task in metadata.tasks %}
    {% if task.operator_type == 'PythonOperator' and task.python_callable %}
from my_python_module import {{ task.python_callable }}
    {% endif %}
{% endfor %}
{% endblock %}

{% macro render_default_args(dag_config) %}
default_args = {
    "owner": "{{ dag_config.owner }}",
    "start_date": {{ dag_config.start_date | datetime_to_code }},
    {% if dag_config.end_date %}
    "end_date": {{ dag_config.end_date | datetime_to_code }},
    {% endif %}
    "retries": {{ dag_config.retries }},
    "retry_delay": {{ dag_config.retry_delay | timedelta_to_code }},
    {% if dag_config.email_on_failure is defined %}
    "email_on_failure": {{ dag_config.email_on_failure }},
    {% endif %}
    {% if dag_config.email_on_retry is defined %}
    "email_on_retry": {{ dag_config.email_on_retry }},
    {% endif %}
    {% if dag_config.depends_on_past is defined %}
    "depends_on_past": {{ dag_config.depends_on_past }},
    {% endif %}
    {% if dag_config.wait_for_downstream is defined %}
    "wait_for_downstream": {{ dag_config.wait_for_downstream }},
    {% endif %}
    {% if dag_config.default_args %}
    {% for key, value in dag_config.default_args.items() %}
    "{{ key }}": {{ value }},
    {% endfor %}
    {% endif %}
}
{% endmacro %}

{% block dag_declaration %}
with DAG(
    dag_id="{{ metadata.dag_config.dag_id }}",
    default_args=default_args,
    description="{{ metadata.dag_config.description }}",
    schedule_interval="{{ metadata.dag_config.schedule_interval }}",
    catchup={{ metadata.dag_config.catchup }},
    max_active_runs={{ metadata.dag_config.max_active_runs }},
    {% if metadata.dag_config.concurrency %}
    concurrency={{ metadata.dag_config.concurrency }},
    {% endif %}
    tags={{ metadata.dag_config.tags }},
) as dag:
{% block dag_content %}
{% endblock %}
{% endblock %}
