# ingestion_1_dag.py
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def ingest_data_1(**context):
    """Function to perform ingestion for source 1"""
    print("Starting ingestion for source 1...")
    # Add your ingestion logic here
    print("Ingestion 1 completed successfully")

dag_1 = DAG(
    'ingestion_1_dag',
    default_args=default_args,
    description='Data ingestion DAG for source 1',
    schedule_interval='0 0 * * *',
    catchup=False
)

ingest_task_1 = PythonOperator(
    task_id='ingest_data_1',
    python_callable=ingest_data_1,
    provide_context=True,
    dag=dag_1
)

# ingestion_2_dag.py
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def ingest_data_2(**context):
    """Function to perform ingestion for source 2"""
    print("Starting ingestion for source 2...")
    # Add your ingestion logic here
    print("Ingestion 2 completed successfully")

dag_2 = DAG(
    'ingestion_2_dag',
    default_args=default_args,
    description='Data ingestion DAG for source 2',
    schedule_interval='0 0 * * *',
    catchup=False
)

ingest_task_2 = PythonOperator(
    task_id='ingest_data_2',
    python_callable=ingest_data_2,
    provide_context=True,
    dag=dag_2
)

# ingestion_3_dag.py
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def ingest_data_3(**context):
    """Function to perform ingestion for source 3"""
    print("Starting ingestion for source 3...")
    # Add your ingestion logic here
    print("Ingestion 3 completed successfully")

dag_3 = DAG(
    'ingestion_3_dag',
    default_args=default_args,
    description='Data ingestion DAG for source 3',
    schedule_interval='0 0 * * *',
    catchup=False
)

ingest_task_3 = PythonOperator(
    task_id='ingest_data_3',
    python_callable=ingest_data_3,
    provide_context=True,
    dag=dag_3
)

# enrichment_dag.py
from airflow import DAG
from airflow.sensors.external_task import ExternalTaskSensor
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def perform_enrichment(**context):
    """Function to perform enrichment after all ingestions complete"""
    print("Starting enrichment process...")
    # Add your enrichment logic here
    print("Enrichment process completed successfully")

enrichment_dag = DAG(
    'enrichment_dag',
    default_args=default_args,
    description='Enrichment DAG that waits for all ingestion jobs',
    schedule_interval='0 0 * * *',
    catchup=False
)

# External sensors for each ingestion DAG
sensor_1 = ExternalTaskSensor(
    task_id='wait_for_ingestion_1',
    external_dag_id='ingestion_1_dag',
    external_task_id='ingest_data_1',
    allowed_states=['success'],
    execution_delta=timedelta(hours=0),
    timeout=3600,  # 1 hour timeout
    mode='reschedule',  # Frees up worker slot while waiting
    dag=enrichment_dag
)

sensor_2 = ExternalTaskSensor(
    task_id='wait_for_ingestion_2',
    external_dag_id='ingestion_2_dag',
    external_task_id='ingest_data_2',
    allowed_states=['success'],
    execution_delta=timedelta(hours=0),
    timeout=3600,
    mode='reschedule',
    dag=enrichment_dag
)

sensor_3 = ExternalTaskSensor(
    task_id='wait_for_ingestion_3',
    external_dag_id='ingestion_3_dag',
    external_task_id='ingest_data_3',
    allowed_states=['success'],
    execution_delta=timedelta(hours=0),
    timeout=3600,
    mode='reschedule',
    dag=enrichment_dag
)

enrichment_task = PythonOperator(
    task_id='perform_enrichment',
    python_callable=perform_enrichment,
    provide_context=True,
    dag=enrichment_dag
)

# Set up the dependencies in enrichment DAG
[sensor_1, sensor_2, sensor_3] >> enrichment_task