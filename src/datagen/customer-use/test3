from airflow import DAG
from airflow.operators.python import PythonOperator, BranchPythonOperator
from datetime import datetime, timedelta
from airflow.models import DagRun, Variable
from airflow.utils.db import provide_session
from airflow.utils.state import State
import random

@provide_session
def get_previous_run_status(dag_id, execution_date, session=None):
    previous_run = session.query(DagRun).filter(
        DagRun.dag_id == dag_id,
        DagRun.execution_date < execution_date
    ).order_by(DagRun.execution_date.desc()).first()

    return previous_run.state if previous_run else None

def generate_test_number(**context):
    """Generate random even/odd number for testing"""
    # You can control test mode through Airflow Variables
    test_mode = Variable.get("test_mode", default_var="False")

    if test_mode.lower() == "true":
        # Generate random number (1-10) for testing
        test_number = random.randint(1, 10)
        print(f"Test Mode: Generated number {test_number}")
    else:
        # Use number from DAG configuration
        test_number = context['dag_run'].conf.get('number', 0)
        print(f"Normal Mode: Using provided number {test_number}")

    # Store run information for analysis
    Variable.set(
        f"test_run_{context['dag_run'].run_id}",
        {
            "number": test_number,
            "timestamp": datetime.now().isoformat(),
            "mode": "test" if test_mode.lower() == "true" else "normal"
        },
        serialize_json=True
    )

    return test_number

def branch_decision(**context):
    number = context['task_instance'].xcom_pull(task_ids='generate_number')
    previous_status = get_previous_run_status('number_test_dag', context['execution_date'])

    print(f"Processing number: {number}")
    print(f"Previous run status: {previous_status}")

    if previous_status == State.FAILED and number % 2 != 0:
        return 'hold_process'
    return 'process_number'

def process_number(**context):
    number = context['task_instance'].xcom_pull(task_ids='generate_number')
    print(f"Processing number: {number}")

    # Simulate success/failure based on business logic
    success = True  # You can modify this based on your test cases

    if success:
        print(f"Successfully processed number {number}")
        return True
    else:
        raise Exception(f"Failed to process number {number}")

def hold_process(**context):
    number = context['task_instance'].xcom_pull(task_ids='generate_number')
    print(f"Holding process for number {number} due to previous failure")
    return False

with DAG(
    'number_test_dag',
    start_date=datetime(2024, 1, 1),
    schedule_interval=None,  # Manual triggers for testing
    catchup=False,
    default_args={
        'owner': 'airflow',
        'retries': 0  # No retries for clearer test results
    }
) as dag:

    generate_number = PythonOperator(
        task_id='generate_number',
        python_callable=generate_test_number
    )

    branch_check = BranchPythonOperator(
        task_id='branch_check',
        python_callable=branch_decision
    )

    process_task = PythonOperator(
        task_id='process_number',
        python_callable=process_number
    )

    hold_task = PythonOperator(
        task_id='hold_process',
        python_callable=hold_process
    )

    generate_number >> branch_check >> [process_task, hold_task]