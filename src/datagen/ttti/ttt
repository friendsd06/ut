CREATE TABLE public.dataproduct (
    productid varchar(100) NOT NULL,
    productname varchar(100) NOT NULL,
    PRIMARY KEY (productid)
);

CREATE TABLE public.dataproductline (
    productlineid varchar(100) NOT NULL,
    productid varchar(100) NOT NULL,
    productlinename varchar(100) NOT NULL,
    PRIMARY KEY (productlineid),
    FOREIGN KEY (productid) REFERENCES dataproduct(productid)
);

CREATE TABLE public.datasets (
    datasetid varchar(100) NOT NULL,
    productlineid varchar(100) NOT NULL,
    datasetname varchar(100) NOT NULL,
    PRIMARY KEY (datasetid),
    FOREIGN KEY (productlineid) REFERENCES dataproductline(productlineid)
);


CREATE TABLE IF NOT EXISTS pipeline (
    pipelineid VARCHAR(100) NOT NULL,
    pipelinename VARCHAR(100) NOT NULL,
    schedule_interval VARCHAR(50),
    start_date TIMESTAMP WITHOUT TIME ZONE,
    catchup BOOLEAN DEFAULT FALSE,
    max_active_runs INT DEFAULT 1,
    concurrency INT DEFAULT 1,
    retries INT DEFAULT 0,
    retry_delay_minutes INT DEFAULT 5,
    dag_timeout_minutes INT DEFAULT 60,
    owner VARCHAR(100),
    email_on_failure BOOLEAN DEFAULT TRUE,
    email_on_retry BOOLEAN DEFAULT FALSE,
    notification_emails VARCHAR[],
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pipeline_pkey PRIMARY KEY (pipelineid)
);

CREATE TABLE IF NOT EXISTS pipelinedatasets (
    pipelineid VARCHAR(100) NOT NULL,
    datasetid VARCHAR(100) NOT NULL,
    datasetentrytype VARCHAR(3) NOT NULL,
    CONSTRAINT pipeline_datasets_pk PRIMARY KEY (pipelineid, datasetid),
    CONSTRAINT dataset_entry_type_check CHECK (datasetentrytype IN ('IN', 'OUT'))
);

CREATE TABLE IF NOT EXISTS task_dataset_mapping (
    taskid VARCHAR(100) NOT NULL,
    datasetid VARCHAR(100) NOT NULL,
    pipelineid VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_dataset_mapping_pkey PRIMARY KEY (taskid, datasetid, pipelineid),
    CONSTRAINT fk_dataset FOREIGN KEY (datasetid)
        REFERENCES datasets (datasetid)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_task FOREIGN KEY (taskid)
        REFERENCES tasks (taskid)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_pipeline FOREIGN KEY (pipelineid)
        REFERENCES pipeline (pipelineid)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

CREATE TABLE taskdependencies (
    pipelineid VARCHAR(100) NOT NULL,
    taskid VARCHAR(100) NOT NULL,
    dependenttaskid VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (pipelineid, taskid),
    FOREIGN KEY (pipelineid) REFERENCES pipeline(pipelineid),
    FOREIGN KEY (taskid) REFERENCES tasks(taskid),
    FOREIGN KEY (dependenttaskid) REFERENCES tasks(taskid)
);

CREATE TABLE IF NOT EXISTS tasks (
    taskid VARCHAR(100) NOT NULL,
    taskname VARCHAR(100) NOT NULL,
    taskgroup VARCHAR(100),
    pipelineid VARCHAR(100) NOT NULL,
    operator_type VARCHAR(50) NOT NULL,
    dependencytype VARCHAR(50),
    task_params JSONB DEFAULT '{}'::JSONB,
    trigger_rule VARCHAR(50),
    task_timeout_minutes INT DEFAULT 30,
    task_retries INT DEFAULT 3,
    retry_delay INTERVAL DEFAULT '00:05:00'::INTERVAL,
    task_priority_weight INT DEFAULT 1,
    task_queue VARCHAR(50),
    pool VARCHAR(50) DEFAULT 'default_pool',
    execution_timeout INTERVAL,
    depends_on_past BOOLEAN DEFAULT FALSE,
    wait_for_downstream BOOLEAN DEFAULT FALSE,
    email_on_failure BOOLEAN DEFAULT TRUE,
    email_on_retry BOOLEAN DEFAULT FALSE,
    on_success_callback TEXT,
    on_failure_callback TEXT,
    on_retry_callback TEXT,
    sla INTERVAL,
    doc TEXT,
    doc_md TEXT,
    doc_rst TEXT,
    doc_json TEXT,
    doc_yaml TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT tasks_pkey PRIMARY KEY (taskid),
    CONSTRAINT tasks_pipelineid_fkey FOREIGN KEY (pipelineid)
        REFERENCES pipeline (pipelineid)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
