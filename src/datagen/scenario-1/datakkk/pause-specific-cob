# control_dags.py

from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import DagBag, DagModel
from airflow.utils.dates import days_ago
from airflow.utils.db import provide_session
from datetime import datetime, timedelta
import logging
import re

# Initialize Logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)  # Set to DEBUG for more verbosity

# Configure logging format (optional)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
if not logger.handlers:
    logger.addHandler(handler)

# Default arguments for the Control DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email': ['alerts@yourdomain.com'],  # Replace with your email
    'email_on_failure': True,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

@provide_session
def pause_specific_dags(session=None):
    """
    Pause all Loan and Deposit DAGs that have a specific cob_date.
    """
    dagbag = DagBag()
    target_cob_date = '2024-11-25'  # The specific COB Date to pause
    pattern = r'^(loan|deposit)_processing_2024-11-25_\d+$'
    paused_count = 0
    already_paused_count = 0
    skipped_count = 0

    logger.info(f"Starting to pause Loan and Deposit DAGs with COB Date: {target_cob_date}")

    for dag_id, dag in dagbag.dags.items():
        if re.match(pattern, dag_id):
            if not dag.is_paused:
                dag_model = session.query(DagModel).filter(DagModel.dag_id == dag_id).first()
                if dag_model:
                    dag_model.is_paused = True  # Pause the DAG
                    session.commit()
                    paused_count += 1
                    logger.info(f"Paused DAG '{dag_id}'.")
                else:
                    logger.error(f"DAG Model for '{dag_id}' not found.")
            else:
                already_paused_count += 1
                logger.info(f"DAG '{dag_id}' is already paused.")
        else:
            skipped_count += 1
            logger.debug(f"DAG '{dag_id}' does not match the target pattern. Skipping.")

    # Summary Logging
    logger.info("Pause Specific DAGs Execution Summary:")
    logger.info(f"Total Target DAGs: {paused_count + already_paused_count}")
    logger.info(f"Paused DAGs: {paused_count}")
    logger.info(f"Already Paused DAGs: {already_paused_count}")
    logger.info(f"Skipped DAGs (Non-target DAGs): {skipped_count}")

with DAG(
    'control_pause_specific_dags',
    default_args=default_args,
    description='Control DAG to Pause Specific Loan and Deposit DAGs',
    schedule_interval='@daily',  # Adjust schedule as needed
    start_date=days_ago(1),
    catchup=False,
    tags=['control', 'loan', 'deposit'],
) as dag:

    pause_task = PythonOperator(
        task_id='pause_specific_dags_task',
        python_callable=pause_specific_dags,
    )

    pause_task