# loan_deposit_dags.py

from airflow import DAG
from airflow.operators.dummy import DummyOperator
from airflow.utils.dates import days_ago
from datetime import datetime, timedelta

# Default arguments for all DAGs
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email': ['alerts@yourdomain.com'],  # Replace with your email
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def create_processing_dag(asset_type, index, days_offset):
    """
    Helper function to create a processing DAG with cob_date in the DAG ID.

    :param asset_type: 'loan' or 'deposit'
    :param index: Unique index for the DAG
    :param days_offset: Number of days to subtract from today for cob_date
    :return: Airflow DAG object
    """
    cob_date = (datetime.now() - timedelta(days=days_offset)).strftime('%Y-%m-%d')
    dag_id = f"{asset_type}_processing_{cob_date}_{index}"

    with DAG(
        dag_id=dag_id,
        default_args=default_args,
        description=f"{asset_type.capitalize()} Processing DAG for COB Date {cob_date}",
        schedule_interval='@daily',  # Adjust as needed
        start_date=days_ago(1),
        catchup=False,
        tags=[asset_type],
    ) as dag:

        start = DummyOperator(
            task_id='start'
        )

        end = DummyOperator(
            task_id='end'
        )

        start >> end

        # Assign metadata attributes
        dag.asset_type = asset_type
        dag.cob_date = cob_date

    return dag

# Create 5 Loan DAGs
for i in range(1, 6):
    # For demonstration, set different cob_dates by offsetting days
    create_processing_dag(asset_type='loan', index=i, days_offset=i)

# Create 5 Deposit DAGs
for i in range(1, 6):
    # For demonstration, set different cob_dates by offsetting days
    create_processing_dag(asset_type='deposit', index=i, days_offset=i)
