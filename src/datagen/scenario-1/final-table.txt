-- First, create ENUM types
CREATE TYPE operator_type AS ENUM (
    'PythonOperator',
    'PostgresOperator',
    'BashOperator',
    'ExternalTaskSensor',
    'HttpOperator',
    'EmailOperator',
    'EmptyOperator'
    'BranchPythonOperator'
);
CREATE TYPE trigger_rule_type AS ENUM ('all_success', 'all_failed', 'all_done', 'one_success', 'none_failed');



-- Table: public.dataproduct

-- DROP TABLE IF EXISTS public.dataproduct;

CREATE TABLE IF NOT EXISTS dataproduct
(
    productid character varying(100) NOT NULL,
    productname character varying(100)  NOT NULL,
    CONSTRAINT dataproduct_pkey PRIMARY KEY (productid)
)

CREATE TABLE DataProductLine (
    ProductLineID VARCHAR(100) PRIMARY KEY,
    ProductID VARCHAR(100) NOT NULL,
    ProductLineName VARCHAR(100) NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES dataproduct(productid)
);

CREATE TABLE Datasets (
    DatasetID VARCHAR(100) PRIMARY KEY,
    ProductLineID VARCHAR(100) NOT NULL,
    DatasetName VARCHAR(100) NOT NULL,
    FOREIGN KEY (ProductLineID) REFERENCES DataProductLine(ProductLineID)
);


CREATE TABLE Slice (
    SliceID VARCHAR(100) PRIMARY KEY,
    ProductLineID VARCHAR(100) NOT NULL,
    SliceName VARCHAR(100) NOT NULL,
    FOREIGN KEY (ProductLineID) REFERENCES DataProductLine(ProductLineID)
);


CREATE TABLE IF NOT EXISTS pipeline
(
    pipelineid character varying(100) NOT NULL,
    pipelinename character varying(100)  NOT NULL,
    pipelinegroup character varying(50),
    pipelinepriority integer,
    schedule_interval character varying(50) ,
    start_date timestamp without time zone,
    catchup boolean DEFAULT false,
    max_active_runs integer DEFAULT 1,
    concurrency integer DEFAULT 1,
    retries integer DEFAULT 0,
    retry_delay_minutes integer DEFAULT 5,
    dag_timeout_minutes integer DEFAULT 60,
    owner character varying(100) COLLATE pg_catalog."default",
    email_on_failure boolean DEFAULT true,
    email_on_retry boolean DEFAULT false,
    notification_emails character varying[] ,
    is_active boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pipeline_pkey PRIMARY KEY (pipelineid)
)


CREATE TABLE IF NOT EXISTS pipelinedatasets
(
    pipelineid character varying(100)  NOT NULL,
    datasetid character varying(100)  NOT NULL,
    datasetentrytype character varying(3) NOT NULL,
    CONSTRAINT pipeline_datasets_pk PRIMARY KEY (pipelineid, datasetid),
    CONSTRAINT dataset_entry_type_check CHECK (datasetentrytype::text = ANY (ARRAY['IN'::character varying, 'OUT'::character varying]::text[]))
)


CREATE TABLE IF NOT EXISTS public.task_dataset_mapping
(
    taskid character varying(100)  NOT NULL,
    datasetid character varying(100)  NOT NULL,
    is_mandatory boolean DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT task_dataset_mapping_pkey PRIMARY KEY (taskid, datasetid),
    CONSTRAINT fk_dataset FOREIGN KEY (datasetid)
        REFERENCES public.datasets (datasetid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_task FOREIGN KEY (taskid)
        REFERENCES public.tasks (taskid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)




