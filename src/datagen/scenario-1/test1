from airflow import DAG
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.operators.dummy import DummyOperator
from datetime import datetime, timedelta
import time
import random
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

default_args = {
    'owner': 'airflow',
    'start_date': datetime(2024, 1, 1),
    'retries': 1,
    'retry_delay': timedelta(minutes=5)
}

def simulate_processing():
    """Simulate processing time"""
    sleep_time = random.uniform(10, 30)
    logger.info(f"Processing will take {sleep_time:.2f} seconds")
    time.sleep(sleep_time)

def check_checksum(**context) -> str:
    """TSK1: Validate checksum and determine next task"""
    logger.info("Starting checksum validation")
    simulate_processing()

    is_valid = random.choice([True, False])

    if is_valid:
        logger.info("Checksum validation passed")
        return 'TSK2_id_lookup'
    else:
        logger.error("Checksum validation failed")
        return 'handle_error'

def id_lookup(**context):
    """TSK2: Look up IDs in database"""
    logger.info("Starting ID lookup")
    simulate_processing()
    logger.info("ID lookup completed")

def lfv_generate(**context):
    """TSK3: Generate LFV values"""
    logger.info("Starting LFV generation")
    simulate_processing()
    logger.info("LFV generation completed")

def activation_check(**context):
    """TSK4: Check activation status"""
    logger.info("Starting activation check")
    simulate_processing()
    logger.info("Activation check completed")

def substitution_check(**context):
    """TSK5: Perform substitution check"""
    logger.info("Starting substitution check")
    simulate_processing()
    logger.info("Substitution check completed")

def dump_to_target(**context):
    """TSK6: Dump data to target"""
    logger.info("Starting data dump")
    simulate_processing()
    logger.info("Data dump completed")

def trigger_ingestion(**context):
    """TSK7: Trigger ingestion process"""
    logger.info("Starting ingestion trigger")
    simulate_processing()
    logger.info("Ingestion trigger completed")

def handle_error(**context):
    """Handle validation errors"""
    logger.error("Processing error case")
    simulate_processing()
    logger.info("Error handling completed")

# Create DAG
with DAG(
    'data_validation_pipeline',
    default_args=default_args,
    description='Data validation pipeline',
    schedule_interval='@daily',
    catchup=False
) as dag:

    start = DummyOperator(
        task_id='start'
    )

    TSK1_checksum = BranchPythonOperator(
        task_id='TSK1_checksum',
        python_callable=check_checksum,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK2_id_lookup = PythonOperator(
        task_id='TSK2_id_lookup',
        python_callable=id_lookup,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK3_lfv_generate = PythonOperator(
        task_id='TSK3_lfv_generate',
        python_callable=lfv_generate,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK4_activation_check = PythonOperator(
        task_id='TSK4_activation_check',
        python_callable=activation_check,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK5_substitution_check = PythonOperator(
        task_id='TSK5_substitution_check',
        python_callable=substitution_check,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK6_dump_to_target = PythonOperator(
        task_id='TSK6_dump_to_target',
        python_callable=dump_to_target,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    TSK7_trigger_ingestion = PythonOperator(
        task_id='TSK7_trigger_ingestion',
        python_callable=trigger_ingestion,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    handle_error = PythonOperator(
        task_id='handle_error',
        python_callable=handle_error,
        provide_context=True,
        execution_timeout=timedelta(minutes=5)
    )

    success = DummyOperator(
        task_id='success',
        trigger_rule='all_success'
    )

    error = DummyOperator(
        task_id='error',
        trigger_rule='one_success'
    )

    # Define dependencies
    start >> TSK1_checksum

    # Success path
    TSK1_checksum >> TSK2_id_lookup >> TSK3_lfv_generate >> \
    TSK4_activation_check >> TSK5_substitution_check >> \
    TSK6_dump_to_target >> TSK7_trigger_ingestion >> success

    # Error path
    TSK1_checksum >> handle_error >> error